{"version":3,"names":["DeviceManager","WebexPlugin","extend","namespace","_devicePendingPinChallenge","_pairedDevice","_boundSpace","initialize","webex","internal","mercury","on","data","_receiveDeviceUpdates","getAll","DeviceCollection","refresh","reset","request","api","resource","then","res","body","reject","_updateDeviceMetadata","items","devices","forEach","device","deviceInfo","machineType","LYRA_SPACE","lyra","space","get","catch","err","logger","error","set","search","options","searchQuery","Error","people","searchId","uuid","v4","searchType","searchEntity","includePeople","includeRooms","queryString","upsert","deviceId","id","identity","existingDevice","resolve","method","auxDevice","_decryptDeviceName","token","getAdvertisedEndpoint","advertiser","result","displayName","remove","requestPin","url","dev","occupants","pinChallenge","info","join","passType","verificationInitiation","pair","pin","unpair","leave","bindSpace","kmsResourceObjectUrl","bindConversation","unbindSpace","unbindConversation","getAudioState","putAudioState","audioState","mute","unmute","increaseVolume","decreaseVolume","setVolume","level","deviceArray","length","all","map","index","services","waitForCatalog","deviceClass","UC_CLOUD","updatedDevice","inDevice","metadata","encryptedUserAssignedName","encryptionKeyUrl","encryption","decryptText","decryptedDeviceName","undefined","userAssignedName","spaceUrl","substring","lastIndexOf","self","verified","productName","DEFAULT_PRODUCT_NAME","pairedDeviceId"],"sources":["device-manager.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport {cloneDeep} from 'lodash';\nimport '@webex/internal-plugin-lyra';\nimport '@webex/internal-plugin-search';\nimport {WebexPlugin} from '@webex/webex-core';\nimport uuid from 'uuid';\n\nimport {LYRA_SPACE, UC_CLOUD, DEFAULT_PRODUCT_NAME} from './constants';\nimport DeviceCollection from './collection';\n\nconst DeviceManager = WebexPlugin.extend({\n  namespace: 'DeviceManager',\n  _devicePendingPinChallenge: null,\n  _pairedDevice: null,\n  _boundSpace: null,\n\n  initialize() {\n    // Lyra mercury events listener\n    this.webex.internal.mercury.on('event:lyra.space_updated', ({data}) => {\n      this._receiveDeviceUpdates(data);\n    });\n  },\n\n  /**\n  * Gets a list of all recent devices associated with the user\n  * the device list gets populated from Redis\n  * @returns {Promise<Device>}\n  */\n  getAll() {\n    return DeviceCollection.getAll();\n  },\n\n  /**\n  * Gets a list of all recent devices associated with the user\n  * the device list gets populated from Redis\n  * @returns {Promise<Device>}\n  */\n  refresh() {\n    DeviceCollection.reset();\n\n    return this.webex.request({\n      api: 'wdm',\n      resource: 'devices/auxiliary'\n    })\n      .then((res) => {\n        if (!res.body) {\n          return Promise.reject();\n        }\n\n        return this._updateDeviceMetadata(res.body.items)\n          .then((devices) => {\n            /* eslint-disable consistent-return */\n            devices.forEach((device) => {\n              if (device.deviceInfo &&\n                device.deviceInfo.machineType === LYRA_SPACE) {\n                return this.webex.internal.lyra.space.get(device.deviceInfo)\n                  .catch((err) => {\n                    this.logger.error('DeviceManager#refresh: failed to receive device info', err);\n                  });\n              }\n            });\n            /* eslint-enable consistent-return */\n            res.body.items.forEach((device) => {\n              DeviceCollection.set(device);\n            });\n\n            return this.getAll();\n          });\n      })\n      .catch((err) => {\n        this.logger.error('DeviceManager#refresh: failed to fetch recent devices', err);\n      });\n  },\n\n  /**\n  * Search for a device by name\n  * @param {Object} options\n  * @param {string} options.searchQuery\n  * @returns {Promise<Device>}\n  */\n  search(options) {\n    if (!options || !options.searchQuery) {\n      this.logger.error('DeviceManager#search: options.searchQuery is required');\n\n      return Promise.reject(new Error('DeviceManager#search: options.searchQuery is required'));\n    }\n\n    return this.webex.internal.search.people({\n      searchId: uuid.v4(),\n      searchType: 'DEVICE_SEARCH',\n      searchEntity: 'device',\n      includePeople: false,\n      includeRooms: true,\n      queryString: options.searchQuery\n    })\n      .catch((err) => {\n        this.logger.error('DeviceManager#search: failed to search a device', err);\n\n        throw err;\n      });\n  },\n\n  /**\n  * Caches the device info and also registers to Redis for subsequent fetches\n  * @param {Object} device\n  * @param {string} device.id\n  * @returns {deviceInfo}\n  */\n  upsert(device) {\n    const deviceId = device.id || device.identity && device.identity.id;\n\n    if (!deviceId) {\n      this.logger.error('DeviceManager#upsert: device.id is required');\n\n      return Promise.reject(new Error('DeviceManager#upsert: device.id is required'));\n    }\n    this._pairedDevice = this._devicePendingPinChallenge;\n    this._devicePendingPinChallenge = null;\n    // check if the device is already existing, if so then merge else add\n    const existingDevice = DeviceCollection.get(deviceId);\n\n    if (existingDevice) {\n      DeviceCollection.set(device);\n\n      return Promise.resolve(DeviceCollection.get(deviceId));\n    }\n\n    // new device requested, add to wdm for subsequent retreivals\n    return this.webex.request({\n      api: 'wdm',\n      method: 'PUT',\n      resource: `devices/auxiliary/Room/${deviceId}`\n    })\n      .then((res) => {\n        const auxDevice = res.body;\n\n        return this._decryptDeviceName(auxDevice);\n      })\n      .then((device) => {\n        DeviceCollection.set(device);\n\n        return Promise.resolve(DeviceCollection.get(deviceId));\n      })\n      .catch((err) => {\n        this.logger.error('DeviceManager#upsert: failed to add/update a device', err);\n\n        return Promise.reject(err);\n      });\n  },\n\n  /**\n  * Retreives device info of a particular device\n  * @param {string} token\n  * @returns {Promise<deviceInfo>}\n  */\n  get(token) {\n    if (!token) {\n      this.logger.error('DeviceManager#get: token is required');\n\n      return Promise.reject(new Error('DeviceManager#get: token is required'));\n    }\n    let deviceInfo;\n\n    return this.webex.internal.lyra.getAdvertisedEndpoint(token)\n      .then((res) => {\n        deviceInfo = res;\n\n        return this.webex.internal.lyra.space.get({id: res.advertiser.id});\n      })\n      .then((result) => {\n        // the deviceInfo doesn't have proper displayName, hence update\n        // displayName on deviceInfo for search to work\n        if (result && result.identity && result.identity.displayName) {\n          deviceInfo.advertiser.displayName = result.identity.displayName;\n        }\n\n        return deviceInfo;\n      })\n      .catch((err) => {\n        this.logger.error('DeviceManager#get: failed to get device info', err);\n\n        return Promise.reject(err);\n      });\n  },\n\n  /**\n  * Unregisters the device from Redis, will not fetch in subsequent loads,\n  * similar to space.deleteBinding()\n  * @param {string} deviceId\n  * @returns {Promise<deviceInfo>}\n  */\n  remove(deviceId) {\n    if (!deviceId) {\n      this.logger.error('DeviceManager#remove: deviceId is required');\n\n      return Promise.reject(new Error('DeviceManager#remove: deviceId is required'));\n    }\n\n    return this.webex.request({\n      method: 'delete',\n      api: 'wdm',\n      resource: `devices/auxiliary/${deviceId}`\n    })\n      .catch((error) => {\n        this.logger.error('DeviceManager#remove: failed to remove the device', error);\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n  * Requests to display PIN on the device\n  * @param {object} device\n  * @param {object} options\n  * @param {object} options.data\n  * @returns {Promise<deviceInfo>}\n  */\n  requestPin(device, options = {}) {\n    const deviceId = device.id || device.identity && device.identity.id;\n\n    if (!deviceId) {\n      this.logger.error('DeviceManager#requestPin: device.id is required');\n\n      return Promise.reject(new Error('DeviceManager#requestPin: device.id is required'));\n    }\n    const space = {id: deviceId, url: `/spaces/${deviceId}`};\n\n    return this.webex.internal.lyra.space.get(space)\n      .then((dev) => { // check if the space is pinChallenge capable\n        if (dev && dev.occupants && dev.occupants.pinChallenge) {\n          this.logger.info('DeviceManager#requestPin: space is PIN challenge capable');\n\n          return this.webex.internal.lyra.space.join(space, {\n            passType: 'MANUAL',\n            verificationInitiation: 'PIN',\n            data: options.data\n          })\n            .then(() => {\n              this._devicePendingPinChallenge = dev;\n\n              // return the actual device so that it can be upserted on successful\n              // PIN exchange\n              return dev;\n            });\n        }\n        // pairs with the space if it's not PIN challenge capable\n        this.logger.info('DeviceManager#requestPin: space is not PIN challenge capable, probably already occupied, will still return device info');\n\n        return this.webex.internal.lyra.space.get(space)\n          .then(() => Promise.resolve(dev));\n      })\n      .catch((err) => {\n        this.logger.error('DeviceManager#requestPin: device failed PIN challenge request', err);\n\n        return Promise.reject(err);\n      });\n  },\n\n  /**\n  * pairs the device with the user (manual pairing), also adds it to\n  * user's recents list for subsequent fetches.\n  * similar to space.join()\n  * @param {object} options\n  * @param {number} options.pin\n  * @returns {Promise<deviceInfo>}\n  */\n  pair(options = {}) {\n    if (!options.pin) {\n      this.logger.error('DeviceManager#pair: options.pin is required');\n\n      return Promise.reject(new Error('DeviceManager#pair: options.pin is required'));\n    }\n    if (this._devicePendingPinChallenge) {\n      const space = {id: this._devicePendingPinChallenge.identity.id, url: `/spaces/${this._devicePendingPinChallenge.identity.id}`};\n\n      return this.webex.internal.lyra.space.join(space, {\n        passType: 'PIN_ANSWER',\n        data: options.pin\n      })\n        .catch((err) => {\n          this.logger.error('DeviceManager#pair: incorrect PIN, unable to pair ', err);\n\n          return Promise.reject(err);\n        })\n        .then(() => this.upsert(this._devicePendingPinChallenge));\n    }\n    this.logger.error('DeviceManager#pair: no device to pair');\n\n    return Promise.reject(new Error('DeviceManager#pair: no device to pair'));\n  },\n\n  /**\n  * unpairs the device with the user (manual/ultrasonic pairing), but still\n  * keeps in the recents list/does not remove from Redis\n  * options.removeAllDevices will remove all associated devices to user\n  * similar to space.leave()\n  * @param {object} options\n  * @param {boolean} options.removeAllDevices\n  * @returns {Promise<deviceInfo>}\n  */\n  unpair(options = {}) {\n    if (!this._pairedDevice) {\n      this.logger.error('DeviceManager#unpair: no device to unpair');\n\n      return Promise.reject(new Error('DeviceManager#unpair: no device to unpair'));\n    }\n    const space = {url: `/spaces/${this._pairedDevice.identity.id}`};\n\n    return this.webex.internal.lyra.space.leave(space, options)\n      .catch((err) => {\n        this.logger.error('DeviceManager#unpair: failed to remove device from Lyra', err);\n\n        return Promise.reject(err);\n      });\n  },\n\n  /**\n  * binds the space to the paired device (if supported)\n  * similar to space.bindConversation()\n  * @param {object} options\n  * @param {boolean} options.url, conversation url\n  * @param {boolean} options.kmsResourceObjectUrl of the convo\n  * @returns {Promise<deviceInfo>}\n  */\n  bindSpace(options = {}) {\n    if (!options.url) {\n      this.logger.error('DeviceManager#pair: options.url is required');\n\n      return Promise.reject(new Error('DeviceManager#bindSpace: options.url is required'));\n    }\n    if (!options.kmsResourceObjectUrl) {\n      this.logger.error('DeviceManager#bindSpace: options.kmsResourceObjectUrl is required');\n\n      return Promise.reject(new Error('DeviceManager#bindSpace: options.kmsResourceObjectUrl is required'));\n    }\n    if (!this._pairedDevice) {\n      this.logger.error('DeviceManager#bindSpace: No device paired currently');\n\n      return Promise.reject(new Error('DeviceManager#bindSpace: No device paired currently'));\n    }\n    const space = {url: `/spaces/${this._pairedDevice.identity.id}`, id: this._pairedDevice.identity.id};\n\n    this._boundSpace = {\n      kmsResourceObjectUrl: options.kmsResourceObjectUrl,\n      url: options.url\n    };\n\n    return this.webex.internal.lyra.space.bindConversation(space, this._boundSpace)\n      .catch((err) => {\n        this.logger.error('DeviceManager#bindSpace: failed to bind device to Space');\n\n        return Promise.reject(err);\n      });\n  },\n\n  /**\n  * unbinds the space to the paired device (if supported)\n  * similar to space.unbindConversation()\n  * @returns {Promise<deviceInfo>}\n  */\n  unbindSpace() {\n    if (!this._pairedDevice || !this._boundSpace) {\n      this.logger.error('DeviceManager#unbindSpace: No space currently bound to the device');\n\n      return Promise.reject(new Error('DeviceManager#unbindSpace: No space currently bound to the device'));\n    }\n    const space = {url: `/spaces/${this._pairedDevice.identity.id}`, id: this._pairedDevice.identity.id};\n\n    return this.webex.internal.lyra.space.unbindConversation(space, this._boundSpace)\n      .then((res) => {\n        this._boundSpace = null;\n\n        return Promise.resolve(res);\n      })\n      .catch((err) => {\n        this.logger.error('DeviceManager#unbindSpace: failed to unbind Space to device');\n\n        return Promise.reject(err);\n      });\n  },\n\n  /**\n  * Gets the audio state of the paired device\n  * similar to device.getAudioState()\n  * @returns {Promise<audioState>}\n  */\n  getAudioState() {\n    if (!this._pairedDevice) {\n      this.logger.error('DeviceManager#getAudioState: Currently no device is paired');\n\n      return Promise.reject(new Error('DeviceManager#getAudioState: Currently no device is paired'));\n    }\n\n    return this.webex.internal.lyra.device.getAudioState(this._pairedDevice);\n  },\n\n  /**\n  * Updates audio state of the paired device, should be called every 10 minutes\n  * or when mic or volume state is changed\n  * similar to device.putAudioState()\n  * @param {object} space\n  * @param {object} audioState\n  * @returns {Promise<audioState>}\n  */\n  putAudioState(space, audioState = {}) {\n    return this.webex.internal.lyra.device.putAudioState(space, audioState);\n  },\n\n  /**\n  * Mutes paired device\n  * similar to device.mute()\n  * @returns {Promise<audioState>}\n  */\n  mute() {\n    if (!this._pairedDevice) {\n      this.logger.error('DeviceManager#mute: Currently no device is paired');\n\n      return Promise.reject(new Error('DeviceManager#mute: Currently no device is paired'));\n    }\n\n    return this.webex.internal.lyra.device.mute(this._pairedDevice);\n  },\n\n  /**\n  * Unmutes paired device\n  * similar to device.unmute()\n  * @returns {Promise<audioState>}\n  */\n  unmute() {\n    if (!this._pairedDevice) {\n      this.logger.error('DeviceManager#unmute: Currently no device is paired');\n\n      return Promise.reject(new Error('DeviceManager#unmute: Currently no device is paired'));\n    }\n\n    return this.webex.internal.lyra.device.unmute(this._pairedDevice);\n  },\n\n  /**\n  * Increases paired device's volume\n  * similar to device.increaseVolume()\n  * @returns {Promise<audioState>}\n  */\n  increaseVolume() {\n    if (!this._pairedDevice) {\n      this.logger.error('DeviceManager#increaseVolume: Currently no device is paired');\n\n      return Promise.reject(new Error('DeviceManager#increaseVolume: Currently no device is paired'));\n    }\n\n    return this.webex.internal.lyra.device.increaseVolume(this._pairedDevice);\n  },\n\n  /**\n  * Decreases paired device's volume\n  * similar to device.decreaseVolume()\n  * @returns {Promise<audioState>}\n  */\n  decreaseVolume() {\n    if (!this._pairedDevice) {\n      this.logger.error('DeviceManager#decreaseVolume: Currently no device is paired');\n\n      return Promise.reject(new Error('DeviceManager#decreaseVolume: Currently no device is paired'));\n    }\n\n    return this.webex.internal.lyra.device.decreaseVolume(this._pairedDevice);\n  },\n\n  /**\n  * Sets paired device's volume but should use increase and decrease api instead\n  * similar to device.setVolume()\n  * @param {number} level\n  * @returns {Promise<audioState>}\n  */\n  setVolume(level = 0) {\n    if (!this._pairedDevice) {\n      this.logger.error('DeviceManager#setVolume: Currently no device is paired');\n\n      return Promise.reject(new Error('DeviceManager#setVolume: Currently no device is paired'));\n    }\n\n    return this.webex.internal.lyra.device.setVolume(this._pairedDevice, level);\n  },\n\n  /**\n  * Utility function to update decrypted device name on device object\n  * @param {Array} deviceArray\n  * @returns {device}\n  */\n  _updateDeviceMetadata(deviceArray = []) {\n    if (!deviceArray.length) {\n      return Promise.resolve(deviceArray);\n    }\n    const devices = cloneDeep(deviceArray);\n\n    return Promise.all(devices.map(\n      (device, index) => this.webex.internal.services.waitForCatalog('postauth')\n        .then(() => {\n          if (device.deviceClass === UC_CLOUD) {\n            device.id = `${this.webex.internal.services.get('wdm')}/${device.id}`;\n          }\n\n          return this._decryptDeviceName(device);\n        })\n        .then((updatedDevice) => {\n          devices[index] = updatedDevice;\n\n          return Promise.resolve();\n        })\n    ))\n      .then(() => Promise.resolve(devices));\n  },\n\n  /**\n  * Utility function to update decrypted device name on device object\n  * @param {object} inDevice\n  * @returns {device}\n  */\n  _decryptDeviceName(inDevice = {}) {\n    const device = cloneDeep(inDevice);\n\n    if (device.metadata &&\n      device.metadata.encryptedUserAssignedName &&\n      device.metadata.encryptionKeyUrl) {\n      return this.webex.internal.encryption.decryptText(\n        device.metadata.encryptionKeyUrl, device.metadata.encryptedUserAssignedName\n      )\n        .then((decryptedDeviceName) => {\n          // set userAssignedName as the decypted value, unset encryptedUserAssignedName since it's not needed\n          device.metadata.encryptedUserAssignedName = undefined;\n          device.metadata.userAssignedName = decryptedDeviceName;\n\n          return Promise.resolve(device);\n        })\n        .catch((err) => {\n          // unset encryptedUserAssignedName if failed to decrypt\n          device.metadata.encryptedUserAssignedName = undefined;\n          this.logger.error('DeviceCollection#_decryptDeviceName: failed to decrypt device name', err);\n        });\n    }\n\n    return Promise.resolve(device);\n  },\n\n  /**\n  * Utility function to update device info on mercury updates\n  * @param {object} device\n  * @returns {device}\n  */\n  _receiveDeviceUpdates(device) {\n    // we care only the updates are for the registered devices\n    if (device && device.spaceUrl) {\n      const deviceId = device.spaceUrl.substring(device.spaceUrl.lastIndexOf('/') + 1);\n      const existingDevice = DeviceCollection.get(deviceId);\n\n      if (existingDevice) {\n        return this.webex.internal.lyra.space.get({id: deviceId})\n          .then((space) => {\n            const device = DeviceCollection.get(deviceId);\n\n            if (device &&\n              space.occupants &&\n              (!space.occupants.self || !space.occupants.self.verified)) {\n              device.productName = space.devices && space.devices[0] && space.devices[0].productName ||\n              DEFAULT_PRODUCT_NAME;\n              // pin challenge is not verified reset _pairedDevice if ids\n              // match\n              const pairedDeviceId = this._pairedDevice && (this._pairedDevice.id || this._pairedDevice.identity.id);\n\n              if (pairedDeviceId === deviceId) {\n                this._pairedDevice = null;\n                this.logger.info(`DeviceManager#_receiveDeviceUpdates: device ${deviceId} lost pairing`);\n\n                return Promise.resolve();\n              }\n              // we do not want to reset the device pending PIN challenge\n              if (this._devicePendingPinChallenge.identity.id !== deviceId) {\n                return this.upsert(device);\n              }\n\n              return Promise.resolve();\n            }\n\n            return Promise.resolve();\n          })\n          .catch((err) => {\n            this.logger.error('DeviceManager#_receiveDeviceUpdates: failed to receive updates for Lyra space', err);\n          });\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n\n});\n\nexport default DeviceManager;\n"],"mappings":"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"}