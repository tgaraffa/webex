{"version":3,"names":["Interceptor","attrs","forEach","key","value","enumerable","options","logger","console","process","env","ENABLE_VERBOSE_NETWORK_LOGGING","info","constructor","name","resolve","reason","reject","response","Error"],"sources":["interceptor.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\n\n/**\n * @class\n */\nexport default class Interceptor {\n  /**\n   * @constructor\n   * @param {Object} attrs\n   * @returns {UrlInterceptor}\n   */\n  constructor(attrs) {\n    if (attrs) {\n      Object.keys(attrs).forEach((key) => {\n        const value = attrs[key];\n\n        Reflect.defineProperty(this, key, {\n          enumerable: true,\n          value\n        });\n      });\n    }\n  }\n\n  /**\n   * Logs the options of a request. This should be utilized\n   * during the intercepting process, but can be used at any\n   * time otherwise.\n   * @param {object} options\n   * @returns {void}\n   */\n  logOptions(options = {}) {\n    const logger = get(this, 'webex.logger', console);\n\n    if (!process.env.ENABLE_VERBOSE_NETWORK_LOGGING || !logger) {\n      return;\n    }\n\n    // prepend a header for the interceptor\n    logger.info('/***** Interceptor ****************************************************\\\\');\n\n    logger.info(\n      `${this.constructor.name} - ${JSON.stringify(options, null, 2)}`\n    );\n  }\n\n  /**\n   * @abstract\n   * @returns {Interceptor}\n   */\n  static create() {\n    throw new Error('`Interceptor.create()` must be defined');\n  }\n\n  /**\n   * Transform request options before sending them\n   * @param {Object} options\n   * @returns {Promise<Object>}\n   */\n  onRequest(options) {\n    return Promise.resolve(options);\n  }\n\n  /**\n   * Handle request failures\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {RejectedPromise<Error>}\n   */\n  onRequestError(options, reason) {\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Transform response before returning it\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Promise<HttpResponse>}\n   */\n  onResponse(options, response) {\n    return Promise.resolve(response);\n  }\n\n  /**\n   * Handle response errors\n   * @param {Object} options\n   * @param {WebexHttpError} reason\n   * @returns {Promise<WebexHttpError>}\n   */\n  onResponseError(options, reason) {\n    return Promise.reject(reason);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;IACqBA,W;EACnB;AACF;AACA;AACA;AACA;EACE,qBAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACjB,IAAIA,KAAJ,EAAW;MACT,mBAAYA,KAAZ,EAAmBC,OAAnB,CAA2B,UAACC,GAAD,EAAS;QAClC,IAAMC,KAAK,GAAGH,KAAK,CAACE,GAAD,CAAnB;QAEA,6BAAuB,KAAvB,EAA6BA,GAA7B,EAAkC;UAChCE,UAAU,EAAE,IADoB;UAEhCD,KAAK,EAALA;QAFgC,CAAlC;MAID,CAPD;IAQD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,sBAAyB;MAAA,IAAdE,OAAc,uEAAJ,EAAI;MACvB,IAAMC,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;MAEA,IAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,8BAAb,IAA+C,CAACJ,MAApD,EAA4D;QAC1D;MACD,CALsB,CAOvB;;;MACAA,MAAM,CAACK,IAAP,CAAY,2EAAZ;MAEAL,MAAM,CAACK,IAAP,WACK,KAAKC,WAAL,CAAiBC,IADtB,gBACgC,wBAAeR,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CADhC;IAGD;IAED;AACF;AACA;AACA;;;;;IAKE;AACF;AACA;AACA;AACA;IACE,mBAAUA,OAAV,EAAmB;MACjB,OAAO,iBAAQS,OAAR,CAAgBT,OAAhB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,OAAf,EAAwBU,MAAxB,EAAgC;MAC9B,OAAO,iBAAQC,MAAR,CAAeD,MAAf,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAWV,OAAX,EAAoBY,QAApB,EAA8B;MAC5B,OAAO,iBAAQH,OAAR,CAAgBG,QAAhB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,yBAAgBZ,OAAhB,EAAyBU,MAAzB,EAAiC;MAC/B,OAAO,iBAAQC,MAAR,CAAeD,MAAf,CAAP;IACD;;;WAzCD,kBAAgB;MACd,MAAM,IAAIG,KAAJ,CAAU,wCAAV,CAAN;IACD"}