{"version":3,"names":["protorequest","defaultOptions","options","uri","arguments","forEach","prop","descriptor","enumerable","writable","json","logger","console","_request","interceptors","HttpStatusInterceptor","create","defaults","request"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {assign, curry, defaults as lodashDefaults, isString} from 'lodash';\n\nimport HttpStatusInterceptor from './interceptors/http-status';\nimport _request from './request';\n\n// Curry protorequest so we generate a function with default options built in.\nconst protorequest = curry(function protorequest(defaultOptions, options) {\n  // allow for options to be a string (and therefore expect options in the third\n  // position) to match request's api.\n  if (isString(options)) {\n    const uri = options;\n\n    /* eslint prefer-rest-params: [0] */\n    options = arguments[2] || {};\n    options.uri = uri;\n  }\n\n  // Hide useless elements from logs\n  [\n    'download',\n    'interceptors',\n    'logger',\n    'upload'\n  ].forEach((prop) => {\n    let descriptor = Reflect.getOwnPropertyDescriptor(options, prop);\n\n    descriptor = assign({}, descriptor, {\n      enumerable: false,\n      writable: true\n    });\n    Reflect.defineProperty(options, prop, descriptor);\n  });\n\n  lodashDefaults(options, defaultOptions);\n\n  if (!options.json && options.json !== false) {\n    Reflect.deleteProperty(options, 'json');\n  }\n\n  options.logger = options.logger || this.logger || console;\n\n  return _request(options);\n});\n\nconst defaultOptions = {\n  json: true,\n  interceptors: [\n    // Reminder: this is supposed to be an instantiated interceptor.\n    HttpStatusInterceptor.create()\n  ]\n};\n\nexport const defaults = protorequest;\nexport const request = protorequest(defaultOptions);\nexport {default as ProgressEvent} from './progress-event';\nexport {default as Interceptor} from './lib/interceptor';\nexport {default as HttpError} from './http-error';\nexport {default as HttpStatusInterceptor} from './interceptors/http-status';\nexport {default as detect} from './lib/detect';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;AACA;;AAmDA;;AACA;;AACA;;AAEA;;AArDA;AACA,IAAMA,YAAY,GAAG,qBAAM,SAASA,YAAT,CAAsBC,cAAtB,EAAsCC,OAAtC,EAA+C;EACxE;EACA;EACA,IAAI,wBAASA,OAAT,CAAJ,EAAuB;IACrB,IAAMC,GAAG,GAAGD,OAAZ;IAEA;;IACAA,OAAO,GAAGE,SAAS,CAAC,CAAD,CAAT,IAAgB,EAA1B;IACAF,OAAO,CAACC,GAAR,GAAcA,GAAd;EACD,CATuE,CAWxE;;;EACA,CACE,UADF,EAEE,cAFF,EAGE,QAHF,EAIE,QAJF,EAKEE,OALF,CAKU,UAACC,IAAD,EAAU;IAClB,IAAIC,UAAU,GAAG,uCAAiCL,OAAjC,EAA0CI,IAA1C,CAAjB;IAEAC,UAAU,GAAG,sBAAO,EAAP,EAAWA,UAAX,EAAuB;MAClCC,UAAU,EAAE,KADsB;MAElCC,QAAQ,EAAE;IAFwB,CAAvB,CAAb;IAIA,6BAAuBP,OAAvB,EAAgCI,IAAhC,EAAsCC,UAAtC;EACD,CAbD;EAeA,wBAAeL,OAAf,EAAwBD,cAAxB;;EAEA,IAAI,CAACC,OAAO,CAACQ,IAAT,IAAiBR,OAAO,CAACQ,IAAR,KAAiB,KAAtC,EAA6C;IAC3C,6BAAuBR,OAAvB,EAAgC,MAAhC;EACD;;EAEDA,OAAO,CAACS,MAAR,GAAiBT,OAAO,CAACS,MAAR,IAAkB,KAAKA,MAAvB,IAAiCC,OAAlD;EAEA,OAAO,IAAAC,iBAAA,EAASX,OAAT,CAAP;AACD,CApCoB,CAArB;AAsCA,IAAMD,cAAc,GAAG;EACrBS,IAAI,EAAE,IADe;EAErBI,YAAY,EAAE,CACZ;EACAC,mBAAA,CAAsBC,MAAtB,EAFY;AAFO,CAAvB;AAQO,IAAMC,QAAQ,GAAGjB,YAAjB;;AACA,IAAMkB,OAAO,GAAGlB,YAAY,CAACC,cAAD,CAA5B"}