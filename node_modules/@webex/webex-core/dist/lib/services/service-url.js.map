{"version":3,"names":["ServiceUrl","AmpState","extend","namespace","props","defaultUrl","undefined","hosts","name","_generateHostUrl","hostUri","url","Url","parse","host","port","format","_getHostUrls","map","priority","_getPriorityHostUrl","clusterId","length","filteredHosts","filter","id","homeCluster","aliveHosts","failed","reduce","previous","current","failHost","hostname","foundHost","find","hostObj","get","priorityHost"],"sources":["service-url.js"],"sourcesContent":["import Url from 'url';\n\nimport AmpState from 'ampersand-state';\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst ServiceUrl = AmpState.extend({\n  namespace: 'ServiceUrl',\n\n  props: {\n    defaultUrl: ['string', true, undefined],\n    hosts: ['array', false, () => ([])],\n    name: ['string', true, undefined]\n  },\n\n  /**\n   * Generate a host url based on the host\n   * uri provided.\n   * @param {string} hostUri\n   * @returns {string}\n   */\n  _generateHostUrl(hostUri) {\n    const url = Url.parse(this.defaultUrl);\n\n    // setting url.hostname will not apply during Url.format(), set host via\n    // a string literal instead.\n    url.host = `${hostUri}${url.port ? `:${url.port}` : ''}`;\n\n    return Url.format(url);\n  },\n\n  /**\n   * Generate a list of urls based on this\n   * `ServiceUrl`'s known hosts.\n   * @returns {string[]}\n   */\n  _getHostUrls() {\n    return this.hosts.map((host) => ({\n      url: this._generateHostUrl(host.host),\n      priority: host.priority\n    }));\n  },\n\n  /**\n   * Get the current host url with the highest priority. If a clusterId is not\n   * provided, this will only return a URL with a filtered host that has the\n   * `homeCluster` value set to `true`.\n   *\n   * @param {string} [clusterId] - The clusterId to filter for a priority host.\n   * @returns {string} - The priority host url.\n   */\n  _getPriorityHostUrl(clusterId) {\n    if (this.hosts.length === 0) {\n      return this.defaultUrl;\n    }\n\n    let filteredHosts = clusterId ?\n      this.hosts.filter((host) => host.id === clusterId) :\n      this.hosts.filter((host) => host.homeCluster);\n\n    const aliveHosts = filteredHosts.filter(\n      (host) => !host.failed\n    );\n\n    filteredHosts = (aliveHosts.length === 0) ?\n      filteredHosts.map(\n        (host) => {\n          /* eslint-disable-next-line no-param-reassign */\n          host.failed = false;\n\n          return host;\n        }\n      ) : aliveHosts;\n\n    return this._generateHostUrl(filteredHosts.reduce((previous, current) => (\n      (previous.priority > current.priority || !previous.homeCluster) ?\n        current : previous\n    ), {}).host);\n  },\n\n  /**\n   * Attempt to mark a host from this `ServiceUrl` as failed and return true\n   * if the provided url has a host that could be successfully marked as failed.\n   *\n   * @param {string} url\n   * @returns {boolean}\n   */\n  failHost(url) {\n    if (url === this.defaultUrl) {\n      return true;\n    }\n\n    const {hostname} = Url.parse(url);\n    const foundHost = this.hosts.find((hostObj) => hostObj.host === hostname);\n\n    if (foundHost) {\n      foundHost.failed = true;\n    }\n\n    return (foundHost !== undefined);\n  },\n\n  /**\n   * Get the current `defaultUrl` or generate a url using the host with the\n   * highest priority via host rendering.\n   *\n   * @param {boolean} [priorityHost] - Retrieve the priority host.\n   * @param {string} [clusterId] - Cluster to match a host against.\n   * @returns {string} - The full service url.\n   */\n  get(priorityHost, clusterId) {\n    if (!priorityHost) {\n      return this.defaultUrl;\n    }\n\n    return this._getPriorityHostUrl(clusterId);\n  }\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default ServiceUrl;\n"],"mappings":"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"}