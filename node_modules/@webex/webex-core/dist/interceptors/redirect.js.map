{"version":3,"names":["requestHeaderName","responseHeaderName","LOCUS_REDIRECT_ERROR","RedirectInterceptor","options","uri","includes","webex","config","credentials","samlUrl","tokenUrl","authorizeUrl","headers","$redirectCount","response","maxAppLevelRedirects","reject","Error","request","body","errorCode","location","logger","warn","qs","newUrl","split","maxLocusRedirects","Interceptor"],"sources":["redirect.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {clone} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\n\nconst requestHeaderName = 'cisco-no-http-redirect';\nconst responseHeaderName = 'cisco-location';\nconst LOCUS_REDIRECT_ERROR = 2000002;\n\n/**\n * @class\n */\nexport default class RedirectInterceptor extends Interceptor {\n  /**\n   * @returns {RedirectInterceptor}\n   */\n  static create() {\n    return new RedirectInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    if (options && options.uri && typeof options.uri === 'string') {\n      if (options.uri.includes('https://idbroker') ||\n        options.uri.includes(this.webex.config.credentials.samlUrl) ||\n        options.uri.includes(this.webex.config.credentials.tokenUrl) ||\n        options.uri.includes(this.webex.config.credentials.authorizeUrl)) {\n        return options;\n      }\n    }\n\n    // If cisco-no-http-redirect is already set, don't overwrite it\n    if (requestHeaderName in options.headers) {\n      // If cisco-no-http-redirect is set to null, false, or undefined, delete\n      // it to prevent a CORS preflight.\n      if (!options.headers[requestHeaderName]) {\n        Reflect.deleteProperty(options.headers, requestHeaderName);\n      }\n\n      return options;\n    }\n    options.headers[requestHeaderName] = true;\n    options.$redirectCount = options.$redirectCount || 0;\n\n    return options;\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    /* eslint-disable no-else-return */\n    if (response.headers && response.headers[responseHeaderName]) {\n      options = clone(options);\n      options.uri = response.headers[responseHeaderName];\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.webex.config.maxAppLevelRedirects) {\n        return Promise.reject(new Error('Maximum redirects exceeded'));\n      }\n\n      return this.webex.request(options);\n    }\n    else if (response.headers &&\n      response.body &&\n      response.body.errorCode === LOCUS_REDIRECT_ERROR &&\n      response.body.location) {\n      options = clone(options);\n\n      this.webex.logger.warn('redirect: url redirects needed from', options.uri);\n      if (response.options && response.options.qs) { // for POST requests\n        const newUrl = response.body.location.split('?');\n\n        options.uri = newUrl[0]; // params are already present in the qs\n      }\n      else { // for GET requests\n        options.uri = response.body.location;\n      }\n\n      this.webex.logger.warn('redirect: url redirects needed to', options.uri);\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.webex.config.maxLocusRedirects) {\n        return Promise.reject(new Error('Maximum redirects exceeded'));\n      }\n\n      return this.webex.request(options);\n    }\n    /* eslint-enable no-else-return */\n\n    return response;\n  }\n}\n"],"mappings":"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"}