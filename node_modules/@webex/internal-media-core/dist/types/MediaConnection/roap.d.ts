import 'webrtc-adapter';
import EventEmitter from './EventEmitter';
import { RoapEvents, RoapMessage } from './eventTypes';
declare type MUNGED_LOCAL_SDP = {
    sdp: string;
};
declare type CreateLocalOfferCallback = () => Promise<MUNGED_LOCAL_SDP>;
declare type HandleRemoteOfferCallback = (sdp?: string) => Promise<{
    sdp: string;
}>;
declare type HandleRemoteAnswerCallback = (sdp?: string) => Promise<void>;
export declare class Roap extends EventEmitter<RoapEvents> {
    private id?;
    private createLocalOfferCallback;
    private handleRemoteOfferCallback;
    private handleRemoteAnswerCallback;
    private stateMachine;
    private initiateOfferPromises;
    constructor(createLocalOfferCallback: CreateLocalOfferCallback, handleRemoteOfferCallback: HandleRemoteOfferCallback, handleRemoteAnswerCallback: HandleRemoteAnswerCallback, debugId?: string, initialSeq?: number);
    private log;
    private error;
    private sendRoapOfferMessage;
    private sendRoapOfferResponseMessage;
    private sendRoapOkMessage;
    private sendRoapAnswerMessage;
    private sendDoneEvent;
    private sendStartedEvent;
    private sendErrorMessage;
    getStateMachine(): any;
    initiateOffer(): Promise<void>;
    private resolvePendingInitiateOfferPromises;
    private rejectPendingInitiateOfferPromises;
    private validateIncomingRoapMessage;
    roapMessageReceived(roapMessage: RoapMessage): void;
    stop(): void;
    getSeq(): any;
}
export {};
//# sourceMappingURL=roap.d.ts.map