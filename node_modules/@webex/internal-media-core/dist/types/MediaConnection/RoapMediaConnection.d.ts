import EventEmitter from './EventEmitter';
import { LocalTracks, ReceiveOptions, TransceiverStats } from './MediaConnection';
import { AllEvents, ConnectionState, RoapMessage } from './eventTypes';
import { MediaConnectionConfig } from './config';
export declare class RoapMediaConnection extends EventEmitter<AllEvents> {
    private id;
    private debugId?;
    private mediaConnection;
    private roap;
    private sdpNegotiationStarted;
    constructor(mediaConnectionConfig: MediaConnectionConfig, options: {
        send: LocalTracks;
        receive: ReceiveOptions;
    }, debugId?: string);
    private log;
    private error;
    private createMediaConnection;
    private createRoap;
    initiateOffer(): Promise<void>;
    close(): void;
    private closeMediaConnection;
    private stopRoapSession;
    reconnect(initiateOffer?: boolean): Promise<void>;
    updateSendOptions(tracks: LocalTracks): Promise<void>;
    updateReceiveOptions(options: ReceiveOptions): Promise<void>;
    updateSendReceiveOptions(options: {
        send: LocalTracks;
        receive: ReceiveOptions;
    }): Promise<void>;
    getConnectionState(): ConnectionState;
    getStats(): Promise<RTCStatsReport>;
    getTransceiverStats(): Promise<TransceiverStats>;
    insertDTMF(tones: string, duration?: number, interToneGap?: number): void;
    roapMessageReceived(roapMessage: RoapMessage): void;
    private onRemoteTrack;
    private onConnectionStateChanged;
    private onDtmfToneChanged;
    private createLocalOffer;
    private handleRemoteOffer;
    private handleRemoteAnswer;
}
//# sourceMappingURL=RoapMediaConnection.d.ts.map