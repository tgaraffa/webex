import EventEmitter from './EventEmitter';
import { ConnectionState, MediaConnectionEvents } from './eventTypes';
import { MediaConnectionConfig } from './config';
export interface LocalTracks {
    audio?: MediaStreamTrack | null;
    video?: MediaStreamTrack | null;
    screenShareVideo?: MediaStreamTrack | null;
}
export interface ReceiveOptions {
    audio: boolean;
    video: boolean;
    screenShareVideo: boolean;
}
export interface TransceiverStats {
    audio: {
        localTrackLabel?: string;
        currentDirection?: RTCRtpTransceiverDirection;
        sender: RTCStatsReport;
        receiver: RTCStatsReport;
    };
    video: {
        localTrackLabel?: string;
        currentDirection?: RTCRtpTransceiverDirection;
        sender: RTCStatsReport;
        receiver: RTCStatsReport;
    };
    screenShareVideo: {
        localTrackLabel?: string;
        currentDirection?: RTCRtpTransceiverDirection;
        sender: RTCStatsReport;
        receiver: RTCStatsReport;
    };
}
export declare class MediaConnection extends EventEmitter<MediaConnectionEvents> {
    private id?;
    private config;
    private pc;
    private localTracks;
    private transceivers;
    private receiveOptions;
    private mediaConnectionState;
    private lastEmittedMediaConnectionState?;
    constructor(mediaConnectionConfig: MediaConnectionConfig, options: {
        send: LocalTracks;
        receive: ReceiveOptions;
    }, debugId?: string);
    private log;
    private error;
    private createTransceivers;
    initializeTransceivers(incomingOffer: boolean): void;
    close(): void;
    getConfig(): MediaConnectionConfig;
    getSendReceiveOptions(): {
        send: LocalTracks;
        receive: ReceiveOptions;
    };
    private updateTransceivers;
    updateSendOptions(tracks: LocalTracks): boolean;
    updateReceiveOptions(options: ReceiveOptions): boolean;
    updateSendReceiveOptions(options: {
        send: LocalTracks;
        receive: ReceiveOptions;
    }): boolean;
    getConnectionState(): ConnectionState;
    getStats(): Promise<RTCStatsReport>;
    getTransceiverStats(): Promise<TransceiverStats>;
    insertDTMF(tones: string, duration?: number, interToneGap?: number): void;
    private setupTransceiverListeners;
    private onToneChange;
    private identifyTransceivers;
    private onTrack;
    private addLocalTracks;
    private onConnectionStateChange;
    private onIceConnectionStateChange;
    private evaluateMediaConnectionState;
    createLocalOffer(): Promise<{
        sdp: string;
    }>;
    handleRemoteOffer(sdp?: string): Promise<{
        sdp: string;
    }>;
    handleRemoteAnswer(sdp?: string): Promise<void>;
    private waitForIceCandidates;
}
//# sourceMappingURL=MediaConnection.d.ts.map