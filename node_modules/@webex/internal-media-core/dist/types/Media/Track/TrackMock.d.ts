interface FakeMediaTrackEvent {
    target: {
        [key: string]: unknown;
    };
}
export declare const fakeAudioTracks: {
    id: string;
    kind: string;
    readyState: string;
    muted: boolean;
    label: string;
    groupId: string;
    onmute: (event: FakeMediaTrackEvent) => FakeMediaTrackEvent;
    enabled: boolean;
}[];
export declare const fakeVideoTracks: {
    id: string;
    kind: string;
    readyState: string;
    muted: boolean;
    label: string;
    groupId: string;
    onmute: (event: FakeMediaTrackEvent) => FakeMediaTrackEvent;
    enabled: boolean;
}[];
interface ConstraintsInterface {
    audio: {
        deviceId: {
            exact: string;
        };
    };
    video: {
        deviceId: {
            exact: string;
        };
    };
}
export declare const setupMediaTrackMocks: () => void;
export declare const setupEmptyMediaTrackMocks: () => void;
export declare const resetMediaTrackMocks: () => void;
export declare const getFakeTrackBasedOnDevice: (constraints: ConstraintsInterface) => Promise<{
    getAudioTracks: () => {
        id: string;
        kind: string;
        readyState: string;
        muted: boolean;
        label: string;
        groupId: string;
        onmute: (event: FakeMediaTrackEvent) => FakeMediaTrackEvent;
        enabled: boolean;
    }[];
    getVideoTracks: () => {
        id: string;
        kind: string;
        readyState: string;
        muted: boolean;
        label: string;
        groupId: string;
        onmute: (event: FakeMediaTrackEvent) => FakeMediaTrackEvent;
        enabled: boolean;
    }[];
}>;
export {};
//# sourceMappingURL=TrackMock.d.ts.map