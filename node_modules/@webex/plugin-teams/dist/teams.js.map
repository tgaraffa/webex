{"version":3,"names":["Teams","WebexPlugin","extend","create","team","request","method","service","resource","body","then","res","get","options","id","qs","items","list","Page","webex","update"],"sources":["teams.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\n\n/**\n * @typedef {Object} TeamObject\n * @property {string} id - (server generated) Unique identifier for the team\n * @property {string} name - The name of the team\n * @property {isoDate} created - (server generated) The date and time that the\n * team was created\n */\n\n/**\n* @class\n */\nconst Teams = WebexPlugin.extend({\n  /**\n   * Create a new team.\n   * @instance\n   * @param {TeamObject} team\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * webex.teams.create({name: 'Create Team Example'})\n   *   .then(function(team) {\n   *     var assert = require('assert');\n   *     assert(team.id);\n   *     assert(team.name);\n   *     assert(team.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(team) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'teams',\n      body: team\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single team\n   * @instance\n   * @param {TeamObject|string} team\n   * @param {Object} options\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * var team;\n   * webex.teams.create({name: 'Get Team Example'})\n   *   .then(function(r) {\n   *     team = r;\n   *     return webex.teams.get(team.id);\n   *   })\n   *   .then(function(team2) {\n   *     var assert = require('assert');\n   *     assert.equal(team2.id, team.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(team, options) {\n    const id = team.id || team;\n\n    return this.request({\n      service: 'hydra',\n      resource: `teams/${id}`,\n      qs: options\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * List teams.\n   * @instance\n   * @param {object} options\n   * @param {object} options.max Limit the maximum number of teams in the\n   * response.\n   * @returns {Promise<Page<TeamObject>>}\n   * @memberof Teams\n   * @example\n   * var createdRooms;\n   * Promise.all([\n   *   webex.teams.create({name: 'List Teams Example 1'}),\n   *   webex.teams.create({name: 'List Teams Example 2'}),\n   *   webex.teams.create({name: 'List Teams Example 3'})\n   * ])\n   *   .then(function(r) {\n   *     createdRooms = r;\n   *     return webex.teams.list({max: 3});\n   *   })\n   *   .then(function(teams) {\n   *     var assert = require('assert');\n   *     assert(teams.length === 3);\n   *     for (var i = 0; i < teams.items.length; i+= 1) {\n   *       assert(createdRooms.filter(function(room) {\n   *         return room.id === teams.items[i].id;\n   *       }).length === 1);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'teams/',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Update a team.\n   * @instance\n   * @param {TeamObject} team\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * var teams;\n   * webex.teams.create({name: 'Update Team Example'})\n   *   .then(function(r) {\n   *     teams = r;\n   *     teams.name = 'Teams Example (Updated Title)';\n   *     return webex.teams.update(teams);\n   *   })\n   *   .then(function() {\n   *     return webex.teams.get(teams.id);\n   *   })\n   *   .then(function(teams) {\n   *     var assert = require('assert');\n   *     assert.equal(teams.name, 'Teams Example (Updated Title)');\n   *     return 'success';\n   *   });\n   *   // => success\n\n   */\n  update(team) {\n    const {id} = team;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `teams/${id}`,\n      body: team\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Teams;\n"],"mappings":";;;;;;;;;;AAIA;;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAMA,KAAK,GAAGC,sBAAA,CAAYC,MAAZ,CAAmB;EAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAlB+B,kBAkBxBC,IAlBwB,EAkBlB;IACX,OAAO,KAAKC,OAAL,CAAa;MAClBC,MAAM,EAAE,MADU;MAElBC,OAAO,EAAE,OAFS;MAGlBC,QAAQ,EAAE,OAHQ;MAIlBC,IAAI,EAAEL;IAJY,CAAb,EAMJM,IANI,CAMC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACF,IAAb;IAAA,CAND,CAAP;EAOD,CA1B8B;;EA4B/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,GAjD+B,eAiD3BR,IAjD2B,EAiDrBS,OAjDqB,EAiDZ;IACjB,IAAMC,EAAE,GAAGV,IAAI,CAACU,EAAL,IAAWV,IAAtB;IAEA,OAAO,KAAKC,OAAL,CAAa;MAClBE,OAAO,EAAE,OADS;MAElBC,QAAQ,kBAAWM,EAAX,CAFU;MAGlBC,EAAE,EAAEF;IAHc,CAAb,EAKJH,IALI,CAKC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACF,IAAJ,CAASO,KAAT,IAAkBL,GAAG,CAACF,IAA/B;IAAA,CALD,CAAP;EAMD,CA1D8B;;EA4D/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,IA3F+B,gBA2F1BJ,OA3F0B,EA2FjB;IAAA;;IACZ,OAAO,KAAKR,OAAL,CAAa;MAClBE,OAAO,EAAE,OADS;MAElBC,QAAQ,EAAE,QAFQ;MAGlBO,EAAE,EAAEF;IAHc,CAAb,EAKJH,IALI,CAKC,UAACC,GAAD;MAAA,OAAS,IAAIO,eAAJ,CAASP,GAAT,EAAc,KAAI,CAACQ,KAAnB,CAAT;IAAA,CALD,CAAP;EAMD,CAlG8B;;EAoG/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEEC,MA7H+B,kBA6HxBhB,IA7HwB,EA6HlB;IACX,IAAOU,EAAP,GAAaV,IAAb,CAAOU,EAAP;IAEA,OAAO,KAAKT,OAAL,CAAa;MAClBC,MAAM,EAAE,KADU;MAElBC,OAAO,EAAE,OAFS;MAGlBC,QAAQ,kBAAWM,EAAX,CAHU;MAIlBL,IAAI,EAAEL;IAJY,CAAb,EAMJM,IANI,CAMC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACF,IAAb;IAAA,CAND,CAAP;EAOD,CAvI8B;EAAA;AAAA,CAAnB,CAAd;;eA0IeT,K"}