"use strict";

var _typeof = require("@babel/runtime-corejs2/helpers/typeof");

var _WeakMap = require("@babel/runtime-corejs2/core-js/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

_Object$defineProperty(exports, "DeviceUrlInterceptor", {
  enumerable: true,
  get: function get() {
    return _deviceUrl.default;
  }
});

_Object$defineProperty(exports, "FeatureCollection", {
  enumerable: true,
  get: function get() {
    return _index.FeatureCollection;
  }
});

_Object$defineProperty(exports, "FeatureModel", {
  enumerable: true,
  get: function get() {
    return _index.FeatureModel;
  }
});

_Object$defineProperty(exports, "FeaturesModel", {
  enumerable: true,
  get: function get() {
    return _index.FeaturesModel;
  }
});

_Object$defineProperty(exports, "config", {
  enumerable: true,
  get: function get() {
    return _config.default;
  }
});

exports.constants = void 0;

_Object$defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _device.default;
  }
});

require("@webex/internal-plugin-metrics");

var _webexCore = require("@webex/webex-core");

var _device = _interopRequireDefault(require("./device"));

var _index = require("./features/index");

var _deviceUrl = _interopRequireDefault(require("./interceptors/device-url"));

var constants = _interopRequireWildcard(require("./constants"));

exports.constants = constants;

var _config = _interopRequireDefault(require("./config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Internal dependencies.
// Need to import metrics plugin for the devices to send metrics on succes/failure registration
// Plugin dependencies.
(0, _webexCore.registerInternalPlugin)('device', _device.default, {
  config: _config.default,
  interceptors: {
    DeviceUrlInterceptor: _deviceUrl.default.create
  },

  /**
   * Unregister the device in the case that the webex instance has logged out.
   *
   * @returns {Promise<undefined>}
   */
  onBeforeLogout: function onBeforeLogout() {
    return this.unregister();
  }
});
//# sourceMappingURL=index.js.map
