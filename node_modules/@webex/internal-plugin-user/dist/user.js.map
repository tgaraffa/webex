{"version":3,"names":["User","WebexPlugin","extend","waitForValue","oneFlight","keyFactory","email","options","String","create","persist","deprecated","namespace","children","batcher","UserUUIDBatcher","props","hasPassword","default","type","session","store","UserUUIDStore","activate","verificationToken","confirmationCode","id","reject","Error","scope","webex","config","credentials","activateOptions","request","uri","activationUrl","method","body","auth","user","client_id","pass","client_secret","sendImmediately","then","res","set","supertoken","tokenData","asUUID","all","map","u","_extractUUID","force","patterns","uuid","test","resolve","_extractEmailAddress","getUUID","fetchUUID","recordUUID","emailAddress","generateOTP","generateOtpUrl","get","service","resource","tap","getByEmail","userExists","catch","initialize","args","prototype","add","register","verify","_setUser","getUserToken","token","setPasswordUrl","internal","device","userId","headers","authorization","toString","setPassword","password","schemas","updateName","givenName","familyName","displayName","name","update","validateOTP","oneTimePassword","validateOtpUrl","verifyDefaults","services","collectPreauthCatalog","getClientToken","preloginId","shouldRefreshAccessToken","sso","getUserCI","lookupCI","verifyOptions","suppressEmail","userEntities","idBrokerUrl","idbroker","url","identityUrl","identity","entryUUID","entryEmail"],"sources":["user.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {isArray} from 'lodash';\nimport {deprecated, oneFlight, patterns, tap} from '@webex/common';\nimport {persist, WebexPlugin, waitForValue} from '@webex/webex-core';\n\nimport UserUUIDBatcher from './user-uuid-batcher';\nimport UserUUIDStore from './user-uuid-store';\n\n/**\n * @class\n */\nconst User = WebexPlugin.extend({\n  namespace: 'User',\n\n  children: {\n    batcher: UserUUIDBatcher\n  },\n\n  props: {\n    /**\n     * Indicates if the current user is known to have a password.\n     * @instance\n     * @memberof User\n     * @type {boolean}\n     */\n    hasPassword: {\n      default: false,\n      type: 'boolean'\n    }\n  },\n\n  session: {\n    store: {\n      default() {\n        return new UserUUIDStore();\n      },\n      type: 'any'\n    }\n  },\n\n  @waitForValue('@')\n  /**\n   * Activates a Webex user account and exchanges for user token.\n   * @instance\n   * @memberof User\n   * @param {Object} options\n   * @param {Object} options.confirmationCode (required -- optional if verification token is provided)\n   * @param {Object} options.id (required -- optional if verification token is provided)\n   * @param {Object} options.verificationToken (required -- optional if uuid and verification token provided)\n   * @param {Object} options.email (required with verificationToken for Federation/global user)\n   * @returns {Promise} Resolves with a userSession\n   */\n  activate(options = {}) {\n    if (!(options.verificationToken || (options.confirmationCode && options.id))) {\n      return Promise.reject(new Error('either options.verificationToken is required or both options.confirmationCode and options.id are required'));\n    }\n\n    options.scope = this.webex.config.credentials.scope;\n\n    // if we have options.email and options.verificationToken\n    // and Federation flag is enabled, flag that we need to\n    // lookup user's CI.\n    const activateOptions = Object.assign({}, options);\n\n    delete activateOptions.email;\n\n    return this.request({\n      uri: this.webex.config.credentials.activationUrl,\n      method: 'POST',\n      body: activateOptions,\n      auth: {\n        user: this.webex.config.credentials.client_id,\n        pass: this.webex.config.credentials.client_secret,\n        sendImmediately: true\n      }\n    })\n      .then((res) => {\n        this.webex.credentials.set({supertoken: res.body.tokenData});\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Converts a user-identifying object to a uuid, perhaps by doing a network\n   * lookup\n   * @param {string|Object} user\n   * @param {Object} options\n   * @param {boolean} options.create if true, ensures the return UUID refers to\n   * an existing user (rather than creating one deterministically based on email\n   * address), even if that user must be created\n   * @returns {Promise<string>}\n   */\n  asUUID(user, options) {\n    if (!user) {\n      return Promise.reject(new Error('`user` is required'));\n    }\n\n    if (isArray(user)) {\n      return Promise.all(user.map((u) => this.asUUID(u, options)));\n    }\n\n    const id = this._extractUUID(user);\n\n    if (!(options && options.force) && patterns.uuid.test(id)) {\n      return Promise.resolve(id);\n    }\n\n    const email = this._extractEmailAddress(user);\n\n    if (!patterns.email.test(email)) {\n      return Promise.reject(new Error('Provided user object does not appear to identify a user'));\n    }\n\n    return this.getUUID(email, options);\n  },\n\n  /**\n   * Requests a uuid from the api\n   * @param {string} email\n   * @param {Object} options\n   * @param {boolean} options.create\n   * @returns {Promise<string>}\n   */\n  fetchUUID(email, options) {\n    return this.batcher.request({\n      email,\n      create: options && options.create\n    })\n      .then((user) => this.recordUUID(Object.assign({emailAddress: email}, user))\n        .then(() => user.id));\n  },\n  /**\n   * Generates One Time Password.\n   * @instance\n   * @param {Object} options\n   * @param {string} options.email\n   * @param {string} options.id\n   * @returns {Promise}\n   */\n  generateOTP(options = {}) {\n    if (!(options.email || options.id)) {\n      return Promise.reject(new Error('One of `options.email` or `options.id` is required'));\n    }\n\n    return this.request({\n      uri: this.webex.config.credentials.generateOtpUrl,\n      method: 'POST',\n      body: options,\n      auth: {\n        user: this.webex.config.credentials.client_id,\n        pass: this.webex.config.credentials.client_secret\n      }\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Fetches details about the current user\n   * @returns {Promise<Object>}\n   */\n  get() {\n    return this.request({\n      service: 'conversation',\n      resource: 'users'\n    })\n      .then((res) => res.body)\n      .then(tap((user) => this.recordUUID({\n        id: user.id,\n        // CI endpoints don't use the same user format as actors, so, email may\n        // be in one of a few fields\n        emailAddress: user.email || user.emailAddress\n      })));\n  },\n\n  /**\n   * Converts an email address to a uuid, perhaps by doing a network lookup\n   * @param {string} email\n   * @param {Object} options\n   * @param {boolean} options.create\n   * @returns {Promise<string>}\n   */\n  @oneFlight({keyFactory: (email, options) => email + String(options && options.create)})\n  getUUID(email, options) {\n    return this.store.getByEmail(email)\n      .then((user) => {\n        if (options && options.create && !user.userExists) {\n          return Promise.reject(new Error('User for specified email cannot be confirmed to exist'));\n        }\n\n        if (!user.id) {\n          return Promise.reject(new Error('No id recorded for specified user'));\n        }\n\n        return user.id;\n      })\n      .catch(() => this.fetchUUID(email, options));\n  },\n\n  @persist('@')\n  initialize(...args) {\n    return Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Caches the uuid for the specified email address\n   * @param {Object} user\n   * @param {string} user.id\n   * @param {string} user.emailAddress\n   * @returns {Promise}\n   */\n  recordUUID(user) {\n    if (!user) {\n      return Promise.reject(new Error('`user` is required'));\n    }\n\n    if (!user.id) {\n      return Promise.reject(new Error('`user.id` is required'));\n    }\n\n    if (!patterns.uuid.test(user.id)) {\n      return Promise.reject(new Error('`user.id` must be a uuid'));\n    }\n\n    if (!user.emailAddress) {\n      return Promise.reject(new Error('`user.emailAddress` is required'));\n    }\n\n    if (!patterns.email.test(user.emailAddress)) {\n      return Promise.reject(new Error('`user.emailAddress` must be an email address'));\n    }\n\n    return this.store.add(user);\n  },\n\n  @deprecated('Use User#verify()')\n  register(...args) {\n    return this.verify(...args);\n  },\n\n  /**\n   * Updates a user with webex.\n   * @param {Object} body\n   * @private\n   * @returns {Promise} Resolves with a response from PATCH request\n   */\n  _setUser(body) {\n    return this.webex.credentials.getUserToken()\n      .then((token) => this.request({\n        uri: `${this.webex.config.credentials.setPasswordUrl}/${this.webex.internal.device.userId}`,\n        method: 'PATCH',\n        headers: {\n          authorization: token.toString()\n        },\n        body\n      }));\n  },\n\n  /**\n   * Updates a user's password with webex.\n   * @instance\n   * @memberof User\n   * @param {Object} options\n   * @param {string} options.password (required)\n   * @param {string} options.email (required when federation enabled)\n   * @returns {Promise} Resolves with complete user object containing new password\n   */\n  setPassword(options) {\n    options = options || {};\n    if (!options.password) {\n      return Promise.reject(new Error('`options.password` is required'));\n    }\n\n    return this._setUser({\n      schemas: ['urn:scim:schemas:core:1.0', 'urn:scim:schemas:extension:cisco:commonidentity:1.0'],\n      password: options.password\n    })\n      .then((res) => {\n        this.hasPassword = true;\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Updates a user's name with webex.\n   * @instance\n   * @memberof User\n   * @param {string} givenName\n   * @param {string} familyName\n   * @param {string} displayName\n   * @returns {Promise<Object>}\n   */\n  updateName({givenName, familyName, displayName} = {}) {\n    if (!(givenName || familyName || displayName)) {\n      return Promise.reject(new Error('One of `givenName` and `familyName` or `displayName` is required'));\n    }\n\n    return this._setUser({\n      schemas: ['urn:scim:schemas:core:1.0', 'urn:scim:schemas:extension:cisco:commonidentity:1.0'],\n      name: {givenName, familyName},\n      displayName\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates the current user's display name\n   * @param {Object} options\n   * @param {string} options.displayName\n   * @returns {Promise<Object>}\n   */\n  update(options) {\n    options = options || {};\n    if (!options.displayName) {\n      return Promise.reject(new Error('`options.displayName` is required'));\n    }\n\n    return this.request({\n      method: 'PATCH',\n      service: 'conversation',\n      resource: 'users/user',\n      body: options\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Validated One Time Password.\n   * @instance\n   * @param {Object} options\n   * @param {string} options.email\n   * @param {string} options.id\n   * @param {string} options.oneTimePassword\n   * @returns {Promise}\n   */\n  validateOTP(options = {}) {\n    if (!(options.email || options.id) || !options.oneTimePassword) {\n      return Promise.reject(new Error('One of `options.email` or `options.id` and `options.oneTimePassword` are required'));\n    }\n\n    options.scope = this.webex.config.credentials.scope;\n\n    return this.request({\n      uri: this.webex.config.credentials.validateOtpUrl,\n      method: 'POST',\n      body: options,\n      auth: {\n        user: this.webex.config.credentials.client_id,\n        pass: this.webex.config.credentials.client_secret\n      }\n    })\n      .then((res) => {\n        this.webex.credentials.set({supertoken: res.body.tokenData});\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Determines if the specified user needs to signup or can signin.\n   * Triggers activation email if client credentials are used\n   * @param {Object} options\n   * @param {string} options.email (required)\n   * @param {string} options.reqId required if need to check email status\n   * @param {string} options.preloginId\n   * @returns {Promise<Object>}\n   */\n  verify(options) {\n    options = Object.assign({}, this.config.verifyDefaults, options);\n    const {email} = options;\n\n    if (!email) {\n      return Promise.reject(new Error('`options.email` is required'));\n    }\n\n    return this.webex.internal.services.collectPreauthCatalog({email})\n      .then(() => this.webex.credentials.getUserToken())\n      .catch(() => this.webex.credentials.getClientToken())\n      .then((token) => this.request({\n        service: 'atlas',\n        resource: 'users/activations',\n        method: 'POST',\n        headers: {\n          authorization: token.toString(),\n          'x-prelogin-userid': options.preloginId\n        },\n        body: options,\n        shouldRefreshAccessToken: false\n      }))\n      .then((res) => {\n        if (res.body.hasPassword || res.body.sso) {\n          this.hasPassword = true;\n        }\n\n        return res.body;\n      });\n  },\n\n\n  /**\n   * If the passed-in lookupCI is true, retrieve the user's\n   * CI from Atlas and return the URL's via a Promise.\n   * Otherwise, return current CI in config via a Promise.\n   * Useful in a Promise chain to retrieve the CI based on\n   * conditions like Federation enabled, and suppresses sending\n   * an additional email to the user, since this is just a\n   * look-up.\n   * @param {string} email (required)\n   * @param {boolean} lookupCI (required)\n   * @returns {Promise<Object>}\n   */\n  getUserCI(email, lookupCI) {\n    if (lookupCI) {\n      // call verify first to get the user's CI, but suppress sending another email\n      const verifyOptions = {\n        email,\n        suppressEmail: true\n      };\n\n      return this.verify(verifyOptions).then((res) => Promise.resolve(res.userEntities));\n    }\n\n    return Promise.resolve(\n      {\n        idBrokerUrl: this.webex.config.credentials.idbroker.url,\n        identityUrl: this.webex.config.credentials.identity.url\n      }\n    );\n  },\n\n  /**\n   * Extracts the uuid from a user identifying object\n   * @param {string|Object} user\n   * @private\n   * @returns {string}\n   */\n  _extractUUID(user) {\n    return user.entryUUID || user.id || user;\n  },\n\n  /**\n   * Extracts the email address from a user identifying object\n   * @param {string|Object} user\n   * @private\n   * @returns {string}\n   */\n  _extractEmailAddress(user) {\n    return user.email || user.emailAddress || user.entryEmail || user;\n  }\n\n});\n\nexport default User;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AACA;;AAEA;;AACA;;;;AAEA;AACA;AACA;AACA,IAAMA,IAAI,GAAGC,sBAAA,CAAYC,MAAZ,SA6BV,IAAAC,uBAAA,EAAa,GAAb,CA7BU,UA2KV,IAAAC,iBAAA,EAAU;EAACC,UAAU,EAAE,oBAACC,KAAD,EAAQC,OAAR;IAAA,OAAoBD,KAAK,GAAGE,MAAM,CAACD,OAAO,IAAIA,OAAO,CAACE,MAApB,CAAlC;EAAA;AAAb,CAAV,CA3KU,UA4LV,IAAAC,kBAAA,EAAQ,GAAR,CA5LU,UAgOV,IAAAC,kBAAA,EAAW,mBAAX,CAhOU,UAAmB;EAC9BC,SAAS,EAAE,MADmB;EAG9BC,QAAQ,EAAE;IACRC,OAAO,EAAEC;EADD,CAHoB;EAO9BC,KAAK,EAAE;IACL;AACJ;AACA;AACA;AACA;AACA;IACIC,WAAW,EAAE;MACXC,OAAO,EAAE,KADE;MAEXC,IAAI,EAAE;IAFK;EAPR,CAPuB;EAoB9BC,OAAO,EAAE;IACPC,KAAK,EAAE;MACLH,OADK,sBACK;QACR,OAAO,IAAII,sBAAJ,EAAP;MACD,CAHI;MAILH,IAAI,EAAE;IAJD;EADA,CApBqB;;EA8B9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,QAzC8B,sBAyCP;IAAA;;IAAA,IAAdhB,OAAc,uEAAJ,EAAI;;IACrB,IAAI,EAAEA,OAAO,CAACiB,iBAAR,IAA8BjB,OAAO,CAACkB,gBAAR,IAA4BlB,OAAO,CAACmB,EAApE,CAAJ,EAA8E;MAC5E,OAAO,iBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,2GAAV,CAAf,CAAP;IACD;;IAEDrB,OAAO,CAACsB,KAAR,GAAgB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BH,KAA9C,CALqB,CAOrB;IACA;IACA;;IACA,IAAMI,eAAe,GAAG,qBAAc,EAAd,EAAkB1B,OAAlB,CAAxB;IAEA,OAAO0B,eAAe,CAAC3B,KAAvB;IAEA,OAAO,KAAK4B,OAAL,CAAa;MAClBC,GAAG,EAAE,KAAKL,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BI,aADjB;MAElBC,MAAM,EAAE,MAFU;MAGlBC,IAAI,EAAEL,eAHY;MAIlBM,IAAI,EAAE;QACJC,IAAI,EAAE,KAAKV,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BS,SADhC;QAEJC,IAAI,EAAE,KAAKZ,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BW,aAFhC;QAGJC,eAAe,EAAE;MAHb;IAJY,CAAb,EAUJC,IAVI,CAUC,UAACC,GAAD,EAAS;MACb,KAAI,CAAChB,KAAL,CAAWE,WAAX,CAAuBe,GAAvB,CAA2B;QAACC,UAAU,EAAEF,GAAG,CAACR,IAAJ,CAASW;MAAtB,CAA3B;;MAEA,OAAOH,GAAG,CAACR,IAAX;IACD,CAdI,CAAP;EAeD,CAtE6B;;EAwE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEY,MAlF8B,kBAkFvBV,IAlFuB,EAkFjBjC,OAlFiB,EAkFR;IAAA;;IACpB,IAAI,CAACiC,IAAL,EAAW;MACT,OAAO,iBAAQb,MAAR,CAAe,IAAIC,KAAJ,CAAU,oBAAV,CAAf,CAAP;IACD;;IAED,IAAI,uBAAQY,IAAR,CAAJ,EAAmB;MACjB,OAAO,iBAAQW,GAAR,CAAYX,IAAI,CAACY,GAAL,CAAS,UAACC,CAAD;QAAA,OAAO,MAAI,CAACH,MAAL,CAAYG,CAAZ,EAAe9C,OAAf,CAAP;MAAA,CAAT,CAAZ,CAAP;IACD;;IAED,IAAMmB,EAAE,GAAG,KAAK4B,YAAL,CAAkBd,IAAlB,CAAX;;IAEA,IAAI,EAAEjC,OAAO,IAAIA,OAAO,CAACgD,KAArB,KAA+BC,gBAAA,CAASC,IAAT,CAAcC,IAAd,CAAmBhC,EAAnB,CAAnC,EAA2D;MACzD,OAAO,iBAAQiC,OAAR,CAAgBjC,EAAhB,CAAP;IACD;;IAED,IAAMpB,KAAK,GAAG,KAAKsD,oBAAL,CAA0BpB,IAA1B,CAAd;;IAEA,IAAI,CAACgB,gBAAA,CAASlD,KAAT,CAAeoD,IAAf,CAAoBpD,KAApB,CAAL,EAAiC;MAC/B,OAAO,iBAAQqB,MAAR,CAAe,IAAIC,KAAJ,CAAU,yDAAV,CAAf,CAAP;IACD;;IAED,OAAO,KAAKiC,OAAL,CAAavD,KAAb,EAAoBC,OAApB,CAAP;EACD,CAxG6B;;EA0G9B;AACF;AACA;AACA;AACA;AACA;AACA;EACEuD,SAjH8B,qBAiHpBxD,KAjHoB,EAiHbC,OAjHa,EAiHJ;IAAA;;IACxB,OAAO,KAAKO,OAAL,CAAaoB,OAAb,CAAqB;MAC1B5B,KAAK,EAALA,KAD0B;MAE1BG,MAAM,EAAEF,OAAO,IAAIA,OAAO,CAACE;IAFD,CAArB,EAIJoC,IAJI,CAIC,UAACL,IAAD;MAAA,OAAU,MAAI,CAACuB,UAAL,CAAgB,qBAAc;QAACC,YAAY,EAAE1D;MAAf,CAAd,EAAqCkC,IAArC,CAAhB,EACbK,IADa,CACR;QAAA,OAAML,IAAI,CAACd,EAAX;MAAA,CADQ,CAAV;IAAA,CAJD,CAAP;EAMD,CAxH6B;;EAyH9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEuC,WAjI8B,yBAiIJ;IAAA,IAAd1D,OAAc,uEAAJ,EAAI;;IACxB,IAAI,EAAEA,OAAO,CAACD,KAAR,IAAiBC,OAAO,CAACmB,EAA3B,CAAJ,EAAoC;MAClC,OAAO,iBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,oDAAV,CAAf,CAAP;IACD;;IAED,OAAO,KAAKM,OAAL,CAAa;MAClBC,GAAG,EAAE,KAAKL,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BkC,cADjB;MAElB7B,MAAM,EAAE,MAFU;MAGlBC,IAAI,EAAE/B,OAHY;MAIlBgC,IAAI,EAAE;QACJC,IAAI,EAAE,KAAKV,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BS,SADhC;QAEJC,IAAI,EAAE,KAAKZ,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BW;MAFhC;IAJY,CAAb,EASJE,IATI,CASC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACR,IAAb;IAAA,CATD,CAAP;EAUD,CAhJ6B;;EAkJ9B;AACF;AACA;AACA;EACE6B,GAtJ8B,iBAsJxB;IAAA;;IACJ,OAAO,KAAKjC,OAAL,CAAa;MAClBkC,OAAO,EAAE,cADS;MAElBC,QAAQ,EAAE;IAFQ,CAAb,EAIJxB,IAJI,CAIC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACR,IAAb;IAAA,CAJD,EAKJO,IALI,CAKC,IAAAyB,WAAA,EAAI,UAAC9B,IAAD;MAAA,OAAU,MAAI,CAACuB,UAAL,CAAgB;QAClCrC,EAAE,EAAEc,IAAI,CAACd,EADyB;QAElC;QACA;QACAsC,YAAY,EAAExB,IAAI,CAAClC,KAAL,IAAckC,IAAI,CAACwB;MAJC,CAAhB,CAAV;IAAA,CAAJ,CALD,CAAP;EAWD,CAlK6B;EA4K9BH,OA5K8B,mBA4KtBvD,KA5KsB,EA4KfC,OA5Ke,EA4KN;IAAA;;IACtB,OAAO,KAAKc,KAAL,CAAWkD,UAAX,CAAsBjE,KAAtB,EACJuC,IADI,CACC,UAACL,IAAD,EAAU;MACd,IAAIjC,OAAO,IAAIA,OAAO,CAACE,MAAnB,IAA6B,CAAC+B,IAAI,CAACgC,UAAvC,EAAmD;QACjD,OAAO,iBAAQ7C,MAAR,CAAe,IAAIC,KAAJ,CAAU,uDAAV,CAAf,CAAP;MACD;;MAED,IAAI,CAACY,IAAI,CAACd,EAAV,EAAc;QACZ,OAAO,iBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,mCAAV,CAAf,CAAP;MACD;;MAED,OAAOY,IAAI,CAACd,EAAZ;IACD,CAXI,EAYJ+C,KAZI,CAYE;MAAA,OAAM,MAAI,CAACX,SAAL,CAAexD,KAAf,EAAsBC,OAAtB,CAAN;IAAA,CAZF,CAAP;EAaD,CA1L6B;EA6L9BmE,UA7L8B,wBA6LV;IAAA,kCAANC,IAAM;MAANA,IAAM;IAAA;;IAClB,OAAO,oBAAc1E,sBAAA,CAAY2E,SAAZ,CAAsBF,UAApC,EAAgD,IAAhD,EAAsDC,IAAtD,CAAP;EACD,CA/L6B;;EAiM9B;AACF;AACA;AACA;AACA;AACA;AACA;EACEZ,UAxM8B,sBAwMnBvB,IAxMmB,EAwMb;IACf,IAAI,CAACA,IAAL,EAAW;MACT,OAAO,iBAAQb,MAAR,CAAe,IAAIC,KAAJ,CAAU,oBAAV,CAAf,CAAP;IACD;;IAED,IAAI,CAACY,IAAI,CAACd,EAAV,EAAc;MACZ,OAAO,iBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,uBAAV,CAAf,CAAP;IACD;;IAED,IAAI,CAAC4B,gBAAA,CAASC,IAAT,CAAcC,IAAd,CAAmBlB,IAAI,CAACd,EAAxB,CAAL,EAAkC;MAChC,OAAO,iBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,0BAAV,CAAf,CAAP;IACD;;IAED,IAAI,CAACY,IAAI,CAACwB,YAAV,EAAwB;MACtB,OAAO,iBAAQrC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iCAAV,CAAf,CAAP;IACD;;IAED,IAAI,CAAC4B,gBAAA,CAASlD,KAAT,CAAeoD,IAAf,CAAoBlB,IAAI,CAACwB,YAAzB,CAAL,EAA6C;MAC3C,OAAO,iBAAQrC,MAAR,CAAe,IAAIC,KAAJ,CAAU,8CAAV,CAAf,CAAP;IACD;;IAED,OAAO,KAAKP,KAAL,CAAWwD,GAAX,CAAerC,IAAf,CAAP;EACD,CA9N6B;EAiO9BsC,QAjO8B,sBAiOZ;IAChB,OAAO,KAAKC,MAAL,uBAAP;EACD,CAnO6B;;EAqO9B;AACF;AACA;AACA;AACA;AACA;EACEC,QA3O8B,oBA2OrB1C,IA3OqB,EA2Of;IAAA;;IACb,OAAO,KAAKR,KAAL,CAAWE,WAAX,CAAuBiD,YAAvB,GACJpC,IADI,CACC,UAACqC,KAAD;MAAA,OAAW,MAAI,CAAChD,OAAL,CAAa;QAC5BC,GAAG,YAAK,MAAI,CAACL,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BmD,cAAnC,cAAqD,MAAI,CAACrD,KAAL,CAAWsD,QAAX,CAAoBC,MAApB,CAA2BC,MAAhF,CADyB;QAE5BjD,MAAM,EAAE,OAFoB;QAG5BkD,OAAO,EAAE;UACPC,aAAa,EAAEN,KAAK,CAACO,QAAN;QADR,CAHmB;QAM5BnD,IAAI,EAAJA;MAN4B,CAAb,CAAX;IAAA,CADD,CAAP;EASD,CArP6B;;EAuP9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoD,WAhQ8B,uBAgQlBnF,OAhQkB,EAgQT;IAAA;;IACnBA,OAAO,GAAGA,OAAO,IAAI,EAArB;;IACA,IAAI,CAACA,OAAO,CAACoF,QAAb,EAAuB;MACrB,OAAO,iBAAQhE,MAAR,CAAe,IAAIC,KAAJ,CAAU,gCAAV,CAAf,CAAP;IACD;;IAED,OAAO,KAAKoD,QAAL,CAAc;MACnBY,OAAO,EAAE,CAAC,2BAAD,EAA8B,qDAA9B,CADU;MAEnBD,QAAQ,EAAEpF,OAAO,CAACoF;IAFC,CAAd,EAIJ9C,IAJI,CAIC,UAACC,GAAD,EAAS;MACb,MAAI,CAAC7B,WAAL,GAAmB,IAAnB;MAEA,OAAO6B,GAAG,CAACR,IAAX;IACD,CARI,CAAP;EASD,CA/Q6B;;EAiR9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEuD,UA1R8B,wBA0RwB;IAAA,+EAAJ,EAAI;IAAA,IAA1CC,SAA0C,QAA1CA,SAA0C;IAAA,IAA/BC,UAA+B,QAA/BA,UAA+B;IAAA,IAAnBC,WAAmB,QAAnBA,WAAmB;;IACpD,IAAI,EAAEF,SAAS,IAAIC,UAAb,IAA2BC,WAA7B,CAAJ,EAA+C;MAC7C,OAAO,iBAAQrE,MAAR,CAAe,IAAIC,KAAJ,CAAU,kEAAV,CAAf,CAAP;IACD;;IAED,OAAO,KAAKoD,QAAL,CAAc;MACnBY,OAAO,EAAE,CAAC,2BAAD,EAA8B,qDAA9B,CADU;MAEnBK,IAAI,EAAE;QAACH,SAAS,EAATA,SAAD;QAAYC,UAAU,EAAVA;MAAZ,CAFa;MAGnBC,WAAW,EAAXA;IAHmB,CAAd,EAKJnD,IALI,CAKC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACR,IAAb;IAAA,CALD,CAAP;EAMD,CArS6B;;EAuS9B;AACF;AACA;AACA;AACA;AACA;EACE4D,MA7S8B,kBA6SvB3F,OA7SuB,EA6Sd;IACdA,OAAO,GAAGA,OAAO,IAAI,EAArB;;IACA,IAAI,CAACA,OAAO,CAACyF,WAAb,EAA0B;MACxB,OAAO,iBAAQrE,MAAR,CAAe,IAAIC,KAAJ,CAAU,mCAAV,CAAf,CAAP;IACD;;IAED,OAAO,KAAKM,OAAL,CAAa;MAClBG,MAAM,EAAE,OADU;MAElB+B,OAAO,EAAE,cAFS;MAGlBC,QAAQ,EAAE,YAHQ;MAIlB/B,IAAI,EAAE/B;IAJY,CAAb,EAMJsC,IANI,CAMC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACR,IAAb;IAAA,CAND,CAAP;EAOD,CA1T6B;;EA4T9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE6D,WArU8B,yBAqUJ;IAAA;;IAAA,IAAd5F,OAAc,uEAAJ,EAAI;;IACxB,IAAI,EAAEA,OAAO,CAACD,KAAR,IAAiBC,OAAO,CAACmB,EAA3B,KAAkC,CAACnB,OAAO,CAAC6F,eAA/C,EAAgE;MAC9D,OAAO,iBAAQzE,MAAR,CAAe,IAAIC,KAAJ,CAAU,mFAAV,CAAf,CAAP;IACD;;IAEDrB,OAAO,CAACsB,KAAR,GAAgB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BH,KAA9C;IAEA,OAAO,KAAKK,OAAL,CAAa;MAClBC,GAAG,EAAE,KAAKL,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BqE,cADjB;MAElBhE,MAAM,EAAE,MAFU;MAGlBC,IAAI,EAAE/B,OAHY;MAIlBgC,IAAI,EAAE;QACJC,IAAI,EAAE,KAAKV,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BS,SADhC;QAEJC,IAAI,EAAE,KAAKZ,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BW;MAFhC;IAJY,CAAb,EASJE,IATI,CASC,UAACC,GAAD,EAAS;MACb,MAAI,CAAChB,KAAL,CAAWE,WAAX,CAAuBe,GAAvB,CAA2B;QAACC,UAAU,EAAEF,GAAG,CAACR,IAAJ,CAASW;MAAtB,CAA3B;;MAEA,OAAOH,GAAG,CAACR,IAAX;IACD,CAbI,CAAP;EAcD,CA1V6B;;EA4V9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyC,MArW8B,kBAqWvBxE,OArWuB,EAqWd;IAAA;;IACdA,OAAO,GAAG,qBAAc,EAAd,EAAkB,KAAKwB,MAAL,CAAYuE,cAA9B,EAA8C/F,OAA9C,CAAV;IACA,eAAgBA,OAAhB;IAAA,IAAOD,KAAP,YAAOA,KAAP;;IAEA,IAAI,CAACA,KAAL,EAAY;MACV,OAAO,iBAAQqB,MAAR,CAAe,IAAIC,KAAJ,CAAU,6BAAV,CAAf,CAAP;IACD;;IAED,OAAO,KAAKE,KAAL,CAAWsD,QAAX,CAAoBmB,QAApB,CAA6BC,qBAA7B,CAAmD;MAAClG,KAAK,EAALA;IAAD,CAAnD,EACJuC,IADI,CACC;MAAA,OAAM,MAAI,CAACf,KAAL,CAAWE,WAAX,CAAuBiD,YAAvB,EAAN;IAAA,CADD,EAEJR,KAFI,CAEE;MAAA,OAAM,MAAI,CAAC3C,KAAL,CAAWE,WAAX,CAAuByE,cAAvB,EAAN;IAAA,CAFF,EAGJ5D,IAHI,CAGC,UAACqC,KAAD;MAAA,OAAW,MAAI,CAAChD,OAAL,CAAa;QAC5BkC,OAAO,EAAE,OADmB;QAE5BC,QAAQ,EAAE,mBAFkB;QAG5BhC,MAAM,EAAE,MAHoB;QAI5BkD,OAAO,EAAE;UACPC,aAAa,EAAEN,KAAK,CAACO,QAAN,EADR;UAEP,qBAAqBlF,OAAO,CAACmG;QAFtB,CAJmB;QAQ5BpE,IAAI,EAAE/B,OARsB;QAS5BoG,wBAAwB,EAAE;MATE,CAAb,CAAX;IAAA,CAHD,EAcJ9D,IAdI,CAcC,UAACC,GAAD,EAAS;MACb,IAAIA,GAAG,CAACR,IAAJ,CAASrB,WAAT,IAAwB6B,GAAG,CAACR,IAAJ,CAASsE,GAArC,EAA0C;QACxC,MAAI,CAAC3F,WAAL,GAAmB,IAAnB;MACD;;MAED,OAAO6B,GAAG,CAACR,IAAX;IACD,CApBI,CAAP;EAqBD,CAlY6B;;EAqY9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEuE,SAjZ8B,qBAiZpBvG,KAjZoB,EAiZbwG,QAjZa,EAiZH;IACzB,IAAIA,QAAJ,EAAc;MACZ;MACA,IAAMC,aAAa,GAAG;QACpBzG,KAAK,EAALA,KADoB;QAEpB0G,aAAa,EAAE;MAFK,CAAtB;MAKA,OAAO,KAAKjC,MAAL,CAAYgC,aAAZ,EAA2BlE,IAA3B,CAAgC,UAACC,GAAD;QAAA,OAAS,iBAAQa,OAAR,CAAgBb,GAAG,CAACmE,YAApB,CAAT;MAAA,CAAhC,CAAP;IACD;;IAED,OAAO,iBAAQtD,OAAR,CACL;MACEuD,WAAW,EAAE,KAAKpF,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BmF,QAA9B,CAAuCC,GADtD;MAEEC,WAAW,EAAE,KAAKvF,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BsF,QAA9B,CAAuCF;IAFtD,CADK,CAAP;EAMD,CAla6B;;EAoa9B;AACF;AACA;AACA;AACA;AACA;EACE9D,YA1a8B,wBA0ajBd,IA1aiB,EA0aX;IACjB,OAAOA,IAAI,CAAC+E,SAAL,IAAkB/E,IAAI,CAACd,EAAvB,IAA6Bc,IAApC;EACD,CA5a6B;;EA8a9B;AACF;AACA;AACA;AACA;AACA;EACEoB,oBApb8B,gCAobTpB,IApbS,EAobH;IACzB,OAAOA,IAAI,CAAClC,KAAL,IAAckC,IAAI,CAACwB,YAAnB,IAAmCxB,IAAI,CAACgF,UAAxC,IAAsDhF,IAA7D;EACD,CAtb6B;EAAA;AAAA,CAAnB,4hBAAb;;gBA0bexC,I"}