
import {assert} from '@webex/test-helper-chai';
import sinon from 'sinon';
import ReachabilityRequest from '@webex/plugin-meetings/src/reachability/request';

describe('ReachabilityRequest', () => {
  let webex;
  let reachabilityRequest;

  const VIDEO_MESH_NODE_0 = '111-222-333-some-vmn';
  const VIDEO_MESH_NODE_1 = '444-555-666-some-vmn';

  const CLOUD_NODE_0 = 'some-public-node-1.somewhere';
  const CLOUD_NODE_1 = 'some-public-node-2.somewhere';

  const vmnClusterUrls = [{
    tcp: ['some vmn node 0 tcp url', 'another vmn node 0 tcp url'],
    udp: ['some vmn node 0 udp url', 'another vmn node 0 udp url']
  }, {
    tcp: ['some vmn node 1 tcp url', 'another vmn node 1 tcp url'],
    udp: ['some vmn node 1 udp url', 'another vmn node 1 udp url']
  }
  ];

  const cloudClusterUrls = [{
    tcp: ['some public node 0 tcp url', 'another public node 0 tcp url'],
    udp: ['some public node 0 udp url', 'another public node 0 udp url']
  }, {
    tcp: ['some public node 1 tcp url', 'another public node 1 tcp url'],
    udp: ['some public node 1 udp url', 'another public node 1 udp url']
  }
  ];

  beforeEach(() => {
    webex = {
      request: sinon.stub()
    };
    reachabilityRequest = new ReachabilityRequest(webex);
  });

  describe('getClusters', () => {
    beforeEach(() => {
      webex.request = sinon.fake.resolves({
        body: {
          clusterClasses: {
            ocpCloud: [],
            publicCloud: [],
            hybridMedia: [VIDEO_MESH_NODE_0, VIDEO_MESH_NODE_1]
          },
          clusters: {
            [VIDEO_MESH_NODE_0]: vmnClusterUrls[0],
            [VIDEO_MESH_NODE_1]: vmnClusterUrls[1],
            [CLOUD_NODE_0]: cloudClusterUrls[0],
            [CLOUD_NODE_1]: cloudClusterUrls[1],
          }
        }
      });
    });

    it('marks video mesh clusters correctly', async () => {
      const clusters = await reachabilityRequest.getClusters(false);

      assert.deepEqual(clusters, {
        [VIDEO_MESH_NODE_0]: {
          ...vmnClusterUrls[0],
          isVideoMesh: true,
        },
        [VIDEO_MESH_NODE_1]: {
          ...vmnClusterUrls[1],
          isVideoMesh: true,
        },
        [CLOUD_NODE_0]: {
          ...cloudClusterUrls[0],
          isVideoMesh: false,
        },
        [CLOUD_NODE_1]: {
          ...cloudClusterUrls[1],
          isVideoMesh: false,
        },
      });
    });
  });
});

