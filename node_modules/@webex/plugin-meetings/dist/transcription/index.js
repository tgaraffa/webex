"use strict";

var _Array$from = require("@babel/runtime-corejs2/core-js/array/from");

var _Symbol = require("@babel/runtime-corejs2/core-js/symbol");

var _Symbol$iterator = require("@babel/runtime-corejs2/core-js/symbol/iterator");

var _Array$isArray = require("@babel/runtime-corejs2/core-js/array/is-array");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _now = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/date/now"));

var _values = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _uuid = require("uuid");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== "undefined" && o[_Symbol$iterator] || o["@@iterator"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * @description Meeting Webex assistance transcription feature.
 * @exports
 * @class Transcription
 */
var Transcription = /*#__PURE__*/function () {
  /**
   * @param {string} webSocketUrl
   * @param {sessionID} sessionId
   * @param {object} members
   * @constructor
   * @memberof Transcription
   */
  function Transcription(webSocketUrl, sessionId, members) {
    (0, _classCallCheck2.default)(this, Transcription);
    this.webSocketUrl = webSocketUrl;
    this.sessionID = sessionId;
    this.members = members;
    this.memberCSIs = {};
    var params = '?outboundWireFormat=text&bufferStates=true&aliasHttpStatus=true';
    this.webSocket = new WebSocket("".concat(this.webSocketUrl).concat(params));
  }
  /**
   * open the Low Latency Mercury connection
   * An event parameter will be send to the callback.
   *
   * @param {string} token
   * @param {string} sessionID
   * @returns {void}
   */


  (0, _createClass2.default)(Transcription, [{
    key: "connect",
    value: function connect(token) {
      var _this = this;

      this.webSocket.onopen = function () {
        _this.webSocket.send((0, _stringify.default)({
          id: (0, _uuid.v4)(),
          type: 'authorization',
          data: {
            token: "Bearer ".concat(token)
          },
          trackingId: "webex-js-sdk_".concat(_this.sessionID).concat(_now.default.toString())
        }));
      };
    }
    /**
     * Sets callback to invoke when the web socket connection is closed.
     *
     * @param {function} callback
     * @returns {void}
     */

  }, {
    key: "onCloseSocket",
    value: function onCloseSocket(callback) {
      if (callback) {
        this.webSocket.onclose = function (event) {
          callback(event);
        };
      }
    }
    /**
     * Sets callback to invoke when a web socket connection error occurs.
     * An event parameter will be send to the callback.
     *
     * @param {function} callback
     * @returns {void}
     */

  }, {
    key: "onErrorSocket",
    value: function onErrorSocket(callback) {
      if (callback) {
        this.webSocket.onerror = function (event) {
          callback(event);
        };
      }
    }
    /**
     * Get current speaker from the given csis payload and update the global csis map
     *
     * @private
     * @param {object} csis
     * @returns {object}
     */

  }, {
    key: "getSpeaker",
    value: function getSpeaker(csis) {
      var _this2 = this;

      var _iterator = _createForOfIteratorHelper(csis),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var csi = _step.value;
          var member = this.memberCSIs[csi];

          if (member) {
            return member;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return (0, _values.default)(this.members.membersCollection.members).find(function (member) {
        var memberCSIs = member.participant.status.csis;
        var selfIsSpeaking = false;

        var _iterator2 = _createForOfIteratorHelper(csis),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var csi = _step2.value;

            if (memberCSIs.includes(csi)) {
              _this2.memberCSIs[csi] = member;
              selfIsSpeaking = true;
              break;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return selfIsSpeaking;
      });
    }
    /**
     * Sends transcription data to given callback as it arrives.
     *
     * @param {function} callback
     * @returns {void}
     */

  }, {
    key: "subscribe",
    value: function subscribe(callback) {
      var _this3 = this;

      var data, csis, speaker, transcription;

      this.webSocket.onmessage = function (event) {
        var _data$data, _data$data$voiceaPayl, _data$data2, _data$data2$voiceaPay;

        data = JSON.parse(event.data);
        csis = ((_data$data = data.data) === null || _data$data === void 0 ? void 0 : (_data$data$voiceaPayl = _data$data.voiceaPayload) === null || _data$data$voiceaPayl === void 0 ? void 0 : _data$data$voiceaPayl.csis) || [];
        speaker = _this3.getSpeaker(csis);
        transcription = ((_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : (_data$data2$voiceaPay = _data$data2.voiceaPayload) === null || _data$data2$voiceaPay === void 0 ? void 0 : _data$data2$voiceaPay.data) || '';

        _this3.webSocket.send((0, _stringify.default)({
          messageID: data.id,
          type: 'ack'
        }));

        if (transcription) {
          var _data$data3, _data$data3$voiceaPay, _speaker, _data, _data$data4, _data$data4$voiceaPay;

          callback({
            id: (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : (_data$data3$voiceaPay = _data$data3.voiceaPayload) === null || _data$data3$voiceaPay === void 0 ? void 0 : _data$data3$voiceaPay.transcript_id,
            personID: (_speaker = speaker) === null || _speaker === void 0 ? void 0 : _speaker.id,
            transcription: transcription,
            timestamp: data.timestamp,
            type: (_data = data) === null || _data === void 0 ? void 0 : (_data$data4 = _data.data) === null || _data$data4 === void 0 ? void 0 : (_data$data4$voiceaPay = _data$data4.voiceaPayload) === null || _data$data4$voiceaPay === void 0 ? void 0 : _data$data4$voiceaPay.type
          });
        }
      };
    }
    /**
     * Close the LLM web socket connection
     * @returns {void}
     */

  }, {
    key: "closeSocket",
    value: function closeSocket() {
      this.webSocket.close();
    }
  }]);
  return Transcription;
}();

exports.default = Transcription;
//# sourceMappingURL=index.js.map
