{"version":3,"names":["MeetingInfo","webex","meetingInfoRequest","MeetingInfoRequest","meetingInfoCollection","MeetingInfoCollection","id","get","info","set","options","fetchMeetingInfo","then","body","setMeetingInfo","sipMeetingUri","meetingLink","catch","error","LoggerProxy","logger","reject","destination","type","MeetingInfoUtil","generateOptions","_PERSONAL_ROOM_","internal","device","userId","fetchInfoOptions","extractDestination","requestFetchInfo","_MEETING_LINK_","convertLinkToSip","_SIP_URI_"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  _MEETING_LINK_,\n  _SIP_URI_,\n  _PERSONAL_ROOM_\n} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport MeetingInfoCollection from './collection';\nimport MeetingInfoRequest from './request';\nimport MeetingInfoUtil from './util';\n\n/**\n * @class MeetingInfo\n */\nexport default class MeetingInfo {\n  /**\n   *\n   * @param {WebexSDK} webex\n   */\n  constructor(webex) {\n    this.webex = webex;\n\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n    this.meetingInfoRequest = new MeetingInfoRequest(this.webex);\n    /**\n     * The meeting information collection interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n    this.meetingInfoCollection = new MeetingInfoCollection();\n  }\n\n  /**\n   * @param {string} id\n   * @returns {object}\n   * @public\n   * @memberof MeetingInfo\n   */\n  getMeetingInfo(id) {\n    return this.meetingInfoCollection.get(id);\n  }\n\n  /**\n   * @param {string} id\n   * @param {object} info\n   * @returns {null}\n   * @public\n   * @memberof MeetingInfo\n   */\n  setMeetingInfo(id, info) {\n    this.meetingInfoCollection.set(id, info);\n  }\n\n  /**\n   * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject\n   * @param {Object} options\n   * @returns {Promise}\n   * @private\n   * @memberof MeetingInfo\n   */\n  requestFetchInfo(options) {\n    return this.meetingInfoRequest.fetchMeetingInfo(options).then((info) => {\n      if (info && info.body) {\n        this.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);\n      }\n\n      return info;\n    }).catch((error) => {\n      LoggerProxy.logger.error(`Meeting-info:index#requestFetchInfo -->  ${error} fetch meetingInfo`);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Helper to generate the options for the MeetingInfo request\n   * @param {String} destination\n   * @param {String} type\n   * @returns {Promise}\n   * @private\n   * @memberof MeetingInfo\n   */\n  fetchInfoOptions(destination, type) {\n    return MeetingInfoUtil.generateOptions({\n      destination,\n      type,\n      webex: this.webex\n    });\n  }\n\n  /**\n   * Fetches meeting info from the server\n   * @param {String} destination one of many different types of destinations to look up info for\n   * @param {String} [type] to match up with the destination value\n   * @returns {Promise} returns a meeting info object\n   * @public\n   * @memberof MeetingInfo\n   */\n  fetchMeetingInfo(destination, type = null) {\n    if (type === _PERSONAL_ROOM_ && !destination) {\n      destination = this.webex.internal.device.userId;\n    }\n\n    return this.fetchInfoOptions(\n      MeetingInfoUtil.extractDestination(destination, type),\n      type\n    ).then((options) =>\n    // fetch meeting info\n      this.requestFetchInfo(options).catch((error) => {\n      // if it failed the first time as meeting link\n        if (options.type === _MEETING_LINK_) {\n        // convert the meeting link to sip URI and retry\n          return this.requestFetchInfo(this.fetchInfoOptions(MeetingInfoUtil.convertLinkToSip(destination), _SIP_URI_));\n        }\n\n        return Promise.reject(error);\n      }));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAIA;;AAKA;;AAEA;;AACA;;AACA;;AAbA;AACA;AACA;;AAaA;AACA;AACA;IACqBA,W;EACnB;AACF;AACA;AACA;EACE,qBAAYC,KAAZ,EAAmB;IAAA;IACjB,KAAKA,KAAL,GAAaA,KAAb;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,KAAKC,kBAAL,GAA0B,IAAIC,gBAAJ,CAAuB,KAAKF,KAA5B,CAA1B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,KAAKG,qBAAL,GAA6B,IAAIC,mBAAJ,EAA7B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;;;WACE,wBAAeC,EAAf,EAAmB;MACjB,OAAO,KAAKF,qBAAL,CAA2BG,GAA3B,CAA+BD,EAA/B,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,EAAf,EAAmBE,IAAnB,EAAyB;MACvB,KAAKJ,qBAAL,CAA2BK,GAA3B,CAA+BH,EAA/B,EAAmCE,IAAnC;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAAiBE,OAAjB,EAA0B;MAAA;;MACxB,OAAO,KAAKR,kBAAL,CAAwBS,gBAAxB,CAAyCD,OAAzC,EAAkDE,IAAlD,CAAuD,UAACJ,IAAD,EAAU;QACtE,IAAIA,IAAI,IAAIA,IAAI,CAACK,IAAjB,EAAuB;UACrB,KAAI,CAACC,cAAL,CAAoBN,IAAI,CAACK,IAAL,CAAUE,aAAV,IAA2BP,IAAI,CAACK,IAAL,CAAUG,WAAzD,EAAsER,IAAI,CAACK,IAA3E;QACD;;QAED,OAAOL,IAAP;MACD,CANM,EAMJS,KANI,CAME,UAACC,KAAD,EAAW;QAClBC,oBAAA,CAAYC,MAAZ,CAAmBF,KAAnB,oDAAqEA,KAArE;;QAEA,OAAO,iBAAQG,MAAR,CAAeH,KAAf,CAAP;MACD,CAVM,CAAP;IAWD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAAiBI,WAAjB,EAA8BC,IAA9B,EAAoC;MAClC,OAAOC,aAAA,CAAgBC,eAAhB,CAAgC;QACrCH,WAAW,EAAXA,WADqC;QAErCC,IAAI,EAAJA,IAFqC;QAGrCtB,KAAK,EAAE,KAAKA;MAHyB,CAAhC,CAAP;IAKD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAAiBqB,WAAjB,EAA2C;MAAA;;MAAA,IAAbC,IAAa,uEAAN,IAAM;;MACzC,IAAIA,IAAI,KAAKG,0BAAT,IAA4B,CAACJ,WAAjC,EAA8C;QAC5CA,WAAW,GAAG,KAAKrB,KAAL,CAAW0B,QAAX,CAAoBC,MAApB,CAA2BC,MAAzC;MACD;;MAED,OAAO,KAAKC,gBAAL,CACLN,aAAA,CAAgBO,kBAAhB,CAAmCT,WAAnC,EAAgDC,IAAhD,CADK,EAELA,IAFK,EAGLX,IAHK,CAGA,UAACF,OAAD;QAAA,OACP;UACE,MAAI,CAACsB,gBAAL,CAAsBtB,OAAtB,EAA+BO,KAA/B,CAAqC,UAACC,KAAD,EAAW;YAChD;YACE,IAAIR,OAAO,CAACa,IAAR,KAAiBU,yBAArB,EAAqC;cACrC;cACE,OAAO,MAAI,CAACD,gBAAL,CAAsB,MAAI,CAACF,gBAAL,CAAsBN,aAAA,CAAgBU,gBAAhB,CAAiCZ,WAAjC,CAAtB,EAAqEa,oBAArE,CAAtB,CAAP;YACD;;YAED,OAAO,iBAAQd,MAAR,CAAeH,KAAf,CAAP;UACD,CARD;QAFK;MAAA,CAHA,CAAP;IAcD"}