"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _freeze = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/freeze"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _eventsScope = _interopRequireDefault(require("../common/events/events-scope"));

var _constants = require("../constants");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
  * Meeting - network quality event
  * Emitted on each interval of retrieving stats Analyzer data
  * @event network:quality
  * @type {Object}
  * @property {string} mediaType {video|audio}
  * @property {number} networkQualityScore - value determined in determineUplinkNetworkQuality
  * @memberof NetworkQualityMonitor
  */

/**
 * NetworkQualityMonitor class that will emit events based on detected quality
 *
 * @class NetworkQualityMonitor
 * @extends {EventsScope}
 */
var NetworkQualityMonitor = /*#__PURE__*/function (_EventsScope) {
  (0, _inherits2.default)(NetworkQualityMonitor, _EventsScope);

  var _super = _createSuper(NetworkQualityMonitor);

  /**
   * Creates a new instance of NetworkQualityMonitor
   * @constructor
   * @public
   * @param {Object} config
   * @property {Object} indicatorTypes - network properties used to evaluate network quality used as constants
   * @property {Object} frequencyTypes - frequency properties used as constants {uplink|send} {downlink|receive}
   * @property {number} networkQualityScore  - 0|1 1 is acceptable 0 is bad/unknown
   * @property {Object} networkQualityStatus - hash object based on indicatorTypes and frequencyTypes
   * @property {string} mediaType - audio|video
   */
  function NetworkQualityMonitor(config) {
    var _this$frequencyTypes$;

    var _this;

    (0, _classCallCheck2.default)(this, NetworkQualityMonitor);
    _this = _super.call(this);
    _this.config = config;
    _this.indicatorTypes = (0, _freeze.default)({
      PACKETLOSS: 'packetLoss',
      LATENCY: 'latency',
      JITTER: 'jitter'
    });
    _this.frequencyTypes = (0, _freeze.default)({
      UPLINK: 'uplink',
      DOWNLINK: 'downlink'
    });
    _this.networkQualityScore = 1;
    _this.networkQualityStatus = (0, _defineProperty2.default)({}, _this.frequencyTypes.UPLINK, (_this$frequencyTypes$ = {}, (0, _defineProperty2.default)(_this$frequencyTypes$, _constants.STATS.VIDEO_CORRELATE, {}), (0, _defineProperty2.default)(_this$frequencyTypes$, _constants.STATS.AUDIO_CORRELATE, {}), (0, _defineProperty2.default)(_this$frequencyTypes$, _constants.STATS.SHARE_CORRELATE, {}), _this$frequencyTypes$));
    _this.mediaType = null;
    return _this;
  }
  /**
   * emits NETWORK_QUALITY event on meeting with payload of media type and uplinkNetworkQuality score
   *
   * @memberof NetworkQualityMonitor
   * @returns {void}
   */


  (0, _createClass2.default)(NetworkQualityMonitor, [{
    key: "emitNetworkQuality",
    value: function emitNetworkQuality() {
      this.emit({
        file: 'networkQualityMonitor',
        function: 'emitNetworkQuality'
      }, _constants.EVENT_TRIGGERS.NETWORK_QUALITY, {
        mediaType: this.mediaType,
        networkQualityScore: this.networkQualityScore
      });
    }
    /**
     * invokes emitNetworkQuality method resets values back to default
     * @returns {void}
     * @memberof NetworkQualityMonitor
     */

  }, {
    key: "updateNetworkQualityStatus",
    value: function updateNetworkQualityStatus() {
      this.emitNetworkQuality(); // reset values

      this.networkQualityScore = 1;
      this.mediaType = null;
    }
    /**
     * filter data to determine uplink network quality, invoked on same interval as stats analyzer remote-inbout-rtp
     * @param {Object} configObj
     * @param {string} configObj.mediaType {audio|video}
     * @param {RTCStats} configObj.remoteRtpResults RTC stats remote obj
     * @param {Object} configObj.statsAnalyzerCurrentStats statsResults
     * @returns {void}
     * @public
     * @memberof NetworkQualityMonitor
     */

  }, {
    key: "determineUplinkNetworkQuality",
    value: function determineUplinkNetworkQuality(_ref) {
      var _this2 = this;

      var mediaType = _ref.mediaType,
          remoteRtpResults = _ref.remoteRtpResults,
          statsAnalyzerCurrentStats = _ref.statsAnalyzerCurrentStats;
      var roundTripTimeInMilliseconds = remoteRtpResults.roundTripTime * 1000;
      var jitterInMilliseconds = remoteRtpResults.jitter * 1000;
      var currentPacketLossRatio = statsAnalyzerCurrentStats[mediaType].send.currentPacketLossRatio;
      this.mediaType = mediaType;
      var _this$indicatorTypes = this.indicatorTypes,
          JITTER = _this$indicatorTypes.JITTER,
          PACKETLOSS = _this$indicatorTypes.PACKETLOSS,
          LATENCY = _this$indicatorTypes.LATENCY;
      var UPLINK = this.frequencyTypes.UPLINK;
      /**
       * determines if packetLoss ratio is over threshold set in config
       * sets networkQualityScore to 0 if over threshold
       * @returns {boolean}
       */

      var determinePacketLoss = function determinePacketLoss() {
        if (currentPacketLossRatio > _this2.config.videoPacketLossRatioThreshold) {
          _this2.networkQualityScore = 0;
          return false;
        }

        return true;
      };
      /**
       * determines if round trip time value is over threshold set in config
       * sets networkQualityScore to 0 if over threshold
       * @returns {boolean}
       */


      var determineLatency = function determineLatency() {
        if (roundTripTimeInMilliseconds > _this2.config.rttThreshold) {
          _this2.networkQualityScore = 0;
          return false;
        }

        return true;
      };
      /**
       * determines if jitter value is over threshold in config
       * sets networkQualityScore to 0 if over threshold
       * @returns {boolean}
       */


      var deterMineJitter = function deterMineJitter() {
        if (jitterInMilliseconds > _this2.config.jitterThreshold) {
          _this2.networkQualityScore = 0;
          return false;
        }

        return true;
      };
      /**
       * returns null if val is specifically undefined
       * @param {(number|undefined)} value
       * @returns {(number|null)}
       */


      var determineIfUndefined = function determineIfUndefined(value) {
        return typeof value === 'undefined' ? null : value;
      };
      /**
       * Values for some browsers specifically Safari will be undefined we explicitly set to null
       * https://bugs.webkit.org/show_bug.cgi?id=206645
       * https://bugs.webkit.org/show_bug.cgi?id=212668
       */
      // PACKET LOSS


      this.networkQualityStatus[UPLINK][mediaType][PACKETLOSS] = {
        acceptable: determinePacketLoss(),
        value: determineIfUndefined(currentPacketLossRatio)
      }; // LATENCY measured in Round trip time

      this.networkQualityStatus[UPLINK][mediaType][LATENCY] = {
        acceptable: determineLatency(),
        value: determineIfUndefined(remoteRtpResults.roundTripTime)
      }; // JITTER

      this.networkQualityStatus[UPLINK][mediaType][JITTER] = {
        acceptable: deterMineJitter(),
        value: determineIfUndefined(remoteRtpResults.jitter)
      };
      this.updateNetworkQualityStatus();
    }
    /**
     * Get the current status of network quaility object - networkQualityStatus
     * @returns {Object}
     * @public
     */

  }, {
    key: "networkQualityStats",
    get: function get() {
      var UPLINK = this.frequencyTypes.UPLINK;
      return this.networkQualityStatus[UPLINK];
    }
  }]);
  return NetworkQualityMonitor;
}(_eventsScope.default);

exports.default = NetworkQualityMonitor;
//# sourceMappingURL=index.js.map
