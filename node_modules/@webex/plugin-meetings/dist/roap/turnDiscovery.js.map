{"version":3,"names":["TURN_DISCOVERY_TIMEOUT","TurnDiscovery","roapRequest","turnInfo","url","username","password","defer","LoggerProxy","logger","warn","reject","Error","responseTimer","setTimeout","info","promise","roapMessage","headers","expectedHeaders","headerName","field","foundHeaders","forEach","receivedHeader","expectedHeader","startsWith","substring","length","clearTimeout","undefined","resolve","meeting","isReconnecting","seq","roapSeq","Defer","messageType","ROAP","ROAP_TYPES","TURN_DISCOVERY_REQUEST","version","ROAP_VERSION","sendRoap","correlationId","locusSelfUrl","selfUrl","mediaId","audioMuted","isAudioMuted","videoMuted","isVideoMuted","meetingId","id","then","mediaConnections","setRoapSeq","updateMediaConnections","OK","config","experimental","enableTurnDiscovery","sendRoapTurnDiscoveryRequest","waitForTurnDiscoveryResponse","sendRoapOK","catch","e","Metrics","sendBehavioralMetric","BEHAVIORAL_METRICS","TURN_DISCOVERY_FAILURE","correlation_id","locus_id","locusUrl","split","pop","reason","message","stack"],"sources":["turnDiscovery.ts"],"sourcesContent":["import {Defer} from '@webex/common';\n\nimport Metrics from '../metrics';\nimport BEHAVIORAL_METRICS from '../metrics/constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {ROAP} from '../constants';\n\nimport RoapRequest from './request';\n\nconst TURN_DISCOVERY_TIMEOUT = 10; // in seconds\n\n/**\n * Handles the process of finding out TURN server information from Linus.\n * This is achieved by sending a TURN_DISCOVERY_REQUEST.\n */\nexport default class TurnDiscovery {\n  private roapRequest: RoapRequest;\n\n  private defer?: Defer; // used for waiting for the response\n\n  private turnInfo: {\n    url: string;\n    username: string;\n    password: string;\n  };\n\n  private responseTimer?: ReturnType<typeof setTimeout>;\n\n  /**\n   * Constructor\n   *\n   * @param {RoapRequest} roapRequest\n   */\n  constructor(roapRequest: RoapRequest) {\n    this.roapRequest = roapRequest;\n    this.turnInfo = {\n      url: '',\n      username: '',\n      password: '',\n    };\n  }\n\n\n  /**\n   * waits for TURN_DISCOVERY_RESPONSE message to arrive\n   *\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  waitForTurnDiscoveryResponse() {\n    if (!this.defer) {\n      LoggerProxy.logger.warn('Roap:turnDiscovery#waitForTurnDiscoveryResponse --> TURN discovery is not in progress');\n\n      return Promise.reject(new Error('waitForTurnDiscoveryResponse() called before sendRoapTurnDiscoveryRequest()'));\n    }\n\n    const {defer} = this;\n\n    this.responseTimer = setTimeout(() => {\n      LoggerProxy.logger.warn(`Roap:turnDiscovery#waitForTurnDiscoveryResponse --> timeout! no response arrived within ${TURN_DISCOVERY_TIMEOUT} seconds`);\n\n      defer.reject(new Error('Timed out waiting for TURN_DISCOVERY_RESPONSE'));\n    }, TURN_DISCOVERY_TIMEOUT * 1000);\n\n    LoggerProxy.logger.info('Roap:turnDiscovery#waitForTurnDiscoveryResponse --> waiting for TURN_DISCOVERY_RESPONSE...');\n\n    return defer.promise;\n  }\n\n  /**\n   * handles TURN_DISCOVERY_RESPONSE roap message\n   *\n   * @param {Object} roapMessage\n   * @returns {void}\n   * @public\n   * @memberof Roap\n   */\n  handleTurnDiscoveryResponse(roapMessage) {\n    const {headers} = roapMessage;\n\n    if (!this.defer) {\n      LoggerProxy.logger.warn('Roap:turnDiscovery#handleTurnDiscoveryResponse --> unexpected TURN discovery response');\n\n      return;\n    }\n\n    const expectedHeaders = [\n      {headerName: 'x-cisco-turn-url', field: 'url'},\n      {headerName: 'x-cisco-turn-username', field: 'username'},\n      {headerName: 'x-cisco-turn-password', field: 'password'},\n    ];\n\n    let foundHeaders = 0;\n\n    headers?.forEach((receivedHeader) => {\n      // check if it matches any of our expected headers\n      expectedHeaders.forEach((expectedHeader) => {\n        if (receivedHeader.startsWith(`${expectedHeader.headerName}=`)) {\n          this.turnInfo[expectedHeader.field] = receivedHeader.substring(expectedHeader.headerName.length + 1);\n          foundHeaders += 1;\n        }\n      });\n    });\n\n    clearTimeout(this.responseTimer);\n    this.responseTimer = undefined;\n\n    if (foundHeaders !== expectedHeaders.length) {\n      LoggerProxy.logger.warn(`Roap:turnDiscovery#handleTurnDiscoveryResponse --> missing some headers, received: ${JSON.stringify(headers)}`);\n      this.defer.reject(new Error(`TURN_DISCOVERY_RESPONSE missing some headers: ${JSON.stringify(headers)}`));\n    }\n    else {\n      LoggerProxy.logger.info(`Roap:turnDiscovery#handleTurnDiscoveryResponse --> received a valid response, url=${this.turnInfo.url}`);\n      this.defer.resolve();\n    }\n  }\n\n  /**\n   * sends the TURN_DISCOVERY_REQUEST roap request\n   *\n   * @param {Meeting} meeting\n   * @param {Boolean} isReconnecting\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapTurnDiscoveryRequest(meeting, isReconnecting) {\n    const seq = meeting.roapSeq + 1;\n\n    if (this.defer) {\n      LoggerProxy.logger.warn('Roap:turnDiscovery#sendRoapTurnDiscoveryRequest --> already in progress');\n\n      return Promise.resolve();\n    }\n\n    this.defer = new Defer();\n\n    const roapMessage = {\n      messageType: ROAP.ROAP_TYPES.TURN_DISCOVERY_REQUEST,\n      version: ROAP.ROAP_VERSION,\n      seq,\n    };\n\n    LoggerProxy.logger.info('Roap:turnDiscovery#sendRoapTurnDiscoveryRequest --> sending TURN_DISCOVERY_REQUEST');\n\n    return this.roapRequest\n      .sendRoap({\n        roapMessage,\n        correlationId: meeting.correlationId,\n        locusSelfUrl: meeting.selfUrl,\n        mediaId: isReconnecting ? '' : meeting.mediaId,\n        audioMuted: meeting.isAudioMuted(),\n        videoMuted: meeting.isVideoMuted(),\n        meetingId: meeting.id\n      })\n      .then(({mediaConnections}) => {\n        meeting.setRoapSeq(seq);\n\n        if (mediaConnections) {\n          meeting.updateMediaConnections(mediaConnections);\n        }\n      });\n  }\n\n  /**\n   * Sends the OK message that server expects to receive\n   * after it sends us TURN_DISCOVERY_RESPONSE\n   *\n   * @param {Meeting} meeting\n   * @returns {Promise}\n   */\n  sendRoapOK(meeting) {\n    LoggerProxy.logger.info('Roap:turnDiscovery#sendRoapOK --> sending OK');\n\n    return this.roapRequest.sendRoap({\n      roapMessage: {\n        messageType: ROAP.ROAP_TYPES.OK,\n        version: ROAP.ROAP_VERSION,\n        seq: meeting.roapSeq\n      },\n      locusSelfUrl: meeting.selfUrl,\n      mediaId: meeting.mediaId,\n      correlationId: meeting.correlationId,\n      audioMuted: meeting.isAudioMuted(),\n      videoMuted: meeting.isVideoMuted(),\n      meetingId: meeting.id\n    });\n  }\n\n  /**\n   * Retrieves TURN server information from the backend by doing\n   * a roap message exchange:\n   * client                             server\n   *  | -----TURN_DISCOVERY_REQUEST-----> |\n   *  | <----TURN_DISCOVERY_RESPONSE----- |\n   *  | --------------OK----------------> |\n   *\n   * @param {Meeting} meeting\n   * @param {Boolean} isReconnecting should be set to true if this is a new\n   *                                 media connection just after a reconnection\n   * @returns {Promise}\n   */\n  doTurnDiscovery(meeting, isReconnecting) {\n    if (!meeting.config.experimental.enableTurnDiscovery) {\n      LoggerProxy.logger.info('Roap:turnDiscovery#doTurnDiscovery --> TURN discovery disabled in config, skipping it');\n\n      return Promise.resolve(undefined);\n    }\n\n    return this.sendRoapTurnDiscoveryRequest(meeting, isReconnecting)\n      .then(() => this.waitForTurnDiscoveryResponse())\n      .then(() => this.sendRoapOK(meeting))\n      .then(() => {\n        this.defer = undefined;\n\n        LoggerProxy.logger.info('Roap:turnDiscovery#doTurnDiscovery --> TURN discovery completed');\n\n        return this.turnInfo;\n      })\n      .catch((e) => {\n        // we catch any errors and resolve with no turn information so that the normal call join flow can continue without TURN\n        LoggerProxy.logger.info(`Roap:turnDiscovery#doTurnDiscovery --> TURN discovery failed, continuing without TURN: ${e}`);\n\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.TURN_DISCOVERY_FAILURE,\n          {\n            correlation_id: meeting.correlationId,\n            locus_id: meeting.locusUrl.split('/').pop(),\n            reason: e.message,\n            stack: e.stack\n          }\n        );\n\n        return Promise.resolve(undefined);\n      });\n  }\n}\n"],"mappings":"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"}