{"version":3,"names":["Roap","attrs","options","meeting","roapMessage","messageType","ROAP","ROAP_TYPES","OFFER","sdps","sdp","version","ROAP_VERSION","seq","roapSeq","tieBreaker","roapHandler","submit","type","SEND_ROAP_MSG","msg","correlationId","roapBody","localMedias","localSdp","roapRequest","attachRechabilityData","audioMuted","isAudioMuted","videoMuted","isVideoMuted","MeetingUtil","joinMeetingOptions","then","locus","SEND_ROAP_MSG_SUCCESS","setRoapSeq","RoapHandler","sendRoapOK","bind","sendRoapAnswer","roapFinished","RoapRequest","lastRoapOffer","turnDiscovery","TurnDiscovery","data","message","LoggerProxy","logger","log","TURN_DISCOVERY_RESPONSE","handleTurnDiscoveryResponse","RECEIVE_ROAP_MSG","RECEIVE_CALL_LEAVE","resolve","webex","meetings","meetingCollection","getByKey","OK","sendRoap","locusSelfUrl","selfUrl","mediaId","meetingId","id","ANSWER","session","errorType","ERROR","reconnect","sendEmptyMediaId","config","experimental","enableTurnDiscovery","mediaConnections","updateMediaConnections","sequenceId","RoapCollection","onSessionSequenceFinish","mediaNegotiatedEvent","isBusy","processNextQueuedMediaUpdate","isReconnecting","doTurnDiscovery","StatelessWebexPlugin"],"sources":["index.js"],"sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {ROAP} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport MeetingUtil from '../meeting/util';\n\nimport RoapHandler from './handler';\nimport RoapRequest from './request';\nimport RoapCollection from './collection';\nimport TurnDiscovery from './turnDiscovery';\n\n/**\n * Roap options\n * @typedef {Object} RoapOptions\n * @property {String} sdp\n * @property {Meeting} meeting\n * @property {Number} roapSeq\n * @property {Boolean} reconnect\n */\n\n/**\n  * @typedef {Object} SeqOptions\n  * @property {String} correlationId\n  * @property {String} mediaId\n  * @property {Number} seq\n  */\n\n/**\n * @class Roap\n * @export\n * @private\n */\nexport default class Roap extends StatelessWebexPlugin {\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Roap\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Roap\n     */\n    this.options = options;\n    /**\n     * The Roap Process State Handler\n     * @instance\n     * @type {RoapHandler}\n     * @private\n     * @memberof Roap\n     */\n    this.roapHandler = new RoapHandler(this.attrs, this.options, this.sendRoapOK.bind(this), this.sendRoapAnswer.bind(this), this.roapFinished.bind(this));\n    /**\n     * The Roap Request Server Proxy Object\n     * @instance\n     * @type {RoapRequest}\n     * @private\n     * @memberof Roap\n     */\n    this.roapRequest = new RoapRequest({}, options);\n    /**\n     * The last roap offer sent to server and acked\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Roap\n     */\n    this.lastRoapOffer = {};\n\n    this.turnDiscovery = new TurnDiscovery(this.roapRequest);\n  }\n\n  /**\n   * Starts listening to mercury events for Roap messages\n   * @param {object} data event object\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  roapEvent(data) {\n    const msg = data.message;\n    const {correlationId} = data;\n\n    LoggerProxy.logger.log(`Roap:index#roapEvent --> Received Roap Message [${JSON.stringify(msg, null, 2)}]`);\n\n    if (msg.messageType === ROAP.ROAP_TYPES.TURN_DISCOVERY_RESPONSE) {\n      // turn discovery is not part of normal roap protocol and so we are not handling it\n      // through the usual roap state machine\n      this.turnDiscovery.handleTurnDiscoveryResponse(msg);\n    }\n    else {\n      this.roapHandler.submit({\n        type: ROAP.RECEIVE_ROAP_MSG,\n        msg,\n        correlationId\n      });\n    }\n  }\n\n  /**\n   *\n   * @param {String} correlationId correlation id of a meeting\n   * @param {Number} seq ROAP sequence number\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  stop(correlationId, seq) {\n    this.roapHandler.submit({\n      type: ROAP.RECEIVE_CALL_LEAVE,\n      seq,\n      correlationId\n    });\n\n    return Promise.resolve();\n  }\n\n  /**\n   *\n   * @param {SeqOptions} options\n   * @returns {null}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapOK(options) {\n    return Promise.resolve().then(() => {\n      const meeting = this.webex.meetings.meetingCollection.getByKey('correlationId', options.correlationId);\n      const roapMessage = {\n        messageType: ROAP.ROAP_TYPES.OK,\n        version: ROAP.ROAP_VERSION,\n        seq: options.seq\n      };\n\n      LoggerProxy.logger.log(`Roap:index#sendRoapOK --> ROAP OK sending with seq ${options.seq}`);\n\n      return this.roapRequest\n        .sendRoap({\n          roapMessage,\n          locusSelfUrl: meeting.selfUrl,\n          mediaId: options.mediaId,\n          correlationId: options.correlationId,\n          audioMuted: meeting.isAudioMuted(),\n          videoMuted: meeting.isVideoMuted(),\n          meetingId: meeting.id\n        })\n        .then(() => {\n          this.roapHandler.submit({\n            type: ROAP.SEND_ROAP_MSG,\n            msg: roapMessage,\n            correlationId: options.correlationId\n          });\n          LoggerProxy.logger.log(`Roap:index#sendRoapOK --> ROAP OK sent with seq ${options.seq}`);\n          meeting.setRoapSeq(options.seq);\n        });\n    });\n  }\n\n  // eslint-disable-next-line no-warning-comments\n  // TODO: try to merge sendRoapOk and roapAnswer\n  /**\n   * Sends a ROAP answer...\n   * @param {SeqOptions} options\n   * @param {Boolean} options.audioMuted\n   * @param {Boolean} options.videoMuted\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapAnswer(options) {\n    const meeting = this.webex.meetings.meetingCollection.getByKey('correlationId', options.correlationId);\n    const roapMessage = {\n      messageType: ROAP.ROAP_TYPES.ANSWER,\n      sdps: options.sdps,\n      version: ROAP.ROAP_VERSION,\n      seq: options.seq\n    };\n\n    this.roapHandler.submit({\n      type: ROAP.SEND_ROAP_MSG,\n      msg: roapMessage,\n      correlationId: options.correlationId\n    });\n\n    return this.roapRequest\n      .sendRoap({\n        roapMessage,\n        locusSelfUrl: meeting.selfUrl,\n        mediaId: options.mediaId,\n        correlationId: options.correlationId,\n        audioMuted: options.audioMuted,\n        videoMuted: options.videoMuted,\n        meetingId: meeting.id\n      })\n      .then(() => {\n        meeting.setRoapSeq(options.seq);\n\n        this.roapHandler.submit({\n          type: ROAP.SEND_ROAP_MSG_SUCCESS,\n          seq: roapMessage.seq,\n          correlationId: meeting.correlationId\n        });\n      });\n  }\n\n  /**\n   * Sends a ROAP error...\n   * @param {Object} session\n   * @param {Object} locus\n   * @param {String} errorType\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapError(session, locus, errorType) {\n    const msg = {\n      messageType: ROAP.ROAP_TYPES.ERROR,\n      version: ROAP.ROAP_VERSION,\n      errorType,\n      seq: session.OFFER.seq\n    };\n\n    return this.roapRequest.sendRoap(msg, locus);\n  }\n\n  /**\n   * sends a roap media request\n   * @param {RoapOptions} options\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapMediaRequest(options) {\n    const {meeting, reconnect} = options;\n    const roapMessage = {\n      messageType: ROAP.ROAP_TYPES.OFFER,\n      sdps: [options.sdp],\n      // sdps: [options.sdp],\n      version: ROAP.ROAP_VERSION,\n      seq: typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq)) ? 0 : options.roapSeq + 1,\n      tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario\n    };\n\n    this.roapHandler.submit({\n      type: ROAP.SEND_ROAP_MSG,\n      msg: roapMessage,\n      correlationId: meeting.correlationId\n    });\n\n    // When reconnecting, it's important that the first roap message being sent out has empty media id.\n    // Normally this is the roap offer, but when TURN discovery is enabled,\n    // then this is the TURN discovery request message\n    const sendEmptyMediaId = reconnect && !meeting.config.experimental.enableTurnDiscovery;\n\n    return this.roapRequest\n      .sendRoap({\n        roapMessage,\n        correlationId: meeting.correlationId,\n        locusSelfUrl: meeting.selfUrl,\n        mediaId: sendEmptyMediaId ? '' : meeting.mediaId,\n        audioMuted: meeting.isAudioMuted(),\n        videoMuted: meeting.isVideoMuted(),\n        meetingId: meeting.id\n      })\n      .then(({locus, mediaConnections}) => {\n        this.roapHandler.submit({\n          type: ROAP.SEND_ROAP_MSG_SUCCESS,\n          seq: roapMessage.seq,\n          correlationId: meeting.correlationId\n        });\n        meeting.setRoapSeq(roapMessage.seq);\n\n        if (mediaConnections) {\n          meeting.updateMediaConnections(mediaConnections);\n        }\n\n        // eslint-disable-next-line no-warning-comments\n        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here\n        return locus;\n        // eslint-disable-next-line no-warning-comments\n        // TODO: check where to update the sequence number\n      });\n  }\n\n  /**\n   * sends a roap media request\n   * @param {RoapOptions} options\n   * @returns {Promise}\n   * @private\n   * @memberof Roap\n   */\n  sendRoapCallRequest = (options) => {\n    const {meeting} = options;\n    const roapMessage = {\n      messageType: ROAP.ROAP_TYPES.OFFER,\n      sdps: [options.sdp],\n      version: ROAP.ROAP_VERSION,\n      seq: typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq)) ? 0 : options.roapSeq + 1,\n      tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario\n    };\n\n    this.roapHandler.submit({\n      type: ROAP.SEND_ROAP_MSG,\n      msg: roapMessage,\n      correlationId: meeting.correlationId\n    });\n\n    const roapBody = {\n      localMedias: [\n        {\n          localSdp: JSON.stringify(this.roapRequest.attachRechabilityData({\n            roapMessage,\n            // eslint-disable-next-line no-warning-comments\n            // TODO: check whats the need for video and audiomute\n            audioMuted: !!meeting.isAudioMuted(),\n            videoMuted: !!meeting.isVideoMuted()\n          }))\n        // mediaId: meeting.mediaId\n        }\n      ]\n    };\n\n    return MeetingUtil.joinMeetingOptions(meeting, {roapMessage: roapBody})\n      .then((locus) => {\n        this.roapHandler.submit({\n          type: ROAP.SEND_ROAP_MSG_SUCCESS,\n          seq: roapMessage.seq,\n          correlationId: meeting.correlationId\n        });\n        meeting.setRoapSeq(roapMessage.seq);\n\n        // eslint-disable-next-line no-warning-comments\n        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here\n        return locus;\n      // eslint-disable-next-line no-warning-comments\n      // TODO: check where to update the sequence number\n      });\n  };\n\n  /**\n * Called when the roap sequence is finished (completed successfully or failed)\n * @param {String} correlationId id of the meeting affected\n * @param {String} sequenceId the id of the finished sequence\n * @returns {undefined}\n * @private\n * @memberof Roap\n */\n  roapFinished(correlationId, sequenceId) {\n    RoapCollection.onSessionSequenceFinish(correlationId, sequenceId);\n    const meeting = this.webex.meetings.meetingCollection.getByKey('correlationId', correlationId);\n\n    meeting.mediaNegotiatedEvent();\n    if (!RoapCollection.isBusy(correlationId)) {\n      meeting.processNextQueuedMediaUpdate();\n    }\n  }\n\n  /**\n   * Performs a TURN server discovery procedure, which involves exchanging\n   * some roap messages with the server. This exchange has to be done before\n   * any other roap messages are sent\n   *\n   * @param {Meeting} meeting\n   * @param {Boolean} isReconnecting should be set to true if this is a new\n   *                                 media connection just after a reconnection\n   * @returns {Promise}\n   */\n  doTurnDiscovery(meeting, isReconnecting) {\n    return this.turnDiscovery.doTurnDiscovery(meeting, isReconnecting);\n  }\n}\n"],"mappings":"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"}