{"version":3,"names":["Meetings","args","MEETINGS","request","Request","parent","webex","loggerRequest","LoggerRequest","meetingCollection","MeetingCollection","personalMeetingRoom","reachability","registered","preferredWebexSite","media","getUserMedia","Media","getSupportedDevice","onReady","data","useRandomDelayForInfo","meeting","getByKey","LOCUS_URL","locusUrl","CORRELATION_ID","MeetingsUtil","checkForCorrelationId","internal","device","url","locus","SIP_URI","self","callbackInfo","callbackAddress","info","isUnifiedSpaceMeeting","undefined","CONVERSATION_URL","conversationUrl","replaces","length","fullState","state","LOCUS","STATE","INACTIVE","LoggerProxy","logger","warn","_LEFT_","removed","create","_LOCUS_ID_","then","newMeeting","locusInfo","initialSetup","catch","e","console","log","finally","getMeetingByType","_ID_","id","Metrics","postEvent","event","eventType","REMOTE_STARTED","trigger","MERCURY_EVENT","Trigger","file","function","EVENT_TRIGGERS","MEETING_ADDED","type","_MEETING_","_JOIN_","_INCOMING_","parse","envelope","LOCUSEVENT","MESSAGE_ROAP","handleLocusEvent","MEETINGS_NETWORK_DISCONNECTED","mercury","on","LOCUS_MERCURY","handleLocusMercury","ROAP","ROAP_MERCURY","handleRoapMercury","ONLINE","syncMeetings","OFFLINE","handleMercuryOffline","off","once","READY","StaticConfig","set","config","LoggerConfig","logging","meetingInfo","experimental","enableUnifiedMeetings","MeetingInfoV2","MeetingInfo","PersonalMeetingRoom","MEETINGS_READY","checkH264Support","disableNotifications","changeState","enable","enableTurnDiscovery","enableAdhocMeetings","canAuthorize","error","reject","Error","resolve","all","fetchUserPreferredWebexSite","getGeoHint","startReachability","message","register","connect","call","listenForEvents","MEETINGS_REGISTERED","sendBehavioralMetric","BEHAVIORAL_METRICS","MEETINGS_REGISTRATION_SUCCESS","MEETINGS_REGISTRATION_FAILED","reason","stack","stopListeningForEvents","disconnect","unregister","MEETINGS_UNREGISTERED","options","uploadLogs","uploadResult","MEETING_LOG_UPLOAD_SUCCESS","meetingId","details","uploadError","MEETING_LOG_UPLOAD_FAILURE","UPLOAD_LOGS_FAILURE","meetingsId","code","Reachability","setReachability","getReachability","gatherReachability","fetchGeoHint","res","geoHintInfo","getMeetingPreferences","parseDefaultSiteFromMeetingPreferences","MeetingUtil","cleanUp","delete","MEETING_REMOVED","destination","fetchInfoOptions","targetDest","_CONVERSATION_URL_","foundMeeting","foundMeetingIsNotCalendarMeeting","scheduledMeeting","createMeeting","createdMeeting","EVENTS","DESTROY_MEETING","payload","autoUploadLogs","callStart","lastActive","correlationId","feedbackId","locusId","webExMeetingId","destroy","REQUEST_UPLOAD_LOGS","meetingInstance","Meeting","userId","deviceUrl","orgId","roapSeq","meetingInfoProvider","destinationType","waitingTime","startTime","startTimeDate","Date","startTimeDatestamp","getTime","timeToStart","maxWaitingTime","Math","max","min","MAX_RANDOM_DELAY_FOR_MEETING_INFO","round","random","isMeetingActive","active","fetchMeetingInfoTimeoutId","setTimeout","fetchMeetingInfo","parseMeetingInfo","CaptchaError","PasswordError","debug","sipUri","setSipUri","meetingAddedType","getMeetingAddedType","value","getAll","getActiveMeetings","locusArray","activeLocusUrl","loci","forEach","push","meetingsCollection","includes","MEETING_REMOVED_REASON","NO_MEETINGS_TO_SYNC","scheduled","get","WebexPlugin"],"sources":["index.js"],"sourcesContent":["\nimport '@webex/internal-plugin-mercury';\nimport '@webex/internal-plugin-conversation';\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport 'webrtc-adapter';\n\nimport Metrics from '../metrics';\nimport {trigger, eventType} from '../metrics/config';\nimport LoggerConfig from '../common/logs/logger-config';\nimport StaticConfig from '../common/config';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport LoggerRequest from '../common/logs/request';\nimport Trigger from '../common/events/trigger-proxy';\nimport Media from '../media';\nimport MeetingUtil from '../meeting/util';\nimport {\n  MEETINGS,\n  EVENTS,\n  EVENT_TRIGGERS,\n  READY,\n  LOCUSEVENT,\n  LOCUS_URL,\n  MAX_RANDOM_DELAY_FOR_MEETING_INFO,\n  ROAP,\n  ONLINE,\n  OFFLINE,\n  _MEETING_,\n  _JOIN_,\n  _LOCUS_ID_,\n  _INCOMING_,\n  LOCUS,\n  CORRELATION_ID,\n  SIP_URI,\n  _LEFT_,\n  _ID_,\n  MEETING_REMOVED_REASON,\n  _CONVERSATION_URL_,\n  CONVERSATION_URL\n} from '../constants';\nimport BEHAVIORAL_METRICS from '../metrics/constants';\nimport MeetingInfo from '../meeting-info';\nimport MeetingInfoV2 from '../meeting-info/meeting-info-v2';\nimport Meeting from '../meeting';\nimport PersonalMeetingRoom from '../personal-meeting-room';\nimport Reachability from '../reachability';\nimport Request from '../meetings/request';\nimport PasswordError from '../common/errors/password-error';\nimport CaptchaError from '../common/errors/captcha-error';\n\nimport MeetingCollection from './collection';\nimport MeetingsUtil from './util';\n\n\n/**\n   * Meetings Ready Event\n   * Emitted when the meetings instance on webex is ready\n   * @event meetings:ready\n   * @instance\n   * @memberof Meetings\n   */\n\n/**\n   * Meetings Network Disconnected Event\n   * Emitted when the meetings instance is disconnected from\n   * the internal mercury server\n   * @event network:disconnected\n   * @instance\n   * @memberof Meetings\n   */\n\n/**\n * Meetings Registered Event\n * Emitted when the meetings instance has been registered and listening\n * @event meetings:registered\n * @instance\n * @memberof Meetings\n */\n\n/**\n    * Meeting Removed Event\n    * Emitted when a meeting was removed from the cache of meetings\n    * @event meeting:removed\n    * @instance\n    * @type {Object}\n    * @property {String} meetingId the removed meeting\n    * @property {Object} response the server response\n    * @property {String} type what type of meeting it was\n    * @memberof Meetings\n    */\n\n/**\n    * Meeting Added Event\n    * Emitted when a meeting was added to the cache of meetings\n    * @event meeting:added\n    * @instance\n    * @type {Object}\n    * @property {String} meetingId the added meeting\n    * @property {String} type what type of meeting it was\n    * @memberof Meetings\n    */\n\n/**\n   * Maintain a cache of meetings and sync with services.\n   * @class\n   */\nexport default class Meetings extends WebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n     * Initializes the Meetings Plugin\n     * @constructor\n     * @public\n     * @memberof Meetings\n     */\n  constructor(...args) {\n    super(...args);\n\n    /**\n       * The Meetings request to interact with server\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n    this.request = new Request({}, {parent: this.webex});\n    /**\n       * Log upload request helper\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n    this.loggerRequest = new LoggerRequest({webex: this.webex});\n    this.meetingCollection = new MeetingCollection();\n    /**\n       * The PersonalMeetingRoom object to interact with server\n       * @instance\n       * @type {Object}\n       * @public\n       * @memberof Meetings\n       */\n    this.personalMeetingRoom = null;\n    /**\n       * The Reachability object to interact with server, starts as null until {@link Meeting#setReachability} is called\n       * starts as null\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n    this.reachability = null;\n\n    /**\n       * If the meetings plugin has been registered and listening via {@link Meetings#register}\n       * @instance\n       * @type {Boolean}\n       * @public\n       * @memberof Meetings\n       */\n    this.registered = false;\n\n    /**\n       * This values indicates the preferred webex site the user will start there meeting, getsits value from {@link Meetings#register}\n       * @instance\n       * @type {String}\n       * @private\n       * @memberof Meetings\n       */\n    this.preferredWebexSite = '';\n\n    /**\n       * The public interface for the internal Media util files. These are helpful to expose outside the context\n       * of a meeting so that a user can access media without creating a meeting instance.\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n    this.media = {\n      getUserMedia: Media.getUserMedia,\n      getSupportedDevice: Media.getSupportedDevice\n    };\n\n    this.onReady();\n  }\n\n  /**\n     * handle locus events and takes meeting actions with them as they come in\n     * @param {Object} data a locus event\n     * @param {String} data.locusUrl\n     * @param {Object} data.locus\n     * @param {Boolean} useRandomDelayForInfo whether a random delay should be added to fetching meeting info\n     * @param {String} data.eventType\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n  handleLocusEvent(data, useRandomDelayForInfo = false) {\n    let meeting = null;\n\n    // getting meeting by correlationId. This will happen for the new event\n    // Either the locus\n    // TODO : Add check for the callBack Address\n    meeting = this.meetingCollection.getByKey(LOCUS_URL, data.locusUrl) ||\n      this.meetingCollection.getByKey(CORRELATION_ID, MeetingsUtil.checkForCorrelationId(this.webex.internal.device.url, data.locus)) ||\n      this.meetingCollection.getByKey(SIP_URI, data.locus.self && data.locus.self.callbackInfo && data.locus.self.callbackInfo.callbackAddress) ||\n      (data.locus.info?.isUnifiedSpaceMeeting ? undefined : this.meetingCollection.getByKey(CONVERSATION_URL, data.locus.conversationUrl));\n\n    // Special case when locus has got replaced, This only happend once if a replace locus exists\n    // https://sqbu-github.cisco.com/WebExSquared/locus/wiki/Locus-changing-mid-call\n\n    if (!meeting && data.locus?.replaces?.length > 0) {\n      // Always the last element in the replace is the active one\n      meeting = this.meetingCollection.getByKey(LOCUS_URL, data.locus.replaces[data.locus.replaces.length - 1].locusUrl);\n    }\n\n    if (!meeting) {\n      // TODO: create meeting when we get a meeting object\n      // const checkForEnded = (locus) => {\n      // TODO: you already ended the meeting but you got an event later\n      // Mainly for 1:1 Callsor meeting\n      // Happens mainly after refresh\n\n      // 1:1 Meeting\n      // 1)  You ended a call before but you got a mercury event\n      // Make sure end the call and cleanup the meeting only if the mercury\n      // event says so\n      // 2) Maintain lastSync time in the meetings object which helps to compare\n      // If the meeting came befor or after the sync . ANy meeting start time before the sync time is invalid\n\n      // For space Meeting\n      // Check the locus object and see who has joined\n\n      // };\n      // rather then locus object change to locus url\n\n      if (data.locus && data.locus.fullState && data.locus.fullState.state === LOCUS.STATE.INACTIVE) {\n        // just ignore the event as its already ended and not active\n        LoggerProxy.logger.warn('Meetings:index#handleLocusEvent --> Locus event received for meeting, after it was ended.');\n\n        return;\n      }\n\n\n      // When its wireless share or guest and user leaves the meeting we dont have to keep the meeting object\n      // Any future events will be neglected\n\n      if (data.locus && data.locus.self && (data.locus.self.state === _LEFT_ && data.locus.self.removed === true)) {\n        // just ignore the event as its already ended and not active\n        LoggerProxy.logger.warn('Meetings:index#handleLocusEvent --> Locus event received for meeting, after it was ended.');\n\n        return;\n      }\n\n      this.create(data.locus, _LOCUS_ID_, useRandomDelayForInfo).then((newMeeting) => {\n        meeting = newMeeting;\n\n        // It's a new meeting so initialize the locus data\n        meeting.locusInfo.initialSetup(data.locus);\n      }).catch((e) => {\n        console.log(e);\n      })\n        .finally(() => {\n          // There will be cases where locus event comes in gets created and deleted because its a 1:1 and meeting gets deleted\n          // because the other user left so before sending 'added' event make sure it exists in the collection\n\n          if (this.getMeetingByType(_ID_, meeting.id)) {\n            Metrics.postEvent({event: eventType.REMOTE_STARTED, meeting, data: {trigger: trigger.MERCURY_EVENT}});\n            Trigger.trigger(\n              this,\n              {\n                file: 'meetings',\n                function: 'handleLocusEvent'\n              },\n              EVENT_TRIGGERS.MEETING_ADDED,\n              {\n                meeting,\n                type: meeting.type === _MEETING_ ? _JOIN_ : _INCOMING_\n              }\n            );\n          }\n          else {\n            // Meeting got added but was not found in the collection. It might have got destroyed\n            LoggerProxy.logger.warn('Meetings:index#handleLocusEvent --> Created and destroyed meeting object before sending an event');\n          }\n        });\n    }\n    else {\n      meeting.locusInfo.parse(meeting, data);\n    }\n  }\n\n  /**\n     * handles locus events through mercury that are not roap\n     * @param {Object} envelope\n     * @param {Object} envelope.data\n     * @param {String} envelope.data.eventType\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n  handleLocusMercury(envelope) {\n    const {data} = envelope;\n    const {eventType} = data;\n\n    if (eventType && eventType !== LOCUSEVENT.MESSAGE_ROAP) {\n      this.handleLocusEvent(data, true);\n    }\n  }\n\n\n  /**\n     * handles mecury offline event\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n  handleMercuryOffline() {\n    Trigger.trigger(\n      this,\n      {\n        file: 'meetings/index',\n        function: 'handleMercuryOffline'\n      },\n      EVENT_TRIGGERS.MEETINGS_NETWORK_DISCONNECTED,\n    );\n  }\n\n\n  /**\n     * registers for locus and roap mercury events\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n  listenForEvents() {\n    this.webex.internal.mercury.on(LOCUSEVENT.LOCUS_MERCURY, (envelope) => {\n      this.handleLocusMercury(envelope);\n    });\n    this.webex.internal.mercury.on(ROAP.ROAP_MERCURY, (envelope) => {\n      MeetingsUtil.handleRoapMercury(envelope, this.meetingCollection);\n    });\n\n    this.webex.internal.mercury.on(ONLINE, () => {\n      this.syncMeetings();\n    });\n\n    this.webex.internal.mercury.on(OFFLINE, () => {\n      this.handleMercuryOffline();\n    });\n  }\n\n  /**\n     * stops listening for locus and roap mercury events\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n  stopListeningForEvents() {\n    this.webex.internal.mercury.off(LOCUSEVENT.LOCUS_MERCURY);\n    this.webex.internal.mercury.off(ROAP.ROAP_MERCURY);\n    this.webex.internal.mercury.off(ONLINE);\n  }\n\n  /**\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n  onReady() {\n    this.webex.once(READY, () => {\n      StaticConfig.set(this.config);\n      LoggerConfig.set(this.config.logging);\n      LoggerProxy.set(this.webex.logger);\n\n      /**\n       * The MeetingInfo object to interact with server\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n      this.meetingInfo = this.config.experimental.enableUnifiedMeetings ? new MeetingInfoV2(this.webex) : new MeetingInfo(this.webex);\n      this.personalMeetingRoom = new PersonalMeetingRoom({meetingInfo: this.meetingInfo}, {parent: this.webex});\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meetings',\n          function: 'onReady'\n        },\n        EVENT_TRIGGERS.MEETINGS_READY\n      );\n\n      MeetingsUtil.checkH264Support({disableNotifications: true});\n      Metrics.initialSetup(this.meetingCollection, this.webex);\n    });\n  }\n\n  /**\n     * API to toggle unified meetings\n     * @param {Boolean} changeState\n     * @private\n     * @memberof Meetings\n     * @returns {undefined}\n    */\n  _toggleUnifiedMeetings(changeState) {\n    if (typeof changeState !== 'boolean') {\n      return;\n    }\n    if (this.config?.experimental?.enableUnifiedMeetings !== changeState) {\n      this.config.experimental.enableUnifiedMeetings = changeState;\n      this.meetingInfo = changeState ? new MeetingInfoV2(this.webex) : new MeetingInfo(this.webex);\n    }\n  }\n\n  /**\n     * API to enable or disable TURN discovery\n     * @param {Boolean} enable\n     * @private\n     * @memberof Meetings\n     * @returns {undefined}\n    */\n  _toggleTurnDiscovery(enable) {\n    if (typeof enable !== 'boolean') {\n      return;\n    }\n    this.config.experimental.enableTurnDiscovery = enable;\n  }\n\n  /**\n     * API to toggle starting adhoc meeting\n     * @param {Boolean} changeState\n     * @private\n     * @memberof Meetings\n     * @returns {undefined}\n    */\n  _toggleAdhocMeetings(changeState) {\n    if (typeof changeState !== 'boolean') {\n      return;\n    }\n    if (this.config?.experimental?.enableAdhocMeetings !== changeState) {\n      this.config.experimental.enableAdhocMeetings = changeState;\n    }\n  }\n\n  /**\n     * Explicitly sets up the meetings plugin by registering\n     * the device, connecting to mercury, and listening for locus events.\n     *\n     * @returns {Promise}\n     * @public\n     * @memberof Meetings\n     */\n  register() {\n    if (!this.webex.canAuthorize) {\n      LoggerProxy.logger.error('Meetings:index#register --> ERROR, Unable to register, SDK cannot authorize');\n\n      return Promise.reject(new Error('SDK cannot authorize'));\n    }\n\n\n    if (this.registered) {\n      LoggerProxy.logger.info('Meetings:index#register --> INFO, Meetings plugin already registered');\n\n      return Promise.resolve();\n    }\n\n    return Promise.all([\n      this.fetchUserPreferredWebexSite(),\n      this.getGeoHint(),\n      this.startReachability().catch((error) => {\n        LoggerProxy.logger.error(`Meetings:index#register --> GDM error, ${error.message}`);\n      }),\n      this.webex.internal.device.register()\n        .then(() => LoggerProxy.logger.info(`Meetings:index#register --> INFO, Device registered ${this.webex.internal.device.url}`))\n        .then(() => this.webex.internal.mercury.connect()),\n      MeetingsUtil.checkH264Support.call(this)\n    ]).then(() => {\n      this.listenForEvents();\n      Trigger.trigger(\n        this,\n        {\n          file: 'meetings',\n          function: 'register'\n        },\n        EVENT_TRIGGERS.MEETINGS_REGISTERED\n      );\n      this.registered = true;\n      Metrics.sendBehavioralMetric(\n        BEHAVIORAL_METRICS.MEETINGS_REGISTRATION_SUCCESS,\n      );\n    })\n      .catch((error) => {\n        LoggerProxy.logger.error(`Meetings:index#register --> ERROR, Unable to register, ${error.message}`);\n\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.MEETINGS_REGISTRATION_FAILED,\n          {\n            reason: error.message,\n            stack: error.stack\n          }\n        );\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n     * Explicitly tears down the meetings plugin by deregistering\n     * the device, disconnecting from mercury, and stops listening to locus events\n     *\n     * @returns {Promise}\n     * @public\n     * @memberof Meetings\n     */\n  unregister() {\n    if (!this.registered) {\n      LoggerProxy.logger.info('Meetings:index#unregister --> INFO, Meetings plugin already unregistered');\n\n      return Promise.resolve();\n    }\n\n    this.stopListeningForEvents();\n\n    return this.webex.internal.mercury.disconnect()\n      .then(() => this.webex.internal.device.unregister())\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings',\n            function: 'unregister'\n          },\n          EVENT_TRIGGERS.MEETINGS_UNREGISTERED\n        );\n        this.registered = false;\n      });\n  }\n\n  /**\n     * Uploads logs to the webex services for tracking\n     * @param {Object} [options={}]\n     * @param {String} [options.callStart] Call Start Time\n     * @param {String} [options.feedbackId] ID used for tracking\n     * @param {String} [options.locusId]\n     * @param {String} [options.correlationId]\n     * @param {String} [options.meetingId] webex meeting ID\n     * @param {String} [options.userId] userId\n     * @param {String} [options.orgId] org id\n     * @returns {String} feedback ID logs were submitted under\n     */\n  uploadLogs(options = {}) {\n    LoggerProxy.logger.info('Meetings:index#uploadLogs --> uploading logs');\n\n    return this.loggerRequest.uploadLogs(options)\n      .then((uploadResult) => {\n        LoggerProxy.logger.info('Meetings:index#uploadLogs --> Upload logs for meeting completed.', uploadResult);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings',\n            function: 'uploadLogs'\n          },\n          EVENT_TRIGGERS.MEETING_LOG_UPLOAD_SUCCESS,\n          {\n            meetingId: options.meetingId,\n            details: uploadResult\n          }\n        );\n      })\n      .catch((uploadError) => {\n        LoggerProxy.logger.error('Meetings:index#uploadLogs --> Unable to upload logs for meeting', uploadError);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings',\n            function: 'uploadLogs'\n          },\n          EVENT_TRIGGERS.MEETING_LOG_UPLOAD_FAILURE,\n          {\n            meetingId: options.meetingId,\n            reason: uploadError\n          }\n        );\n\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.UPLOAD_LOGS_FAILURE,\n          {\n            meetingId: options.meetingsId,\n            reason: uploadError.message,\n            stack: uploadError.stack,\n            code: uploadError.code\n          }\n        );\n      });\n  }\n\n  /**\n     * initializes the reachability instance for Meetings\n     * @returns {undefined}\n     * @public\n     * @memberof Meetings\n     */\n  setReachability() {\n    this.reachability = new Reachability(this.webex);\n  }\n\n  /**\n     * gets the reachability instance for Meetings\n     * @returns {Reachability}\n     * @public\n     * @memberof Meetings\n     */\n  getReachability() {\n    return this.reachability;\n  }\n\n  /**\n     * initializes and starts gathering reachability for Meetings\n     * @returns {Promise}\n     * @public\n     * @memberof Meetings\n     */\n  startReachability() {\n    if (!this.reachability) {\n      this.setReachability();\n    }\n\n    return this.getReachability().gatherReachability();\n  }\n\n  /**\n     * Get geoHint for info for meetings\n     * @returns {Promise}\n     * @private\n     * @memberof Meetings\n     */\n  getGeoHint() {\n    return this.request.fetchGeoHint().then((res) => {\n      this.geoHintInfo = res;\n    });\n  }\n\n  /**\n     * Fetch user preferred webex site information\n     * This also has other infomation about the user\n     * @returns {Promise}\n     * @private\n     * @memberof Meetings\n     */\n  fetchUserPreferredWebexSite() {\n    return this.request.getMeetingPreferences().then((res) => {\n      if (res) {\n        this.preferredWebexSite = MeetingsUtil.parseDefaultSiteFromMeetingPreferences(res);\n      }\n    });\n  }\n\n\n  /**\n     * gets the personal meeting room instance, for saved PMR values for this user\n     * @returns {PersonalMeetingRoom}\n     * @public\n     * @memberof Meetings\n     */\n\n  getPersonalMeetingRoom() {\n    return this.personalMeetingRoom;\n  }\n\n  /**\n     * @param {Meeting} meeting\n     * @param {Object} reason\n     * @param {String} type\n     * @returns {Undefined}\n     * @private\n     * @memberof Meetings\n     */\n  destroy(meeting, reason) {\n    MeetingUtil.cleanUp(meeting);\n    this.meetingCollection.delete(meeting.id);\n    Trigger.trigger(\n      this,\n      {\n        file: 'meetings',\n        function: 'destroy'\n      },\n      EVENT_TRIGGERS.MEETING_REMOVED,\n      {\n        meetingId: meeting.id,\n        reason\n      }\n    );\n  }\n\n  /**\n     * Create a meeting.\n     * @param {string} destination - sipURL, spaceId, phonenumber, or locus object}\n     * @param {string} [type] - the optional specified type, such as locusId\n     * @param {Boolean} useRandomDelayForInfo - whether a random delay should be added to fetching meeting info\n     * @returns {Promise<Meeting>} A new Meeting.\n     * @public\n     * @memberof Meetings\n     */\n  create(destination, type = null, useRandomDelayForInfo = false) {\n    // TODO: type should be from a dictionary\n\n    // Validate meeting information based on the provided destination and\n    // type. This must be performed prior to determining if the meeting is\n    // found in the collection, as we mutate the destination for hydra person\n    // id values.\n    return this.meetingInfo.fetchInfoOptions(destination, type)\n    // Catch a failure to fetch info options.\n      .catch((error) => {\n        LoggerProxy.logger.info(`Meetings:index#create --> INFO, unable to determine info options: ${error.message}`);\n      })\n      .then((options = {}) => {\n        // Normalize the destination.\n        const targetDest = options.destination || destination;\n\n        // check for the conversation URL then sip Url\n        let meeting = null;\n\n        if (type === _CONVERSATION_URL_ || options.type === _CONVERSATION_URL_) {\n          const foundMeeting = this.meetingCollection.getByKey(CONVERSATION_URL, targetDest);\n\n          if (foundMeeting) {\n            const foundMeetingIsNotCalendarMeeting = !foundMeeting.locusInfo.scheduledMeeting;\n\n            // If the found meeting is not a calendar meeting, return that meeting.\n            // This allows for the creation of instant-meetings when calendar meetings are present.\n            if (foundMeetingIsNotCalendarMeeting) {\n              meeting = foundMeeting;\n            }\n          }\n        }\n\n        // Attempt to collect the meeting if it exists.\n        if (!meeting) {\n          meeting = this.meetingCollection.getByKey(SIP_URI, targetDest);\n        }\n\n        // Validate if a meeting was found.\n        if (!meeting) {\n          // Create a meeting based on the normalized destination and type.\n          return this.createMeeting(targetDest, type, useRandomDelayForInfo)\n            .then((createdMeeting) => {\n              // If the meeting was successfully created.\n              if (createdMeeting && createdMeeting.on) {\n                // Create a destruction event for the meeting.\n                createdMeeting.on(EVENTS.DESTROY_MEETING, (payload) => {\n                  if (this.config.autoUploadLogs) {\n                    this.uploadLogs({\n                      callStart: createdMeeting.locusInfo?.fullState?.lastActive,\n                      correlationId: createdMeeting.correlationId,\n                      feedbackId: createdMeeting.correlationId,\n                      locusId: createdMeeting.locusId,\n                      meetingId: createdMeeting.locusInfo?.info?.webExMeetingId\n                    }).then(() => this.destroy(createdMeeting, payload.reason));\n                  }\n                  else {\n                    this.destroy(createdMeeting, payload.reason);\n                  }\n                });\n\n                createdMeeting.on(EVENTS.REQUEST_UPLOAD_LOGS, (meetingInstance) => {\n                  if (this.config.autoUploadLogs) {\n                    this.uploadLogs({\n                      callStart: meetingInstance?.locusInfo?.fullState?.lastActive,\n                      correlationId: meetingInstance.correlationId,\n                      feedbackId: meetingInstance.correlationId,\n                      locusId: meetingInstance.locusId,\n                      meetingId: meetingInstance.locusInfo?.info?.webExMeetingId\n                    });\n                  }\n                });\n              }\n              else {\n                LoggerProxy.logger.error(`Meetings:index#create --> ERROR, meeting does not have on method, will not be destroyed, meeting cleanup impossible for meeting: ${meeting}`);\n              }\n\n              // Return the newly created meeting.\n              return Promise.resolve(createdMeeting);\n            });\n        }\n\n        // Return the existing meeting.\n        return Promise.resolve(meeting);\n      });\n  }\n\n  /**\n     * @param {String} destination see create()\n     * @param {String} type see create()\n     * @param {Boolean} useRandomDelayForInfo whether a random delay should be added to fetching meeting info\n     * @returns {Promise} a new meeting instance complete with meeting info and destination\n     * @private\n     * @memberof Meetings\n     */\n  async createMeeting(destination, type = null, useRandomDelayForInfo = false) {\n    const meeting = new Meeting(\n      {\n        userId: this.webex.internal.device.userId,\n        deviceUrl: this.webex.internal.device.url,\n        orgId: this.webex.internal.device.orgId,\n        roapSeq: 0,\n        locus: type === _LOCUS_ID_ ? destination : null, // pass the locus object if present\n        meetingInfoProvider: this.meetingInfo,\n        destination,\n        destinationType: type,\n      },\n      {\n        parent: this.webex\n      }\n    );\n\n    this.meetingCollection.set(meeting);\n\n    try {\n      // if no participant has joined the scheduled meeting (meaning meeting is not active) and we get a locusEvent,\n      // it means the meeting will start in 5-6 min. In that case, we want to fetchMeetingInfo\n      // between 5 and 2 min (random between 3 minutes) before the meeting starts\n      // to avoid a spike in traffic to the wbxappi service\n      let waitingTime = 0;\n\n      if (destination.meeting) {\n        const {startTime} = destination.meeting;\n        const startTimeDate = new Date(startTime);\n        const startTimeDatestamp = startTimeDate.getTime();\n        const timeToStart = startTimeDatestamp - Date.now();\n        const maxWaitingTime = Math.max(Math.min(timeToStart, MAX_RANDOM_DELAY_FOR_MEETING_INFO), 0);\n\n        waitingTime = Math.round(Math.random() * maxWaitingTime);\n      }\n      const isMeetingActive = !!destination.fullState?.active;\n      const {enableUnifiedMeetings} = this.config.experimental;\n\n      if (enableUnifiedMeetings && !isMeetingActive && useRandomDelayForInfo && waitingTime > 0) {\n        meeting.fetchMeetingInfoTimeoutId = setTimeout(() => meeting.fetchMeetingInfo({}), waitingTime);\n        meeting.parseMeetingInfo(undefined, destination);\n      }\n      else {\n        await meeting.fetchMeetingInfo({});\n      }\n    }\n    catch (err) {\n      if (!(err instanceof CaptchaError) && !(err instanceof PasswordError)) {\n        // if there is no meeting info we assume its a 1:1 call or wireless share\n        LoggerProxy.logger.info(`Meetings:index#createMeeting --> Info Unable to fetch meeting info for ${destination}.`);\n        LoggerProxy.logger.info('Meetings:index#createMeeting --> Info assuming this destination is a 1:1 or wireless share');\n      }\n      LoggerProxy.logger.debug(`Meetings:index#createMeeting --> Debug ${err} fetching /meetingInfo for creation.`);\n    }\n    finally {\n      // For type LOCUS_ID we need to parse the locus object to get the information\n      // about the caller and callee\n      // Meeting Added event will be created in `handleLocusEvent`\n      if (type !== _LOCUS_ID_) {\n        if (!meeting.sipUri) {\n          meeting.setSipUri(destination);\n        }\n\n        // TODO: check if we have to move this to parser\n        const meetingAddedType = MeetingsUtil.getMeetingAddedType(type);\n\n        // We typically shouldn't need to trigger both and event and return a promise.\n        // Is this a special case? We want to make the public API usage as simple as possible.\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings',\n            function: 'createMeeting'\n          },\n          EVENT_TRIGGERS.MEETING_ADDED,\n          {\n            meeting,\n            type: meetingAddedType\n          }\n        );\n      }\n    }\n\n    return meeting;\n\n    // Create the meeting calling the necessary service endpoints.\n\n    // Internally, there are many more destinations:\n    //\n    // - locusID\n    // - meetingURL\n    // - globalMeetingID, e.g, *00*meetingID\n    // - meetingID\n    // - meetingURL\n    // - PSTN\n    // - phone number\n    //\n    // Our job is to determine the appropriate one\n    // and its corresponding service so that developers\n    // need only sipURL or spaceID to get a meeting\n    // and its ID, but have the option to use createWithType()\n    // and specify those types to get meetingInfo\n  }\n\n  /**\n     * get a specifc meeting given it's type matched to the value, i.e., locus url\n     * @param {String} type\n     * @param {Object} value\n     * @returns {Meeting}\n     * @public\n     * @memberof Meetings\n     */\n  getMeetingByType(type, value) {\n    return this.meetingCollection.getByKey(type, value);\n  }\n\n  /**\n     * Get all meetings.\n     * @param {object} options\n     * @param {object} options.startDate - get meetings after this start date\n     * @param {object} options.endDate - get meetings before this end date\n     * @returns {Object} All currently active meetings.\n     * @public\n     * @memberof Meetings\n     */\n  getAllMeetings(options = {}) {\n    // Options may include other parameters to filter this collection\n    // of meetings.\n    return this.meetingCollection.getAll(options);\n  }\n\n  /**\n     * syncs all the meeting from server\n     * @returns {undefined}\n     * @public\n     * @memberof Meetings\n     */\n  syncMeetings() {\n    return this.request.getActiveMeetings().then((locusArray) => {\n      const activeLocusUrl = [];\n\n      if (locusArray?.loci && locusArray.loci.length > 0) {\n        locusArray.loci.forEach((locus) => {\n          activeLocusUrl.push(locus.url);\n          this.handleLocusEvent({\n            locus,\n            locusUrl: locus.url\n          });\n        });\n      }\n      const meetingsCollection = this.meetingCollection.getAll();\n\n      if (Object.keys(meetingsCollection).length > 0) {\n        // Some time the mercury event is missed after mercury reconnect\n        // if sync returns no locus then clear all the meetings\n        for (const meeting of Object.values(meetingsCollection)) {\n          if (!activeLocusUrl.includes(meeting.locusUrl)) {\n            // destroy function also uploads logs\n            this.destroy(meeting, MEETING_REMOVED_REASON.NO_MEETINGS_TO_SYNC);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n     * Get all scheduled meetings.\n     * @param {object} options\n     * @param {object} options.startDate - get meetings after this start date\n     * @param {object} options.endDate - get meetings before this end date\n     * @returns {Object} All scheduled meetings.\n     * @memberof Meetings\n     */\n  getScheduledMeetings() {\n    return this.meetingCollection.getAll({scheduled: true});\n  }\n\n  /**\n     * Get the logger instance for plugin-meetings\n     * @returns {Logger}\n     */\n  getLogger() {\n    return LoggerProxy.get();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAwBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;IACqBA,Q;;;;;EAGnB;AACF;AACA;AACA;AACA;AACA;EACE,oBAAqB;IAAA;;IAAA;;IAAA,kCAANC,IAAM;MAANA,IAAM;IAAA;;IACnB,gDAASA,IAAT;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IATuB,wFARTC,mBAQS;IAUnB,MAAKC,OAAL,GAAe,IAAIC,iBAAJ,CAAY,EAAZ,EAAgB;MAACC,MAAM,EAAE,MAAKC;IAAd,CAAhB,CAAf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,aAAL,GAAqB,IAAIC,gBAAJ,CAAkB;MAACF,KAAK,EAAE,MAAKA;IAAb,CAAlB,CAArB;IACA,MAAKG,iBAAL,GAAyB,IAAIC,mBAAJ,EAAzB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,mBAAL,GAA2B,IAA3B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,YAAL,GAAoB,IAApB;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,UAAL,GAAkB,KAAlB;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,kBAAL,GAA0B,EAA1B;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,KAAL,GAAa;MACXC,YAAY,EAAEC,cAAA,CAAMD,YADT;MAEXE,kBAAkB,EAAED,cAAA,CAAMC;IAFf,CAAb;;IAKA,MAAKC,OAAL;;IArEmB;EAsEpB;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,0BAAiBC,IAAjB,EAAsD;MAAA;MAAA;MAAA;MAAA;;MAAA,IAA/BC,qBAA+B,uEAAP,KAAO;MACpD,IAAIC,OAAO,GAAG,IAAd,CADoD,CAGpD;MACA;MACA;;MACAA,OAAO,GAAG,KAAKb,iBAAL,CAAuBc,QAAvB,CAAgCC,oBAAhC,EAA2CJ,IAAI,CAACK,QAAhD,KACR,KAAKhB,iBAAL,CAAuBc,QAAvB,CAAgCG,yBAAhC,EAAgDC,cAAA,CAAaC,qBAAb,CAAmC,KAAKtB,KAAL,CAAWuB,QAAX,CAAoBC,MAApB,CAA2BC,GAA9D,EAAmEX,IAAI,CAACY,KAAxE,CAAhD,CADQ,IAER,KAAKvB,iBAAL,CAAuBc,QAAvB,CAAgCU,kBAAhC,EAAyCb,IAAI,CAACY,KAAL,CAAWE,IAAX,IAAmBd,IAAI,CAACY,KAAL,CAAWE,IAAX,CAAgBC,YAAnC,IAAmDf,IAAI,CAACY,KAAL,CAAWE,IAAX,CAAgBC,YAAhB,CAA6BC,eAAzH,CAFQ,KAGP,oBAAAhB,IAAI,CAACY,KAAL,CAAWK,IAAX,8DAAiBC,qBAAjB,GAAyCC,SAAzC,GAAqD,KAAK9B,iBAAL,CAAuBc,QAAvB,CAAgCiB,2BAAhC,EAAkDpB,IAAI,CAACY,KAAL,CAAWS,eAA7D,CAH9C,CAAV,CANoD,CAWpD;MACA;;MAEA,IAAI,CAACnB,OAAD,IAAY,gBAAAF,IAAI,CAACY,KAAL,oFAAYU,QAAZ,8EAAsBC,MAAtB,IAA+B,CAA/C,EAAkD;QAChD;QACArB,OAAO,GAAG,KAAKb,iBAAL,CAAuBc,QAAvB,CAAgCC,oBAAhC,EAA2CJ,IAAI,CAACY,KAAL,CAAWU,QAAX,CAAoBtB,IAAI,CAACY,KAAL,CAAWU,QAAX,CAAoBC,MAApB,GAA6B,CAAjD,EAAoDlB,QAA/F,CAAV;MACD;;MAED,IAAI,CAACH,OAAL,EAAc;QACZ;QACA;QACA;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;QAEA;QACA;QAEA;QACA;QAEA,IAAIF,IAAI,CAACY,KAAL,IAAcZ,IAAI,CAACY,KAAL,CAAWY,SAAzB,IAAsCxB,IAAI,CAACY,KAAL,CAAWY,SAAX,CAAqBC,KAArB,KAA+BC,gBAAA,CAAMC,KAAN,CAAYC,QAArF,EAA+F;UAC7F;UACAC,oBAAA,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwB,2FAAxB;;UAEA;QACD,CAzBW,CA4BZ;QACA;;;QAEA,IAAI/B,IAAI,CAACY,KAAL,IAAcZ,IAAI,CAACY,KAAL,CAAWE,IAAzB,IAAkCd,IAAI,CAACY,KAAL,CAAWE,IAAX,CAAgBW,KAAhB,KAA0BO,iBAA1B,IAAoChC,IAAI,CAACY,KAAL,CAAWE,IAAX,CAAgBmB,OAAhB,KAA4B,IAAtG,EAA6G;UAC3G;UACAJ,oBAAA,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwB,2FAAxB;;UAEA;QACD;;QAED,KAAKG,MAAL,CAAYlC,IAAI,CAACY,KAAjB,EAAwBuB,qBAAxB,EAAoClC,qBAApC,EAA2DmC,IAA3D,CAAgE,UAACC,UAAD,EAAgB;UAC9EnC,OAAO,GAAGmC,UAAV,CAD8E,CAG9E;;UACAnC,OAAO,CAACoC,SAAR,CAAkBC,YAAlB,CAA+BvC,IAAI,CAACY,KAApC;QACD,CALD,EAKG4B,KALH,CAKS,UAACC,CAAD,EAAO;UACdC,OAAO,CAACC,GAAR,CAAYF,CAAZ;QACD,CAPD,EAQGG,OARH,CAQW,YAAM;UACb;UACA;UAEA,IAAI,MAAI,CAACC,gBAAL,CAAsBC,eAAtB,EAA4B5C,OAAO,CAAC6C,EAApC,CAAJ,EAA6C;YAC3CC,gBAAA,CAAQC,SAAR,CAAkB;cAACC,KAAK,EAAEC,iBAAA,CAAUC,cAAlB;cAAkClD,OAAO,EAAPA,OAAlC;cAA2CF,IAAI,EAAE;gBAACqD,OAAO,EAAEA,eAAA,CAAQC;cAAlB;YAAjD,CAAlB;;YACAC,qBAAA,CAAQF,OAAR,CACE,MADF,EAEE;cACEG,IAAI,EAAE,UADR;cAEEC,QAAQ,EAAE;YAFZ,CAFF,EAMEC,yBAAA,CAAeC,aANjB,EAOE;cACEzD,OAAO,EAAPA,OADF;cAEE0D,IAAI,EAAE1D,OAAO,CAAC0D,IAAR,KAAiBC,oBAAjB,GAA6BC,iBAA7B,GAAsCC;YAF9C,CAPF;UAYD,CAdD,MAeK;YACH;YACAlC,oBAAA,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwB,kGAAxB;UACD;QACF,CA/BH;MAgCD,CAtED,MAuEK;QACH7B,OAAO,CAACoC,SAAR,CAAkB0B,KAAlB,CAAwB9D,OAAxB,EAAiCF,IAAjC;MACD;IACF;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,4BAAmBiE,QAAnB,EAA6B;MAC3B,IAAOjE,IAAP,GAAeiE,QAAf,CAAOjE,IAAP;MACA,IAAOmD,SAAP,GAAoBnD,IAApB,CAAOmD,SAAP;;MAEA,IAAIA,SAAS,IAAIA,SAAS,KAAKe,qBAAA,CAAWC,YAA1C,EAAwD;QACtD,KAAKC,gBAAL,CAAsBpE,IAAtB,EAA4B,IAA5B;MACD;IACF;IAGD;AACF;AACA;AACA;AACA;AACA;;;;WACE,gCAAuB;MACrBuD,qBAAA,CAAQF,OAAR,CACE,IADF,EAEE;QACEG,IAAI,EAAE,gBADR;QAEEC,QAAQ,EAAE;MAFZ,CAFF,EAMEC,yBAAA,CAAeW,6BANjB;IAQD;IAGD;AACF;AACA;AACA;AACA;AACA;;;;WACE,2BAAkB;MAAA;;MAChB,KAAKnF,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4BC,EAA5B,CAA+BL,qBAAA,CAAWM,aAA1C,EAAyD,UAACP,QAAD,EAAc;QACrE,MAAI,CAACQ,kBAAL,CAAwBR,QAAxB;MACD,CAFD;MAGA,KAAK/E,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4BC,EAA5B,CAA+BG,eAAA,CAAKC,YAApC,EAAkD,UAACV,QAAD,EAAc;QAC9D1D,cAAA,CAAaqE,iBAAb,CAA+BX,QAA/B,EAAyC,MAAI,CAAC5E,iBAA9C;MACD,CAFD;MAIA,KAAKH,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4BC,EAA5B,CAA+BM,iBAA/B,EAAuC,YAAM;QAC3C,MAAI,CAACC,YAAL;MACD,CAFD;MAIA,KAAK5F,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4BC,EAA5B,CAA+BQ,kBAA/B,EAAwC,YAAM;QAC5C,MAAI,CAACC,oBAAL;MACD,CAFD;IAGD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,kCAAyB;MACvB,KAAK9F,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4BW,GAA5B,CAAgCf,qBAAA,CAAWM,aAA3C;MACA,KAAKtF,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4BW,GAA5B,CAAgCP,eAAA,CAAKC,YAArC;MACA,KAAKzF,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4BW,GAA5B,CAAgCJ,iBAAhC;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,mBAAU;MAAA;;MACR,KAAK3F,KAAL,CAAWgG,IAAX,CAAgBC,gBAAhB,EAAuB,YAAM;QAC3BC,gBAAA,CAAaC,GAAb,CAAiB,MAAI,CAACC,MAAtB;;QACAC,qBAAA,CAAaF,GAAb,CAAiB,MAAI,CAACC,MAAL,CAAYE,OAA7B;;QACA3D,oBAAA,CAAYwD,GAAZ,CAAgB,MAAI,CAACnG,KAAL,CAAW4C,MAA3B;QAEA;AACN;AACA;AACA;AACA;AACA;AACA;;;QACM,MAAI,CAAC2D,WAAL,GAAmB,MAAI,CAACH,MAAL,CAAYI,YAAZ,CAAyBC,qBAAzB,GAAiD,IAAIC,qBAAJ,CAAkB,MAAI,CAAC1G,KAAvB,CAAjD,GAAiF,IAAI2G,oBAAJ,CAAgB,MAAI,CAAC3G,KAArB,CAApG;QACA,MAAI,CAACK,mBAAL,GAA2B,IAAIuG,4BAAJ,CAAwB;UAACL,WAAW,EAAE,MAAI,CAACA;QAAnB,CAAxB,EAAyD;UAACxG,MAAM,EAAE,MAAI,CAACC;QAAd,CAAzD,CAA3B;;QAEAqE,qBAAA,CAAQF,OAAR,CACE,MADF,EAEE;UACEG,IAAI,EAAE,UADR;UAEEC,QAAQ,EAAE;QAFZ,CAFF,EAMEC,yBAAA,CAAeqC,cANjB;;QASAxF,cAAA,CAAayF,gBAAb,CAA8B;UAACC,oBAAoB,EAAE;QAAvB,CAA9B;;QACAjD,gBAAA,CAAQT,YAAR,CAAqB,MAAI,CAAClD,iBAA1B,EAA6C,MAAI,CAACH,KAAlD;MACD,CA1BD;IA2BD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,gCAAuBgH,WAAvB,EAAoC;MAAA;;MAClC,IAAI,OAAOA,WAAP,KAAuB,SAA3B,EAAsC;QACpC;MACD;;MACD,IAAI,sBAAKZ,MAAL,uFAAaI,YAAb,gFAA2BC,qBAA3B,MAAqDO,WAAzD,EAAsE;QACpE,KAAKZ,MAAL,CAAYI,YAAZ,CAAyBC,qBAAzB,GAAiDO,WAAjD;QACA,KAAKT,WAAL,GAAmBS,WAAW,GAAG,IAAIN,qBAAJ,CAAkB,KAAK1G,KAAvB,CAAH,GAAmC,IAAI2G,oBAAJ,CAAgB,KAAK3G,KAArB,CAAjE;MACD;IACF;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,8BAAqBiH,MAArB,EAA6B;MAC3B,IAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;QAC/B;MACD;;MACD,KAAKb,MAAL,CAAYI,YAAZ,CAAyBU,mBAAzB,GAA+CD,MAA/C;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,8BAAqBD,WAArB,EAAkC;MAAA;;MAChC,IAAI,OAAOA,WAAP,KAAuB,SAA3B,EAAsC;QACpC;MACD;;MACD,IAAI,uBAAKZ,MAAL,yFAAaI,YAAb,gFAA2BW,mBAA3B,MAAmDH,WAAvD,EAAoE;QAClE,KAAKZ,MAAL,CAAYI,YAAZ,CAAyBW,mBAAzB,GAA+CH,WAA/C;MACD;IACF;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,oBAAW;MAAA;;MACT,IAAI,CAAC,KAAKhH,KAAL,CAAWoH,YAAhB,EAA8B;QAC5BzE,oBAAA,CAAYC,MAAZ,CAAmByE,KAAnB,CAAyB,6EAAzB;;QAEA,OAAO,iBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,sBAAV,CAAf,CAAP;MACD;;MAGD,IAAI,KAAKhH,UAAT,EAAqB;QACnBoC,oBAAA,CAAYC,MAAZ,CAAmBb,IAAnB,CAAwB,sEAAxB;;QAEA,OAAO,iBAAQyF,OAAR,EAAP;MACD;;MAED,OAAO,iBAAQC,GAAR,CAAY,CACjB,KAAKC,2BAAL,EADiB,EAEjB,KAAKC,UAAL,EAFiB,EAGjB,KAAKC,iBAAL,GAAyBtE,KAAzB,CAA+B,UAAC+D,KAAD,EAAW;QACxC1E,oBAAA,CAAYC,MAAZ,CAAmByE,KAAnB,kDAAmEA,KAAK,CAACQ,OAAzE;MACD,CAFD,CAHiB,EAMjB,KAAK7H,KAAL,CAAWuB,QAAX,CAAoBC,MAApB,CAA2BsG,QAA3B,GACG5E,IADH,CACQ;QAAA,OAAMP,oBAAA,CAAYC,MAAZ,CAAmBb,IAAnB,+DAA+E,MAAI,CAAC/B,KAAL,CAAWuB,QAAX,CAAoBC,MAApB,CAA2BC,GAA1G,EAAN;MAAA,CADR,EAEGyB,IAFH,CAEQ;QAAA,OAAM,MAAI,CAAClD,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4B2C,OAA5B,EAAN;MAAA,CAFR,CANiB,EASjB1G,cAAA,CAAayF,gBAAb,CAA8BkB,IAA9B,CAAmC,IAAnC,CATiB,CAAZ,EAUJ9E,IAVI,CAUC,YAAM;QACZ,MAAI,CAAC+E,eAAL;;QACA5D,qBAAA,CAAQF,OAAR,CACE,MADF,EAEE;UACEG,IAAI,EAAE,UADR;UAEEC,QAAQ,EAAE;QAFZ,CAFF,EAMEC,yBAAA,CAAe0D,mBANjB;;QAQA,MAAI,CAAC3H,UAAL,GAAkB,IAAlB;;QACAuD,gBAAA,CAAQqE,oBAAR,CACEC,mBAAA,CAAmBC,6BADrB;MAGD,CAxBM,EAyBJ/E,KAzBI,CAyBE,UAAC+D,KAAD,EAAW;QAChB1E,oBAAA,CAAYC,MAAZ,CAAmByE,KAAnB,kEAAmFA,KAAK,CAACQ,OAAzF;;QAEA/D,gBAAA,CAAQqE,oBAAR,CACEC,mBAAA,CAAmBE,4BADrB,EAEE;UACEC,MAAM,EAAElB,KAAK,CAACQ,OADhB;UAEEW,KAAK,EAAEnB,KAAK,CAACmB;QAFf,CAFF;;QAQA,OAAO,iBAAQlB,MAAR,CAAeD,KAAf,CAAP;MACD,CArCI,CAAP;IAsCD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,sBAAa;MAAA;;MACX,IAAI,CAAC,KAAK9G,UAAV,EAAsB;QACpBoC,oBAAA,CAAYC,MAAZ,CAAmBb,IAAnB,CAAwB,0EAAxB;;QAEA,OAAO,iBAAQyF,OAAR,EAAP;MACD;;MAED,KAAKiB,sBAAL;MAEA,OAAO,KAAKzI,KAAL,CAAWuB,QAAX,CAAoB6D,OAApB,CAA4BsD,UAA5B,GACJxF,IADI,CACC;QAAA,OAAM,MAAI,CAAClD,KAAL,CAAWuB,QAAX,CAAoBC,MAApB,CAA2BmH,UAA3B,EAAN;MAAA,CADD,EAEJzF,IAFI,CAEC,YAAM;QACVmB,qBAAA,CAAQF,OAAR,CACE,MADF,EAEE;UACEG,IAAI,EAAE,UADR;UAEEC,QAAQ,EAAE;QAFZ,CAFF,EAMEC,yBAAA,CAAeoE,qBANjB;;QAQA,MAAI,CAACrI,UAAL,GAAkB,KAAlB;MACD,CAZI,CAAP;IAaD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,sBAAyB;MAAA;;MAAA,IAAdsI,OAAc,uEAAJ,EAAI;;MACvBlG,oBAAA,CAAYC,MAAZ,CAAmBb,IAAnB,CAAwB,8CAAxB;;MAEA,OAAO,KAAK9B,aAAL,CAAmB6I,UAAnB,CAA8BD,OAA9B,EACJ3F,IADI,CACC,UAAC6F,YAAD,EAAkB;QACtBpG,oBAAA,CAAYC,MAAZ,CAAmBb,IAAnB,CAAwB,kEAAxB,EAA4FgH,YAA5F;;QACA1E,qBAAA,CAAQF,OAAR,CACE,MADF,EAEE;UACEG,IAAI,EAAE,UADR;UAEEC,QAAQ,EAAE;QAFZ,CAFF,EAMEC,yBAAA,CAAewE,0BANjB,EAOE;UACEC,SAAS,EAAEJ,OAAO,CAACI,SADrB;UAEEC,OAAO,EAAEH;QAFX,CAPF;MAYD,CAfI,EAgBJzF,KAhBI,CAgBE,UAAC6F,WAAD,EAAiB;QACtBxG,oBAAA,CAAYC,MAAZ,CAAmByE,KAAnB,CAAyB,iEAAzB,EAA4F8B,WAA5F;;QACA9E,qBAAA,CAAQF,OAAR,CACE,MADF,EAEE;UACEG,IAAI,EAAE,UADR;UAEEC,QAAQ,EAAE;QAFZ,CAFF,EAMEC,yBAAA,CAAe4E,0BANjB,EAOE;UACEH,SAAS,EAAEJ,OAAO,CAACI,SADrB;UAEEV,MAAM,EAAEY;QAFV,CAPF;;QAaArF,gBAAA,CAAQqE,oBAAR,CACEC,mBAAA,CAAmBiB,mBADrB,EAEE;UACEJ,SAAS,EAAEJ,OAAO,CAACS,UADrB;UAEEf,MAAM,EAAEY,WAAW,CAACtB,OAFtB;UAGEW,KAAK,EAAEW,WAAW,CAACX,KAHrB;UAIEe,IAAI,EAAEJ,WAAW,CAACI;QAJpB,CAFF;MASD,CAxCI,CAAP;IAyCD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,2BAAkB;MAChB,KAAKjJ,YAAL,GAAoB,IAAIkJ,qBAAJ,CAAiB,KAAKxJ,KAAtB,CAApB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,2BAAkB;MAChB,OAAO,KAAKM,YAAZ;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,6BAAoB;MAClB,IAAI,CAAC,KAAKA,YAAV,EAAwB;QACtB,KAAKmJ,eAAL;MACD;;MAED,OAAO,KAAKC,eAAL,GAAuBC,kBAAvB,EAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,sBAAa;MAAA;;MACX,OAAO,KAAK9J,OAAL,CAAa+J,YAAb,GAA4B1G,IAA5B,CAAiC,UAAC2G,GAAD,EAAS;QAC/C,MAAI,CAACC,WAAL,GAAmBD,GAAnB;MACD,CAFM,CAAP;IAGD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,uCAA8B;MAAA;;MAC5B,OAAO,KAAKhK,OAAL,CAAakK,qBAAb,GAAqC7G,IAArC,CAA0C,UAAC2G,GAAD,EAAS;QACxD,IAAIA,GAAJ,EAAS;UACP,MAAI,CAACrJ,kBAAL,GAA0Ba,cAAA,CAAa2I,sCAAb,CAAoDH,GAApD,CAA1B;QACD;MACF,CAJM,CAAP;IAKD;IAGD;AACF;AACA;AACA;AACA;AACA;;;;WAEE,kCAAyB;MACvB,OAAO,KAAKxJ,mBAAZ;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,iBAAQW,OAAR,EAAiBuH,MAAjB,EAAyB;MACvB0B,aAAA,CAAYC,OAAZ,CAAoBlJ,OAApB;;MACA,KAAKb,iBAAL,CAAuBgK,MAAvB,CAA8BnJ,OAAO,CAAC6C,EAAtC;;MACAQ,qBAAA,CAAQF,OAAR,CACE,IADF,EAEE;QACEG,IAAI,EAAE,UADR;QAEEC,QAAQ,EAAE;MAFZ,CAFF,EAMEC,yBAAA,CAAe4F,eANjB,EAOE;QACEnB,SAAS,EAAEjI,OAAO,CAAC6C,EADrB;QAEE0E,MAAM,EAANA;MAFF,CAPF;IAYD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAO8B,WAAP,EAAgE;MAAA;;MAAA,IAA5C3F,IAA4C,uEAArC,IAAqC;MAAA,IAA/B3D,qBAA+B,uEAAP,KAAO;MAC9D;MAEA;MACA;MACA;MACA;MACA,OAAO,KAAKwF,WAAL,CAAiB+D,gBAAjB,CAAkCD,WAAlC,EAA+C3F,IAA/C,EACP;MADO,CAEJpB,KAFI,CAEE,UAAC+D,KAAD,EAAW;QAChB1E,oBAAA,CAAYC,MAAZ,CAAmBb,IAAnB,6EAA6FsF,KAAK,CAACQ,OAAnG;MACD,CAJI,EAKJ3E,IALI,CAKC,YAAkB;QAAA,IAAjB2F,OAAiB,uEAAP,EAAO;QACtB;QACA,IAAM0B,UAAU,GAAG1B,OAAO,CAACwB,WAAR,IAAuBA,WAA1C,CAFsB,CAItB;;QACA,IAAIrJ,OAAO,GAAG,IAAd;;QAEA,IAAI0D,IAAI,KAAK8F,6BAAT,IAA+B3B,OAAO,CAACnE,IAAR,KAAiB8F,6BAApD,EAAwE;UACtE,IAAMC,YAAY,GAAG,OAAI,CAACtK,iBAAL,CAAuBc,QAAvB,CAAgCiB,2BAAhC,EAAkDqI,UAAlD,CAArB;;UAEA,IAAIE,YAAJ,EAAkB;YAChB,IAAMC,gCAAgC,GAAG,CAACD,YAAY,CAACrH,SAAb,CAAuBuH,gBAAjE,CADgB,CAGhB;YACA;;YACA,IAAID,gCAAJ,EAAsC;cACpC1J,OAAO,GAAGyJ,YAAV;YACD;UACF;QACF,CAnBqB,CAqBtB;;;QACA,IAAI,CAACzJ,OAAL,EAAc;UACZA,OAAO,GAAG,OAAI,CAACb,iBAAL,CAAuBc,QAAvB,CAAgCU,kBAAhC,EAAyC4I,UAAzC,CAAV;QACD,CAxBqB,CA0BtB;;;QACA,IAAI,CAACvJ,OAAL,EAAc;UACZ;UACA,OAAO,OAAI,CAAC4J,aAAL,CAAmBL,UAAnB,EAA+B7F,IAA/B,EAAqC3D,qBAArC,EACJmC,IADI,CACC,UAAC2H,cAAD,EAAoB;YACxB;YACA,IAAIA,cAAc,IAAIA,cAAc,CAACxF,EAArC,EAAyC;cACvC;cACAwF,cAAc,CAACxF,EAAf,CAAkByF,iBAAA,CAAOC,eAAzB,EAA0C,UAACC,OAAD,EAAa;gBACrD,IAAI,OAAI,CAAC5E,MAAL,CAAY6E,cAAhB,EAAgC;kBAAA;;kBAC9B,OAAI,CAACnC,UAAL,CAAgB;oBACdoC,SAAS,2BAAEL,cAAc,CAACzH,SAAjB,oFAAE,sBAA0Bd,SAA5B,2DAAE,uBAAqC6I,UADlC;oBAEdC,aAAa,EAAEP,cAAc,CAACO,aAFhB;oBAGdC,UAAU,EAAER,cAAc,CAACO,aAHb;oBAIdE,OAAO,EAAET,cAAc,CAACS,OAJV;oBAKdrC,SAAS,4BAAE4B,cAAc,CAACzH,SAAjB,qFAAE,uBAA0BrB,IAA5B,2DAAE,uBAAgCwJ;kBAL7B,CAAhB,EAMGrI,IANH,CAMQ;oBAAA,OAAM,OAAI,CAACsI,OAAL,CAAaX,cAAb,EAA6BG,OAAO,CAACzC,MAArC,CAAN;kBAAA,CANR;gBAOD,CARD,MASK;kBACH,OAAI,CAACiD,OAAL,CAAaX,cAAb,EAA6BG,OAAO,CAACzC,MAArC;gBACD;cACF,CAbD;cAeAsC,cAAc,CAACxF,EAAf,CAAkByF,iBAAA,CAAOW,mBAAzB,EAA8C,UAACC,eAAD,EAAqB;gBACjE,IAAI,OAAI,CAACtF,MAAL,CAAY6E,cAAhB,EAAgC;kBAAA;;kBAC9B,OAAI,CAACnC,UAAL,CAAgB;oBACdoC,SAAS,EAAEQ,eAAF,aAAEA,eAAF,gDAAEA,eAAe,CAAEtI,SAAnB,oFAAE,sBAA4Bd,SAA9B,2DAAE,uBAAuC6I,UADpC;oBAEdC,aAAa,EAAEM,eAAe,CAACN,aAFjB;oBAGdC,UAAU,EAAEK,eAAe,CAACN,aAHd;oBAIdE,OAAO,EAAEI,eAAe,CAACJ,OAJX;oBAKdrC,SAAS,4BAAEyC,eAAe,CAACtI,SAAlB,qFAAE,uBAA2BrB,IAA7B,2DAAE,uBAAiCwJ;kBAL9B,CAAhB;gBAOD;cACF,CAVD;YAWD,CA5BD,MA6BK;cACH5I,oBAAA,CAAYC,MAAZ,CAAmByE,KAAnB,4IAA6JrG,OAA7J;YACD,CAjCuB,CAmCxB;;;YACA,OAAO,iBAAQwG,OAAR,CAAgBqD,cAAhB,CAAP;UACD,CAtCI,CAAP;QAuCD,CApEqB,CAsEtB;;;QACA,OAAO,iBAAQrD,OAAR,CAAgBxG,OAAhB,CAAP;MACD,CA7EI,CAAP;IA8ED;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;mGACE,iBAAoBqJ,WAApB;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAiC3F,IAAjC,2DAAwC,IAAxC;gBAA8C3D,qBAA9C,2DAAsE,KAAtE;gBACQC,OADR,GACkB,IAAI2K,gBAAJ,CACd;kBACEC,MAAM,EAAE,KAAK5L,KAAL,CAAWuB,QAAX,CAAoBC,MAApB,CAA2BoK,MADrC;kBAEEC,SAAS,EAAE,KAAK7L,KAAL,CAAWuB,QAAX,CAAoBC,MAApB,CAA2BC,GAFxC;kBAGEqK,KAAK,EAAE,KAAK9L,KAAL,CAAWuB,QAAX,CAAoBC,MAApB,CAA2BsK,KAHpC;kBAIEC,OAAO,EAAE,CAJX;kBAKErK,KAAK,EAAEgD,IAAI,KAAKzB,qBAAT,GAAsBoH,WAAtB,GAAoC,IAL7C;kBAKmD;kBACjD2B,mBAAmB,EAAE,KAAKzF,WAN5B;kBAOE8D,WAAW,EAAXA,WAPF;kBAQE4B,eAAe,EAAEvH;gBARnB,CADc,EAWd;kBACE3E,MAAM,EAAE,KAAKC;gBADf,CAXc,CADlB;gBAiBE,KAAKG,iBAAL,CAAuBgG,GAAvB,CAA2BnF,OAA3B;gBAjBF;gBAoBI;gBACA;gBACA;gBACA;gBACIkL,WAxBR,GAwBsB,CAxBtB;;gBA0BI,IAAI7B,WAAW,CAACrJ,OAAhB,EAAyB;kBAChBmL,SADgB,GACH9B,WAAW,CAACrJ,OADT,CAChBmL,SADgB;kBAEjBC,aAFiB,GAED,IAAIC,IAAJ,CAASF,SAAT,CAFC;kBAGjBG,kBAHiB,GAGIF,aAAa,CAACG,OAAd,EAHJ;kBAIjBC,WAJiB,GAIHF,kBAAkB,GAAG,mBAJlB;kBAKjBG,cALiB,GAKAC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASJ,WAAT,EAAsBK,4CAAtB,CAAT,EAAmE,CAAnE,CALA;kBAOvBX,WAAW,GAAGQ,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,MAAL,KAAgBN,cAA3B,CAAd;gBACD;;gBACKO,eAnCV,GAmC4B,CAAC,2BAAC3C,WAAW,CAAC/H,SAAb,kDAAC,sBAAuB2K,MAAxB,CAnC7B;gBAoCWxG,qBApCX,GAoCoC,KAAKL,MAAL,CAAYI,YApChD,CAoCWC,qBApCX;;gBAAA,MAsCQA,qBAAqB,IAAI,CAACuG,eAA1B,IAA6CjM,qBAA7C,IAAsEmL,WAAW,GAAG,CAtC5F;kBAAA;kBAAA;gBAAA;;gBAuCMlL,OAAO,CAACkM,yBAAR,GAAoCC,UAAU,CAAC;kBAAA,OAAMnM,OAAO,CAACoM,gBAAR,CAAyB,EAAzB,CAAN;gBAAA,CAAD,EAAqClB,WAArC,CAA9C;gBACAlL,OAAO,CAACqM,gBAAR,CAAyBpL,SAAzB,EAAoCoI,WAApC;gBAxCN;gBAAA;;cAAA;gBAAA;gBAAA,OA2CYrJ,OAAO,CAACoM,gBAAR,CAAyB,EAAzB,CA3CZ;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;gBA+CI,IAAI,EAAE,uBAAeE,qBAAjB,KAAkC,EAAE,uBAAeC,sBAAjB,CAAtC,EAAuE;kBACrE;kBACA5K,oBAAA,CAAYC,MAAZ,CAAmBb,IAAnB,kFAAkGsI,WAAlG;;kBACA1H,oBAAA,CAAYC,MAAZ,CAAmBb,IAAnB,CAAwB,4FAAxB;gBACD;;gBACDY,oBAAA,CAAYC,MAAZ,CAAmB4K,KAAnB;;cApDJ;gBAAA;;gBAuDI;gBACA;gBACA;gBACA,IAAI9I,IAAI,KAAKzB,qBAAb,EAAyB;kBACvB,IAAI,CAACjC,OAAO,CAACyM,MAAb,EAAqB;oBACnBzM,OAAO,CAAC0M,SAAR,CAAkBrD,WAAlB;kBACD,CAHsB,CAKvB;;;kBACMsD,gBANiB,GAMEtM,cAAA,CAAauM,mBAAb,CAAiClJ,IAAjC,CANF,EAQvB;kBACA;;kBACAL,qBAAA,CAAQF,OAAR,CACE,IADF,EAEE;oBACEG,IAAI,EAAE,UADR;oBAEEC,QAAQ,EAAE;kBAFZ,CAFF,EAMEC,yBAAA,CAAeC,aANjB,EAOE;oBACEzD,OAAO,EAAPA,OADF;oBAEE0D,IAAI,EAAEiJ;kBAFR,CAPF;gBAYD;;gBAhFL;;cAAA;gBAAA,iCAmFS3M,OAnFT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAwGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAAiB0D,IAAjB,EAAuBmJ,KAAvB,EAA8B;MAC5B,OAAO,KAAK1N,iBAAL,CAAuBc,QAAvB,CAAgCyD,IAAhC,EAAsCmJ,KAAtC,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAA6B;MAAA,IAAdhF,OAAc,uEAAJ,EAAI;MAC3B;MACA;MACA,OAAO,KAAK1I,iBAAL,CAAuB2N,MAAvB,CAA8BjF,OAA9B,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wBAAe;MAAA;;MACb,OAAO,KAAKhJ,OAAL,CAAakO,iBAAb,GAAiC7K,IAAjC,CAAsC,UAAC8K,UAAD,EAAgB;QAC3D,IAAMC,cAAc,GAAG,EAAvB;;QAEA,IAAID,UAAU,SAAV,IAAAA,UAAU,WAAV,IAAAA,UAAU,CAAEE,IAAZ,IAAoBF,UAAU,CAACE,IAAX,CAAgB7L,MAAhB,GAAyB,CAAjD,EAAoD;UAClD2L,UAAU,CAACE,IAAX,CAAgBC,OAAhB,CAAwB,UAACzM,KAAD,EAAW;YACjCuM,cAAc,CAACG,IAAf,CAAoB1M,KAAK,CAACD,GAA1B;;YACA,OAAI,CAACyD,gBAAL,CAAsB;cACpBxD,KAAK,EAALA,KADoB;cAEpBP,QAAQ,EAAEO,KAAK,CAACD;YAFI,CAAtB;UAID,CAND;QAOD;;QACD,IAAM4M,kBAAkB,GAAG,OAAI,CAAClO,iBAAL,CAAuB2N,MAAvB,EAA3B;;QAEA,IAAI,mBAAYO,kBAAZ,EAAgChM,MAAhC,GAAyC,CAA7C,EAAgD;UAC9C;UACA;UACA,kCAAsB,qBAAcgM,kBAAd,CAAtB,oCAAyD;YAApD,IAAMrN,OAAO,qBAAb;;YACH,IAAI,CAACiN,cAAc,CAACK,QAAf,CAAwBtN,OAAO,CAACG,QAAhC,CAAL,EAAgD;cAC9C;cACA,OAAI,CAACqK,OAAL,CAAaxK,OAAb,EAAsBuN,iCAAA,CAAuBC,mBAA7C;YACD;UACF;QACF;MACF,CAxBM,CAAP;IAyBD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gCAAuB;MACrB,OAAO,KAAKrO,iBAAL,CAAuB2N,MAAvB,CAA8B;QAACW,SAAS,EAAE;MAAZ,CAA9B,CAAP;IACD;IAED;AACF;AACA;AACA;;;;WACE,qBAAY;MACV,OAAO9L,oBAAA,CAAY+L,GAAZ,EAAP;IACD;;;EA92BmCC,sB"}