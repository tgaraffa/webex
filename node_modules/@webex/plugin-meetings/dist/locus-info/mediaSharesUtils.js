"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _constants = require("../constants");

var MediaSharesUtils = {};
/**
 * parses the relevant values for mediaShares: contentId, disposition
 * @param {Object} mediaShares
 * @returns {undefined}
 */

MediaSharesUtils.parse = function (mediaShares) {
  if (mediaShares) {
    return {
      content: {
        beneficiaryId: MediaSharesUtils.getContentBeneficiaryId(mediaShares),
        disposition: MediaSharesUtils.getContentDisposition(mediaShares)
      },
      whiteboard: {
        beneficiaryId: MediaSharesUtils.getWhiteboardBeneficiaryId(mediaShares),
        disposition: MediaSharesUtils.getWhiteboardDisposition(mediaShares),
        resourceUrl: MediaSharesUtils.getWhiteboardResourceUrl(mediaShares)
      }
    };
  }

  return null;
};
/**
 * get the previous and current mediaShares values parsed, as well as the boolean updates
 * @param {Object} oldShare
 * @param {Object} newShare
 * @returns {Object}
 * previous: {Object} old share, current: {Object} new share,
 */


MediaSharesUtils.getMediaShares = function (oldShare, newShare) {
  var previous = oldShare && MediaSharesUtils.parse(oldShare);
  var current = newShare && MediaSharesUtils.parse(newShare);
  return {
    previous: previous,
    current: current
  };
};
/**
 * get the content floor disposition (released, granted)
 * @param {Object} mediaShares
 * @returns {Boolean} disposition
 */


MediaSharesUtils.getContentDisposition = function (mediaShares) {
  var contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);
  return contentFloor ? contentFloor.disposition : null;
};
/**
 * get the whiteboard floor disposition (released, granted)
 * @param {Object} mediaShares
 * @returns {Boolean} disposition
 */


MediaSharesUtils.getWhiteboardDisposition = function (mediaShares) {
  var whiteboardFloor = MediaSharesUtils.extractWhiteboardFloor(mediaShares);
  return whiteboardFloor ? whiteboardFloor.disposition : null;
};
/**
 * extract the content property from media shares
 * @param {Object} mediaShares
 * @returns {Object}
 */


MediaSharesUtils.extractContent = function (mediaShares) {
  if (!mediaShares || !mediaShares.length) {
    return null;
  }

  return mediaShares.find(function (share) {
    return share.name === _constants.CONTENT;
  }) || null;
};
/**
 * extract the whiteboard property from media shares
 * @param {Object} mediaShares
 * @returns {Object}
 */


MediaSharesUtils.extractWhiteboard = function (mediaShares) {
  if (!mediaShares || !mediaShares.length) {
    return null;
  }

  return mediaShares.find(function (share) {
    return share.name === _constants.WHITEBOARD;
  }) || null;
};
/**
 * extract the media stream floor property from content object
 * @param {Object} mediaStream
 * @returns {Object}
 */


MediaSharesUtils.extractFloor = function (mediaStream) {
  if (!mediaStream) {
    return null;
  }

  return mediaStream.floor;
};
/**
 * extract the content's floor from media shares
 * @param {Object} mediaShares
 * @returns {Object}
 */


MediaSharesUtils.extractContentFloor = function (mediaShares) {
  var content = MediaSharesUtils.extractContent(mediaShares);
  return MediaSharesUtils.extractFloor(content);
};
/**
 * extract the whiteboard's floor from media shares
 * @param {Object} mediaShares
 * @returns {Object}
 */


MediaSharesUtils.extractWhiteboardFloor = function (mediaShares) {
  var whiteboard = MediaSharesUtils.extractWhiteboard(mediaShares);
  return MediaSharesUtils.extractFloor(whiteboard);
};
/**
 * get who is sharing from media shares (content)
 * @param {Object} mediaShares
 * @returns {Object}
 */


MediaSharesUtils.getContentBeneficiaryId = function (mediaShares) {
  var contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);

  if (!contentFloor || !contentFloor.beneficiary) {
    return null;
  }

  return contentFloor.beneficiary.id;
};
/**
 * get who is sharing from media shares (whiteboard)
 * @param {Object} mediaShares
 * @returns {Object}
 */


MediaSharesUtils.getWhiteboardBeneficiaryId = function (mediaShares) {
  var whiteboardFloor = MediaSharesUtils.extractWhiteboardFloor(mediaShares);

  if (!whiteboardFloor || !whiteboardFloor.beneficiary) {
    return null;
  }

  return whiteboardFloor.beneficiary.id;
};
/**
 * get the which whiteboard is being shared via resource url
 * @param {Object} mediaShares
 * @returns {Object}
 */


MediaSharesUtils.getWhiteboardResourceUrl = function (mediaShares) {
  var whiteboard = MediaSharesUtils.extractWhiteboard(mediaShares);

  if (!whiteboard || !whiteboard.resourceUrl) {
    return null;
  }

  return whiteboard.resourceUrl;
};

var _default = MediaSharesUtils;
exports.default = _default;
//# sourceMappingURL=mediaSharesUtils.js.map
