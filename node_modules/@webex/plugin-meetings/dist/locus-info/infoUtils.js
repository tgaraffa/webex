"use strict";

var _Object$keys2 = require("@babel/runtime-corejs2/core-js/object/keys");

var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");

var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors");

var _Object$defineProperties = require("@babel/runtime-corejs2/core-js/object/define-properties");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _constants = require("../constants");

function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }

var InfoUtils = {};

InfoUtils.parse = function (info, roles) {
  var isJoined = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var parsed = {
    policy: InfoUtils.parsePolicy(info),
    moderator: InfoUtils.parseModerator(info),
    coHost: InfoUtils.parseCoHost(info)
  };
  var userDisplayHints = isJoined ? _objectSpread({}, parsed.policy) : {};

  if (roles.includes(_constants.SELF_ROLES.COHOST)) {
    userDisplayHints = _objectSpread(_objectSpread({}, userDisplayHints), parsed.coHost);
  }

  if (roles.includes(_constants.SELF_ROLES.MODERATOR)) {
    userDisplayHints = _objectSpread(_objectSpread({}, userDisplayHints), parsed.moderator);
  }

  parsed.userDisplayHints = (0, _keys.default)(userDisplayHints);

  if (info.sipUri) {
    parsed.sipUri = info.sipUri;
  }

  if (info.meetingId) {
    parsed.meetingNumber = info.meetingId;
  }

  return parsed;
};

InfoUtils.parseDisplayHintSection = function (info, displayHintKey) {
  var displayHints = {};

  if (info && info.displayHints && info.displayHints[displayHintKey] && info.displayHints[displayHintKey].length > 0) {
    info.displayHints[displayHintKey].forEach(function (key) {
      displayHints[key] = true;
    });
  }

  return displayHints;
};

InfoUtils.parsePolicy = function (info) {
  return InfoUtils.parseDisplayHintSection(info, 'joined');
};

InfoUtils.parseModerator = function (info) {
  var displayHints = InfoUtils.parseDisplayHintSection(info, 'moderator');
  return _objectSpread(_objectSpread({}, displayHints), {}, (0, _defineProperty2.default)({}, _constants.DISPLAY_HINTS.LOWER_SOMEONE_ELSES_HAND, true));
};

InfoUtils.parseCoHost = function (info) {
  var displayHints = InfoUtils.parseDisplayHintSection(info, 'coHost');
  return _objectSpread(_objectSpread({}, displayHints), {}, (0, _defineProperty2.default)({}, _constants.DISPLAY_HINTS.LOWER_SOMEONE_ELSES_HAND, true));
};

InfoUtils.isLocked = function (policy) {
  return policy.LOCK_STATUS_LOCKED || false;
};

InfoUtils.isUnlocked = function (policy) {
  return policy.LOCK_STATUS_UNLOCKED || false;
};

InfoUtils.getInfos = function (oldInfo, newInfo, roles, isJoined) {
  var previous = null;

  if (oldInfo) {
    previous = oldInfo;
  }

  var current = newInfo && InfoUtils.parse(newInfo, roles, isJoined);
  var updates = {};

  if (current) {
    current.isLocked = InfoUtils.isLocked(current.policy);
    current.isUnlocked = InfoUtils.isUnlocked(current.policy);

    if (previous && previous.isUnlocked && current.isLocked || !previous && current.isLocked) {
      updates.isLocked = current.isLocked;
    }

    if (previous && previous.isLocked && current.isUnlocked || !previous && current.isUnlocked) {
      updates.isUnlocked = current.isUnlocked;
    }
  }

  return {
    previous: previous,
    current: current,
    updates: updates
  };
};

var _default = InfoUtils;
exports.default = _default;
//# sourceMappingURL=infoUtils.js.map
