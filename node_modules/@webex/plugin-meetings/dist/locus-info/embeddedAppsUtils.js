"use strict";

var _Object$keys = require("@babel/runtime-corejs2/core-js/object/keys");

var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");

var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors");

var _Object$defineProperties = require("@babel/runtime-corejs2/core-js/object/define-properties");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _constants = require("../constants");

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }

var EmbeddedAppsUtils = {};
var SLIDO_REGEX = /.sli.do\//;
/**
 * Parse the relevant values that we care about
 * @param {Object} embeddedApp - raw embedded app object
 * @returns {Object} parsedObject - parsed embedded app object
 */

EmbeddedAppsUtils.parseApp = function (embeddedApp) {
  var _parsedApp$instanceIn;

  var parsedApp = _objectSpread({}, embeddedApp);

  parsedApp.type = _constants.EMBEDDED_APP_TYPES.OTHER;
  var url = (_parsedApp$instanceIn = parsedApp.instanceInfo) === null || _parsedApp$instanceIn === void 0 ? void 0 : _parsedApp$instanceIn.appInstanceUrl;

  if (url && url.match(SLIDO_REGEX)) {
    parsedApp.type = _constants.EMBEDDED_APP_TYPES.SLIDO;
  }

  return parsedApp;
};
/**
 * Determines if two embedded apps arrays are similar.
 * NOTE: This is a simple test for performance reasons.
 * @param {any[]} apps1 - an array of apps
 * @param {any[]} apps2 - an array of apps
 * @returns {boolean} true if the arrays are different
 */


EmbeddedAppsUtils.areSimilar = function (apps1, apps2) {
  var _apps1$, _apps2$;

  if ((apps1 === null || apps1 === void 0 ? void 0 : apps1.length) !== (apps2 === null || apps2 === void 0 ? void 0 : apps2.length)) {
    return false;
  }

  if ((apps1 === null || apps1 === void 0 ? void 0 : (_apps1$ = apps1[0]) === null || _apps1$ === void 0 ? void 0 : _apps1$.state) !== (apps2 === null || apps2 === void 0 ? void 0 : (_apps2$ = apps2[0]) === null || _apps2$ === void 0 ? void 0 : _apps2$.state)) {
    return false;
  }

  return true;
};
/**
 * Parse the array of embedded apps
 * @param {array} embeddedApps
 * @returns {array} result - new array of parsed embedded app objects
 */


EmbeddedAppsUtils.parse = function (embeddedApps) {
  return embeddedApps && embeddedApps.map(EmbeddedAppsUtils.parseApp);
};

var _default = EmbeddedAppsUtils;
exports.default = _default;
//# sourceMappingURL=embeddedAppsUtils.js.map
