{"version":3,"names":["Parser","queue","SimpleQueue","status","IDLE","onDeltaAction","workingCopy","newLoci","isValid","isLoci","setStatus","LoggerProxy","logger","info","PAUSED","size","processDeltaEvent","action","locus","loci","enqueue","WORKING","DESYNC","USE_INCOMING","extract","extractComparisonState","dequeue","isValidLocus","result","compare","lociComparison","debug","pause","call","nextEvent","current","incoming","comparison","min","max","GT","LT","currentIsNotUnique","unique","length","incomingIsNotUnique","currentTotalRange","end","incomingTotalRange","EQ","currentIsUnique","incomingIsUnique","currentUniqueMin","incomingUniqueMin","currentHasNoRange","start","incomingHasNoRange","neitherSeqHasRange","hasUniqOverlap","list","some","seq","currentUniqOverlap","incomingUniqOverlap","debugInfo","isSequenceEmpty","pack","packComparisonResult","baseSequence","compareDelta","compareSequence","sequence","compareToAction","local","getMetaData","delta","getUniqueSequences","rules","checkSequenceOverlap","checkUnequalRanges","checkForUniqueEntries","checkIfOutOfSync","rule","ERROR","USE_CURRENT","lociComparisonResult","split","entries","first","last","slice","rangeStart","rangeEnd","baseLoci","otherLoci","diff","getNumbersOutOfRange","output","filter","num","sort","a","b","hasEmptyEntries","hasEmptyRange","hasProp","prop","Object","prototype","hasOwnProperty","newData","oldData","debugCode","mStr","strings","join","replace","resolutionMap","debugMap","SO001","title","description","logic","SO002","UR001","UR002","UR003","UE001","UE002","OOS001","OOS002","OOS003","debugObj","resolution"],"sources":["parser.js"],"sourcesContent":["import {difference} from 'lodash';\n\nimport SimpleQueue from '../common/queue';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\n/**\n * Locus Delta Parser\n * @private\n * https://sqbu-github.cisco.com/WebExSquared/cloud-apps/wiki/Locus-Delta-Events\n */\nexport default class Parser {\n  // processing status\n  static status = {\n    IDLE: 'IDLE',\n    PAUSED: 'PAUSED',\n    WORKING: 'WORKING'\n  };\n\n  // loci comparison states\n  static loci = {\n    EQ: 'EQUAL',\n    GT: 'GREATER_THAN',\n    LT: 'LESS_THAN',\n    DESYNC: 'DESYNC',\n    USE_INCOMING: 'USE_INCOMING',\n    USE_CURRENT: 'USE_CURRENT',\n    ERROR: 'ERROR'\n  };\n\n\n  /**\n   * @constructs Parser\n   */\n  constructor() {\n    this.queue = new SimpleQueue();\n    this.status = Parser.status.IDLE;\n    this.onDeltaAction = null;\n    this.workingCopy = null;\n  }\n\n\n  /**\n   * Checks if two sequences overlap in time,\n   * the sequence with the higher minimum value is greater.\n   * Chooses sequence with most recent data.\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} loci comparison state\n   */\n  static checkSequenceOverlap(current, incoming) {\n    let comparison = null;\n\n    // if earliest working copy sequence is more recent than last incoming sequence\n    if (current.min > incoming.max) {\n      // choose left side (current)\n      comparison = `${Parser.loci.GT}:SO001`;\n    }\n    // if last working copy sequence is before the earliest incoming sequence\n    else if (current.max < incoming.min) {\n      // choose right side (incoming)\n      comparison = `${Parser.loci.LT}:SO002`;\n    }\n\n    // if no match above, defaults to null\n    return comparison;\n  }\n\n\n  /**\n   * Checks if two sequences have unequal ranges.\n   * Chooses sequence with most larger range.\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {object} loci comparison\n   */\n  static checkUnequalRanges(current, incoming) {\n    let comparison = null;\n    const currentIsNotUnique = current.unique.length === 0;\n    const incomingIsNotUnique = incoming.unique.length === 0;\n    const currentTotalRange = current.end - current.min;\n    const incomingTotalRange = incoming.end - incoming.min;\n\n    // no unique values for both loci\n    if (currentIsNotUnique && incomingIsNotUnique) {\n      // current working copy loci has a larger range\n      if (currentTotalRange > incomingTotalRange) {\n        // choose left side (current)\n        comparison = `${Parser.loci.GT}:UR001`;\n      }\n      // incoming delta loci has a larger range\n      else if (currentTotalRange < incomingTotalRange) {\n        // choose right side (incoming)\n        comparison = `${Parser.loci.LT}:UR002`;\n      }\n      else {\n        // with no unique entries and with ranges either absent or\n        // of the same size, the sequences are considered equal.\n        comparison = `${Parser.loci.EQ}:UR003`;\n      }\n    }\n\n    return comparison;\n  }\n\n\n  /**\n   * Checks if either sequences has unique entries.\n   * Entries are considered unique if they do not overlap\n   * with other Loci sequences or range values.\n   * Chooses sequence with the unique entries.\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} loci comparison state\n   */\n  static checkForUniqueEntries(current, incoming) {\n    let comparison = null;\n    const currentIsUnique = current.unique.length > 0;\n    const incomingIsUnique = incoming.unique.length > 0;\n\n    // current has unique entries and incoming does not\n    if (currentIsUnique && !incomingIsUnique) {\n      // choose left side (current)\n      comparison = `${Parser.loci.GT}:UE001`;\n    }\n    // current has no unique entries but incoming does\n    else if (!currentIsUnique && incomingIsUnique) {\n      // choose right side (incoming)\n      comparison = `${Parser.loci.LT}:UE002`;\n    }\n\n    return comparison;\n  }\n\n\n  /**\n   * Checks both Locus Delta objects to see if they are\n   * out of sync with one another. If so sends a DESYNC\n   * request to the server.\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} loci comparison state\n   */\n  static checkIfOutOfSync(current, incoming) {\n    let comparison = null;\n    const currentUniqueMin = current.unique[0];\n    const incomingUniqueMin = incoming.unique[0];\n\n    const currentHasNoRange = !current.start && !current.end;\n    const incomingHasNoRange = !incoming.start && !incoming.end;\n    const neitherSeqHasRange = currentHasNoRange && incomingHasNoRange;\n\n    const hasUniqOverlap = (list, min, max) => list.some((seq) => min < seq && seq < max);\n    // current unique entries overlap the total range of incoming\n    const currentUniqOverlap = hasUniqOverlap(current.unique, incoming.min, incoming.max);\n    // vice-versa, incoming unique entries overlap the total range of current\n    const incomingUniqOverlap = hasUniqOverlap(incoming.unique, current.min, current.max);\n\n    if (neitherSeqHasRange || currentUniqOverlap || incomingUniqOverlap) {\n      // outputs string indicating which condition occurred. ex: 0,1,0\n      const debugInfo = `${+neitherSeqHasRange},${+currentUniqOverlap},${+incomingUniqOverlap}`;\n\n      // send DESYNC to server\n      comparison = `${Parser.loci.DESYNC}:OOS001:${debugInfo}`;\n    }\n    else if (currentUniqueMin > incomingUniqueMin) {\n      // choose left side (current)\n      comparison = `${Parser.loci.GT}:OOS002`;\n    }\n    else {\n      // choose right side (incoming)\n      comparison = `${Parser.loci.LT}:OOS003`;\n    }\n\n    return comparison;\n  }\n\n\n  /**\n   * Compares two loci to determine which one contains the most recent state\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} loci comparison state\n   */\n  static compare(current, incoming) {\n    const {isSequenceEmpty} = Parser;\n    const {extractComparisonState: extract} = Parser;\n    const {packComparisonResult: pack} = Parser;\n\n\n    if (isSequenceEmpty(current) || isSequenceEmpty(incoming)) {\n      return pack(Parser.loci.USE_INCOMING, 'C001');\n    }\n\n    if (incoming.baseSequence) {\n      return pack(Parser.compareDelta(current, incoming), 'C002');\n    }\n\n    const result = Parser.compareSequence(current.sequence, incoming.sequence);\n    const action = Parser.compareToAction(extract(result));\n\n    return pack(action, result);\n  }\n\n\n  /**\n   * Compares two loci sequences (with delta params) and indicates what action\n   * to take.\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @private\n   * @returns {string} loci comparison state\n   */\n  static compareDelta(current, incoming) {\n    const {\n      LT, GT, EQ, DESYNC, USE_INCOMING\n    } = Parser.loci;\n    const {extractComparisonState: extract} = Parser;\n    const {packComparisonResult: pack} = Parser;\n\n    const result = Parser.compareSequence(current.sequence, incoming.sequence);\n    let comparison = extract(result);\n\n\n    if (comparison !== LT) {\n      return pack(Parser.compareToAction(comparison), result);\n    }\n\n    comparison = Parser.compareSequence(current.sequence, incoming.baseSequence);\n\n    switch (extract(comparison)) {\n      case GT:\n      case EQ:\n        comparison = USE_INCOMING;\n        break;\n\n      default:\n        comparison = DESYNC;\n    }\n\n    return pack(comparison, result);\n  }\n\n\n  /**\n   * Compares Locus sequences\n   * @param {Types~Locus} current Current working copy\n   * @param {Types~Locus} incoming New Locus delta\n   * @returns {string}\n   */\n  static compareSequence(current, incoming) {\n    // Locus sequence comparison rules in order of priority.\n    // https://sqbu-github.cisco.com/WebExSquared/cloud-apps/wiki/Locus-Sequence-Comparison-Algorithm\n\n    const local = Parser.getMetaData(current);\n    const delta = Parser.getMetaData(incoming);\n\n    // update loci metadata\n    local.unique = Parser.getUniqueSequences(local, delta);\n    delta.unique = Parser.getUniqueSequences(delta, local);\n\n    // Locus sequence comparison rules\n    // order matters\n    const rules = [\n      Parser.checkSequenceOverlap,\n      Parser.checkUnequalRanges,\n      Parser.checkForUniqueEntries,\n      Parser.checkIfOutOfSync\n    ];\n\n    for (const rule of rules) {\n      // Rule only returns a value if the rule applies,\n      // otherwise returns null.\n      const result = rule(local, delta);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    // error, none of rules above applied\n    // should never get here as last rule\n    // should be catch all.\n    return Parser.loci.ERROR;\n  }\n\n\n  /**\n   * Transates the result of a sequence comparison into an intended behavior\n   * @param {string} result\n   * @returns {string} Locus comparison action\n   */\n  static compareToAction(result) {\n    const {\n      DESYNC, EQ, ERROR, GT, LT, USE_CURRENT, USE_INCOMING\n    } = Parser.loci;\n\n    let action = ERROR;\n\n    switch (result) {\n      case EQ:\n      case GT:\n        action = USE_CURRENT;\n        break;\n      case LT:\n        action = USE_INCOMING;\n        break;\n      case DESYNC:\n        action = DESYNC;\n        break;\n      default:\n        LoggerProxy.logger.info(`Locus-info:parser#compareToAction --> Error: ${result} is not a recognized sequence comparison result.`);\n    }\n\n    return action;\n  }\n\n\n  /**\n   * Extracts a loci comparison from a string of data.\n   * @param {string} lociComparisonResult Comparison result with extra data\n   * @returns {string} Comparison of EQ, LT, GT, or DESYNC.\n   */\n  static extractComparisonState(lociComparisonResult) {\n    return lociComparisonResult.split(':')[0];\n  }\n\n\n  /**\n   * @typedef {object} LociMetadata\n   * @property {number} start - Starting sequence number\n   * @property {number} end - Ending sequence number\n   * @property {number} first - First sequence number\n   * @property {number} last - Last sequence number\n   * @property {number} min - Minimum sequence number\n   * @property {number} max - Maximum sequence number\n   * @property {number} entries - Loci sequence entries\n   */\n\n  /**\n   * Metadata for Locus delta\n   * @param {Array.<number>} sequence Locus delta sequence\n   * @returns {LociMetadata} Locus Delta Metadata\n   */\n  static getMetaData(sequence) {\n    const {entries} = sequence;\n    const first = entries[0];\n    const last = entries.slice(-1)[0];\n\n    // rangeStart or rangeEnd is 0 if a range doesn't exist\n    const start = sequence.rangeStart;\n    const end = sequence.rangeEnd;\n\n    // sequence data\n    return {\n      start,\n      end,\n      first,\n      last,\n      // Rule is: rangeStart <= rangeEnd <= min(entries)\n      min: start || first,\n      // Grab last entry if exist else default to rangeEnd\n      max: last || end,\n      // keep reference to actual sequence entries\n      entries\n    };\n  }\n\n\n  /**\n   * Compares two Locus delta objects and notes unique\n   * values contained within baseLoci.\n   * @param {LociMetadata} baseLoci\n   * @param {LociMetadata} otherLoci\n   * @returns {Array.<number>} List of unique sequences\n   */\n  static getUniqueSequences(baseLoci, otherLoci) {\n    const diff = difference(\n      baseLoci.entries,\n      otherLoci.entries\n    );\n    const {start, end} = otherLoci;\n\n    return Parser.getNumbersOutOfRange(diff, start, end);\n  }\n\n\n  /**\n   * Returns an array of numbers outside of a given range.\n   * @param {Array.<number>} list Array to filter\n   * @param {number} rangeStart Start of range\n   * @param {number} rangeEnd End of range\n   * @returns {Array.<number>} Array of numbers sorted ASC\n   */\n  static getNumbersOutOfRange(list, rangeStart, rangeEnd) {\n    // Collect all numbers if number is outside of specified range\n    const output = list.filter((num) => num < rangeStart || num > rangeEnd);\n\n    // sort ascending\n    return output.sort((a, b) => a - b);\n  }\n\n\n  /**\n   * Checks if newLoci or workingCopy is invalid.\n   * @param {Types~Locus} newLoci\n   * @returns {boolean}\n   */\n  isValidLocus(newLoci) {\n    let isValid = false;\n    const {IDLE} = Parser.status;\n    const {isLoci} = Parser;\n    const setStatus = (status) => { this.status = status; };\n\n    // one or both objects are not locus delta events\n    if (!isLoci(this.workingCopy) || !isLoci(newLoci)) {\n      setStatus(IDLE);\n      LoggerProxy.logger.info('Locus-info:parser#processDeltaEvent --> Ignoring non-locus object. workingCopy:', this.workingCopy, 'newLoci:', newLoci);\n    }\n    else {\n      isValid = true;\n    }\n\n    return isValid;\n  }\n\n\n  /**\n   * Determines if a paricular locus's sequence is empty\n   * @param {Types~Locus} locus\n   * @returns {bool}\n   */\n  static isSequenceEmpty(locus) {\n    const {sequence} = locus;\n    const hasEmptyEntries = !sequence.entries?.length;\n    const hasEmptyRange = sequence.rangeStart === 0 && sequence.rangeEnd === 0;\n\n    return hasEmptyEntries && hasEmptyRange;\n  }\n\n\n  /**\n   * Determines if an object has basic\n   * structure of a locus object.\n   * @param {Types~Locus} loci\n   * @returns {boolean}\n   */\n  static isLoci(loci) {\n    if (!loci || !loci.sequence) {\n      return false;\n    }\n    const hasProp = (prop) =>\n      Object.prototype.hasOwnProperty.call(loci.sequence, prop);\n\n    if (hasProp('rangeStart') && hasProp('rangeEnd')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Processes next event in queue,\n   * if queue is empty sets status to idle.\n   * @returns {undefined}\n   */\n  nextEvent() {\n    if (this.status === Parser.status.PAUSED) {\n      LoggerProxy.logger.info('Locus-info:parser#nextEvent --> Locus parser paused.');\n\n      return;\n    }\n\n    // continue processing until queue is empty\n    if (this.queue.size() > 0) {\n      this.processDeltaEvent();\n    }\n    else {\n      this.status = Parser.status.IDLE;\n    }\n  }\n\n\n  /**\n   * Function handler for delta actions,\n   * is set by instance callee.\n   * @param {string} action Locus delta action\n   * @param {Types~Locus} locus Locus delta\n   * @returns {undefined}\n   */\n  // eslint-disable-next-line no-unused-vars\n  onDeltaAction(action, locus) {}\n\n\n  /**\n   * Event handler for locus delta events\n   * @param {Types~Locus} loci Locus Delta\n   * @returns {undefined}\n   */\n  onDeltaEvent(loci) {\n    // enqueue the new loci\n    this.queue.enqueue(loci);\n    // start processing events in the queue if idle\n    // and a function handler is defined\n    if (this.status === Parser.status.IDLE && this.onDeltaAction) {\n      // Update status, ensure we only process one event at a time.\n      this.status = Parser.status.WORKING;\n\n      this.processDeltaEvent();\n    }\n  }\n\n\n  /**\n   * Appends new data onto a string of existing data.\n   * @param {string} newData\n   * @param {string} oldData\n   * @returns {string}\n   */\n  static packComparisonResult(newData, oldData) {\n    return `${newData}:${oldData}`;\n  }\n\n\n  /**\n   * Pause locus processing\n   * @returns {undefined}\n   */\n  pause() {\n    this.status = Parser.status.PAUSED;\n    LoggerProxy.logger.info('Locus-info:parser#pause --> Locus parser paused.');\n  }\n\n\n  /**\n   * Processes next locus delta in the queue,\n   * continues until the queue is empty\n   * or cleared.\n   * @returns {undefined}\n   */\n  processDeltaEvent() {\n    const {DESYNC, USE_INCOMING} = Parser.loci;\n    const {extractComparisonState: extract} = Parser;\n    const newLoci = this.queue.dequeue();\n\n    if (!this.isValidLocus(newLoci)) {\n      return;\n    }\n\n    const result = Parser.compare(this.workingCopy, newLoci);\n    const lociComparison = extract(result);\n\n    // limited debugging, use chrome extension\n    // for full debugging.\n    LoggerProxy.logger.debug(`Locus-info:parser#processDeltaEvent --> Locus Debug: ${result}`);\n\n    if (lociComparison === DESYNC) {\n      // wait for desync response\n      this.pause();\n    }\n    else if (lociComparison === USE_INCOMING) {\n      // update working copy for future comparisons.\n      // Note: The working copy of parser gets updated in .onFullLocus()\n      // and here when USE_INCOMING locus.\n      this.workingCopy = newLoci;\n    }\n\n    if (this.onDeltaAction) {\n      LoggerProxy.logger.info(`Locus-info:parser#processDeltaEvent --> Locus Delta Action: ${lociComparison}`);\n      this.onDeltaAction.call(this, lociComparison, newLoci);\n    }\n\n    this.nextEvent();\n  }\n\n\n  /**\n   * Resume from a paused state\n   * @returns {undefined}\n   */\n  resume() {\n    LoggerProxy.logger.info('Locus-info:parser#resume --> Locus parser resumed.');\n    this.status = Parser.status.WORKING;\n    this.nextEvent();\n  }\n\n\n  /**\n   * Gets related debug info for given error code\n   * @param {string} debugCode Debug code\n   * @param {string} comparison Locus comparison string\n   * @returns {object} Debug message\n   */\n  static getDebugMessage(debugCode, comparison) {\n    // removes extra spaces from multiline string\n    const mStr = (strings) => strings.join('').replace(/\\s{2,}/g, ' ');\n\n    const resolutionMap = {\n      EQ: `${Parser.loci.LT}: is equal (current == incoming).`,\n      LT: `${Parser.loci.LT}: choose right side (incoming).`,\n      GT: `${Parser.loci.GT}: choose left side (current).`\n    };\n\n    const debugMap = {\n      SO001: {\n        title: 'checkSequenceOverlap-001',\n        description: mStr`Occurs if earliest working copy sequence is more \\\n            recent than last incoming sequence.`,\n        logic: 'current.min > incoming.max'\n      },\n\n      SO002: {\n        title: 'checkSequenceOverlap-002',\n        description: mStr`Occurs if last working copy sequence is before the \\\n          earliest incoming sequence.`,\n        logic: 'current.max < incoming.min'\n      },\n\n      UR001: {\n        title: 'checkUnequalRanges-001',\n        description: mStr`Occurs if there are no unique values for both loci, \\\n          and the current working copy loci has a larger range.`,\n        logic: 'currentTotalRange > incomingTotalRange'\n      },\n\n      UR002: {\n        title: 'checkUnequalRanges-002',\n        description: mStr`Occurs if there are no unique values for both loci, \\\n          and the incoming delta loci has a larger range.`,\n        logic: 'currentTotalRange < incomingTotalRange'\n      },\n\n      UR003: {\n        title: 'checkUnequalRanges-003',\n        description: mStr`Occurs if there are no unique values for both loci, \\\n          and with ranges either absent or of the same size, the sequences \\\n          are considered equal.`,\n        logic: 'currentTotalRange == incomingTotalRange'\n      },\n\n      UE001: {\n        title: 'checkForUniqueEntries-001',\n        description: mStr`Occurs if current loci has unique entries and \\\n          incoming does not. Entries are considered unique if they \\\n          do not overlap with other Loci sequences or range values.`,\n        logic: 'currentIsUnique && !incomingIsUnique'\n      },\n\n      UE002: {\n        title: 'checkForUniqueEntries-002',\n        description: mStr`Occurs if current has no unique entries but \\\n          incoming does. Entries are considered unique if they \\\n          do not overlap with other Loci sequences or range values.`,\n        logic: '!currentIsUnique && incomingIsUnique'\n      },\n\n      OOS001: {\n        title: 'checkIfOutOfSync-001',\n        description: mStr`Occurs if neither sequence has a range, or \\\n          if the current loci unique entries overlap the total range of the \\\n          incoming sequence, or if the incoming unique entries overlap \\\n          the total range of current sequence.`,\n        logic: 'neitherSeqHasRange || currentUniqOverlap || incomingUniqOverlap'\n      },\n\n      OOS002: {\n        title: 'checkIfOutOfSync-002',\n        description: mStr`Occurs if the minimum value from sequences that are \\\n          unique to the current loci is greater than the minimum value from \\\n          sequences that are unique to the incoming loci.`,\n        logic: 'currentUniqueMin > incomingUniqueMin'\n      },\n\n      OOS003: {\n        title: 'checkIfOutOfSync-003',\n        description: mStr`Occurs if none of the comparison rules applied. \\\n          It is a catch all.`,\n        logic: 'else (catch all)'\n      }\n    };\n\n    const debugObj = debugMap[debugCode];\n\n    debugObj.title = `Debug: ${debugObj.title}`;\n    debugObj.resolution = resolutionMap[comparison];\n\n    return debugObj;\n  }\n}\n"],"mappings":"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"}