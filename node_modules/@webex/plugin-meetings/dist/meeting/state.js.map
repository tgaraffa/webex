{"version":3,"names":["MeetingStateMachine","create","meetingRef","ParameterError","StateMachine","init","MEETING_STATE_MACHINE","STATES","IDLE","transitions","name","TRANSITIONS","RING","from","ERROR","JOINED","to","RINGING","JOIN","REMOTE","remote","remoteAnswered","ANSWERED","remoteDeclined","DECLINED","LEAVE","ENDED","END","DECLINE","FAIL","RESET","data","meeting","methods","onRemote","transition","stop","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_RINGING_STOP","id","type","onRing","MEETING_RINGING","onEnterError","error","LoggerProxy","logger","history","onAfterTransition","log","plugins","StateMachineHistory","max"],"sources":["state.js"],"sourcesContent":["import StateMachine from 'javascript-state-machine';\nimport StateMachineHistory from 'javascript-state-machine/lib/history';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {MEETING_STATE_MACHINE, EVENT_TRIGGERS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\n// TODO: ensure that meeting can be destroyed when in an error state\nconst MeetingStateMachine = {\n  /**\n   * Initializes the StateMachine for the meeting\n   * @param {Meeting} meetingRef A reference to a meeting instance\n   * @returns {StateMachine}\n   */\n  create(meetingRef) {\n    if (!meetingRef) {\n      throw new ParameterError('You must initialize the meeting state machine with a meeting reference.');\n    }\n\n    return new StateMachine({\n      init: MEETING_STATE_MACHINE.STATES.IDLE,\n      transitions: [\n        // when ringing a meeting, it must be first IDLE, because all other states are invalid, it transitions to the RINGING state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.RING,\n          from: [MEETING_STATE_MACHINE.STATES.IDLE, MEETING_STATE_MACHINE.STATES.ERROR, MEETING_STATE_MACHINE.STATES.JOINED],\n          to: MEETING_STATE_MACHINE.STATES.RINGING\n        },\n        // when joining a meeting, it must be from the RINGING or IDLE state, transitions to JOINED state, 1:1 will go to RINGING,\n        // others will go straight to JOINED with this transition\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.JOIN,\n          from: [MEETING_STATE_MACHINE.STATES.JOINED, MEETING_STATE_MACHINE.STATES.IDLE, MEETING_STATE_MACHINE.STATES.RINGING, MEETING_STATE_MACHINE.STATES.ERROR],\n          to: MEETING_STATE_MACHINE.STATES.JOINED\n        },\n        // signify that ringing has stopped and somebody else answered, move state to DECLINED, ANSWERED\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.REMOTE,\n          from: [MEETING_STATE_MACHINE.STATES.JOINED, MEETING_STATE_MACHINE.STATES.ERROR],\n          /**\n         * @param {Object} remote\n         * @param {Boolean} remote.remoteAnswered\n         * @param {Boolean} remote.remoteDeclined\n         * @returns {String}\n         */\n          to(remote) {\n            // other user answered the call\n            if (remote.remoteAnswered) {\n              return MEETING_STATE_MACHINE.STATES.ANSWERED;\n            }\n            // other user declined the call\n            if (remote.remoteDeclined) {\n              return MEETING_STATE_MACHINE.STATES.DECLINED;\n            }\n\n            // default\n            return MEETING_STATE_MACHINE.STATES.ERROR;\n          }\n        },\n        // when leaving a meeting it must be from either the RINGING, JOINED, or ERROR states, and transitions it to the ENDED state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.LEAVE,\n          from: [\n            MEETING_STATE_MACHINE.STATES.IDLE,\n            MEETING_STATE_MACHINE.STATES.RINGING,\n            MEETING_STATE_MACHINE.STATES.JOINED,\n            MEETING_STATE_MACHINE.STATES.ANSWERED,\n            MEETING_STATE_MACHINE.STATES.DECLINED,\n            MEETING_STATE_MACHINE.STATES.ERROR\n          ],\n          to: MEETING_STATE_MACHINE.STATES.ENDED\n        },\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.END,\n          from: [\n            MEETING_STATE_MACHINE.STATES.IDLE,\n            MEETING_STATE_MACHINE.STATES.RINGING,\n            MEETING_STATE_MACHINE.STATES.JOINED,\n            MEETING_STATE_MACHINE.STATES.ANSWERED,\n            MEETING_STATE_MACHINE.STATES.DECLINED,\n            MEETING_STATE_MACHINE.STATES.ERROR\n          ],\n          to: MEETING_STATE_MACHINE.STATES.ENDED\n        },\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.DECLINE,\n          from: [MEETING_STATE_MACHINE.STATES.RINGING, MEETING_STATE_MACHINE.STATES.ERROR],\n          to: MEETING_STATE_MACHINE.STATES.ENDED\n        },\n        // transition from ANY state to ERROR state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.FAIL,\n          from: '*',\n          to: MEETING_STATE_MACHINE.STATES.ERROR\n        },\n        // fail safe, transition from ANY state to IDLE state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.RESET,\n          from: '*',\n          to: MEETING_STATE_MACHINE.STATES.IDLE\n        }\n      ],\n      data: {\n        /**\n         * The meeting instance to execute all state changes on\n         */\n        meeting: meetingRef\n      },\n      methods: {\n        /**\n         * Ring stop transition, to end the ring event for the meeting, and transition the state to ANSWERED OR DECLINED, only for outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {Object} stop -- {remoteAnswered: {Boolean}, remoteDeclined: {Boolean}}\n         * @returns {Boolean}\n         */\n        onRemote(transition, stop) {\n          if (this.meeting) {\n            Trigger.trigger(\n              this.meeting,\n              {\n                file: 'meeting/state',\n                function: 'onRemote'\n              },\n              EVENT_TRIGGERS.MEETING_RINGING_STOP,\n              {\n                id: this.meeting.id,\n                type: stop\n              }\n            );\n          }\n        },\n        /**\n         * Ring transition, to cause the ring event for the meeting, and transition the state to RINGING, for both incoming, and outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {String} type -- incoming call === INCOMING / or other meetings have a ring type of JOIN\n         * @returns {Boolean}\n         */\n        onRing(transition, type) {\n          if (this.meeting) {\n            Trigger.trigger(\n              this.meeting,\n              {\n                file: 'meeting/state',\n                function: 'onRing'\n              },\n              EVENT_TRIGGERS.MEETING_RINGING,\n              {\n                type,\n                id: this.meeting.id\n              }\n            );\n          }\n        },\n        /**\n         * handle the entry to error state\n         * @param {Object} transition\n         * @param {Error} error\n         * @returns {Boolean}\n         */\n        onEnterError(transition, error) {\n          LoggerProxy.logger.error(`Meeting:state#onEnterError --> state->onEnterError#meeting.id: ${this.meeting.id} | Transition '${transition?.transition}' : ${transition?.from} -> ${transition?.to}, with error ${error}. Last states: ${this.history}`);\n        },\n        /**\n         * After ANY transition occurs, we want to know what state the meeting moved to for debugging\n         * @param {Object} transition\n         * @returns {Boolean}\n         */\n        onAfterTransition(transition) {\n          LoggerProxy.logger.log(`Meeting:state#onAfterTransition --> state->onAfterTransition#meeting.id: ${this.meeting.id} | Transition '${transition.transition}' : ${transition.from} -> ${transition.to} executed. Last states: ${this.history}`);\n        }\n      },\n      // track the last 25 states entered\n      plugins: [new StateMachineHistory({max: 25})]\n    });\n  }\n};\n\nexport default MeetingStateMachine;\n"],"mappings":"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"}