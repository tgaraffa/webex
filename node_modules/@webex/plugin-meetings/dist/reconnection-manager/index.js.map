{"version":3,"names":["NeedsRetryError","Error","NeedsRejoinError","wasSharing","error","ReconnectionManager","meeting","iceState","disconnected","resolve","timer","undefined","timeoutDuration","config","reconnection","iceReconnectionTimeout","status","RECONNECTION","STATE","DEFAULT_STATUS","tryCount","DEFAULT_TRY_COUNT","webex","maxRejoinAttempts","rejoinAttempts","autoRejoinEnabled","autoRejoin","reset","LoggerProxy","logger","log","clearTimeout","reject","setTimeout","enabled","COMPLETE","info","ReconnectInProgress","ReconnectionError","networkDisconnect","networkRetry","id","validate","Metrics","postEvent","event","eventType","MEDIA_RECONNECTING","executeReconnection","then","MEDIA_RECOVERED","data","recoveredBy","RECOVERED_BY_NEW","catch","reconnectError","reconnect","message","reconnectMetric","CALL_ABORTED","errors","category","errorObjects","expected","errorCode","fatal","name","mediaEngine","shownToUser","rejoinMeeting","IN_PROGRESS","reconnectMercuryWebSocket","internal","device","url","FAILURE","shareStatus","SHARE_STATUS","LOCAL_SHARE_ACTIVE","meetings","syncMeetings","getMeetingByType","_ID_","state","_LEFT_","type","_CALL_","reconnectMedia","media","previousCorrelationId","correlationId","join","rejoin","RoapCollection","deleteSession","Media","stopTracks","mediaProperties","shareTrack","isSharing","NO_SHARE","mediaDirection","sendShare","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_STOPPED_SHARING_LOCAL","reason","SHARE_STOPPED_REASON","MEETING_REJOIN","sendBehavioralMetric","BEHAVIORAL_METRICS","MEETING_MAX_REJOIN_FAILURE","locus_id","locusUrl","split","pop","stack","setupPeerConnection","attachMedia","meetingId","remoteQualityLevel","enableRtx","enableExtmap","peerConnection","setRemoteStream","roap","sendRoapMediaRequest","sdp","roapSeq","mercury","connected","disconnect","connect","PeerConnectionManager","close","unsetPeerConnection","doTurnDiscovery","turnInfo","reInitiatePeerconnection","setPeerConnectionEvents","statsAnalyzer","updatePeerconnection"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-disable no-warning-comments */\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {\n  EVENT_TRIGGERS,\n  RECONNECTION,\n  SHARE_STATUS,\n  SHARE_STOPPED_REASON,\n  _CALL_,\n  _LEFT_,\n  _ID_\n} from '../constants';\nimport BEHAVIORAL_METRICS from '../metrics/constants';\nimport ReconnectionError from '../common/errors/reconnection';\nimport ReconnectInProgress from '../common/errors/reconnection-in-progress';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport {eventType, reconnection, errorObjects} from '../metrics/config';\nimport Media from '../media';\nimport Metrics from '../metrics';\nimport RoapCollection from '../roap/collection';\n\n/**\n * Used to indicate that the reconnect logic needs to be retried.\n *\n * @class NeedsRetryError\n * @extends {Error}\n */\nclass NeedsRetryError extends Error {}\n\n/**\n * Used to indicate that the meeting needs to be rejoined, not just media reconnected\n *\n * @class NeedsRejoinError\n * @extends {Error}\n */\nclass NeedsRejoinError extends Error {\n  /**\n   * Creates an instance of NeedsRejoinError.\n   * @param {Object} params\n   * @param {boolean} params.wasSharing\n   * @param {Error} params.error\n   * @memberof NeedsRejoinError\n   */\n  constructor({wasSharing, error = new Error('Meeting needs to be rejoined')}) {\n    super(error);\n\n    this.wasSharing = wasSharing;\n  }\n}\n\n/**\n * @export\n * @class ReconnectionManager\n*/\nexport default class ReconnectionManager {\n  /**\n   * @param {Meeting} meeting\n   */\n  constructor(meeting) {\n    /**\n     * Stores ICE reconnection state data.\n     *\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    this.iceState = {\n      disconnected: false,\n      resolve: () => {},\n      timer: undefined,\n      timeoutDuration: meeting.config.reconnection.iceReconnectionTimeout\n    };\n\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    /**\n     * @instance\n     * @type {Number}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    // TODO : change this logic to not save the meeting instance\n    // It gets complicated when meeting ends on remote side , We have a old meeting instance which is not up to date\n    this.webex = meeting.webex;\n    /**\n     * @instance\n     * @type {Meeting}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    // TODO: try removing the circular dependency for meeting and reconnection manager\n    // try moving this to meetings collection\n    this.meeting = meeting;\n\n    this.maxRejoinAttempts = meeting.config.reconnection.maxRejoinAttempts;\n    this.rejoinAttempts = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    this.autoRejoinEnabled = meeting.config.reconnection.autoRejoin;\n\n\n    // Make sure reconnection state is in default\n    this.reset();\n  }\n\n  /**\n   * Sets the iceState to connected and clears any disconnect timeouts and\n   * related timeout data within the iceState.\n   *\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  iceReconnected() {\n    if (this.iceState.disconnected) {\n      LoggerProxy.logger.log('ReconnectionManager:index#iceReconnected --> ice has reconnected');\n\n      this.iceState.resolve();\n      this.iceState.resolve = () => {};\n\n      if (this.iceState.timer) {\n        clearTimeout(this.iceState.timer);\n        delete this.iceState.timer;\n      }\n\n      this.iceState.disconnected = false;\n    }\n  }\n\n  /**\n   * Set the iceState to disconnected and generates a timeout that waits for the\n   * iceState to reconnect and then resolves. If the ice state is already\n   * processing a reconnect, it immediately resolves. Rejects if the timeout\n   * duration is reached.\n   *\n   * @returns {Promise<undefined>}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  waitForIceReconnect() {\n    if (!this.iceState.disconnected) {\n      LoggerProxy.logger.log('ReconnectionManager:index#waitForIceReconnect --> waiting for ice reconnect');\n\n      this.iceState.disconnected = true;\n\n      return new Promise((resolve, reject) => {\n        this.iceState.timer = setTimeout(() => {\n          if (this.iceState.disconnected === false) {\n            resolve();\n          }\n          else {\n            this.iceState.disconnected = false;\n            reject(new Error(`ice reconnection did not occur in ${this.iceState.timeoutDuration}ms`));\n          }\n        }, this.iceState.timeoutDuration);\n\n        this.iceState.resolve = resolve;\n      });\n    }\n\n    // return a resolved promise to prevent multiple catch executions of reconnect\n    return Promise.resolve();\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  reset() {\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    this.rejoinAttempts = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  cleanUp() {\n    this.reset();\n    this.meeting = null;\n  }\n\n  /**\n   * @returns {Boolean}\n   * @throws {ReconnectionError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  validate() {\n    if (this.meeting.config.reconnection.enabled) {\n      if (\n        this.status === RECONNECTION.STATE.DEFAULT_STATUS ||\n        this.status === RECONNECTION.STATE.COMPLETE\n      ) {\n        return true;\n      }\n\n      LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection already in progress.');\n\n      throw new ReconnectInProgress('Reconnection already in progress.');\n    }\n\n    LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection is not enabled.');\n\n    throw new ReconnectionError('Reconnection is not enabled.');\n  }\n\n  /**\n   * Initiates a media reconnect for the active meeting\n   * @param {Object} reconnectOptions\n   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened\n   * @param {boolean} [reconnectOptions.networkRetry=false] indicates if we are retrying the reconnect\n   * @returns {Promise}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  async reconnect({networkDisconnect = false, networkRetry = false} = {}) {\n    LoggerProxy.logger.info(`ReconnectionManager:index#reconnect --> Reconnection start for meeting ${this.meeting.id}.`);\n    // First, validate that we can reconnect, if not, it will throw an error\n    try {\n      this.validate();\n    }\n    catch (error) {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection unable to begin.', error);\n      throw error;\n    }\n\n    if (!networkRetry) {\n      // Only log START metrics on the initial reconnect\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Sending reconnect start metric.');\n      Metrics.postEvent({\n        event: eventType.MEDIA_RECONNECTING,\n        meeting: this.meeting\n      });\n    }\n\n    return this.executeReconnection({networkDisconnect})\n      .then(() => {\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection successful.');\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Sending reconnect success metric.');\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECOVERED,\n          meeting: this.meeting,\n          data: {recoveredBy: reconnection.RECOVERED_BY_NEW}\n        });\n      })\n      .catch((reconnectError) => {\n        if (reconnectError instanceof NeedsRetryError) {\n          LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection not successful, retrying.');\n          // Reset our reconnect status since we are looping back to the beginning\n          this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n\n          // This is a network retry, so we should not log START metrics again\n          return this.reconnect({networkDisconnect: true, networkRetry: true});\n        }\n\n        // Reconnect has failed\n        LoggerProxy.logger.error('ReconnectionManager:index#reconnect --> Reconnection failed.', reconnectError.message);\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Sending reconnect abort metric.');\n\n        const reconnectMetric = {\n          event: eventType.CALL_ABORTED,\n          meeting: this.meeting,\n          data: {\n            errors: [\n              {\n                category: errorObjects.category.expected,\n                errorCode: 2008,\n                fatal: true,\n                name: errorObjects.name.mediaEngine,\n                shownToUser: false\n              }\n            ]\n          }\n        };\n\n        Metrics.postEvent(reconnectMetric);\n        if (reconnectError instanceof NeedsRejoinError) {\n          // send call aborded event with catogery as expected as we are trying to rejoin\n\n          if (this.autoRejoinEnabled) {\n            return this.rejoinMeeting(reconnectError.wasSharing);\n          }\n        }\n\n\n        throw reconnectError;\n      });\n  }\n\n  /**\n   * @param {Object} reconnectOptions\n   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened\n   * @returns {Promise}\n   * @throws {NeedsRetryError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  async executeReconnection({networkDisconnect = false}) {\n    this.status = RECONNECTION.STATE.IN_PROGRESS;\n\n    LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Attempting to reconnect to meeting.');\n\n    if (networkDisconnect) {\n      try {\n        await this.reconnectMercuryWebSocket();\n        LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Websocket reconnected.', this.webex.internal.device.url);\n      }\n      catch (error) {\n        LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Unable to reconnect to websocket, giving up.');\n        this.status = RECONNECTION.STATE.FAILURE;\n        throw (error);\n      }\n    }\n\n    const wasSharing = this.meeting.shareStatus === SHARE_STATUS.LOCAL_SHARE_ACTIVE;\n\n    try {\n      LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Updating meeting data from server.');\n      await this.webex.meetings.syncMeetings();\n    }\n    catch (syncError) {\n      LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Unable to sync meetings, reconnecting.', syncError);\n      throw (new NeedsRetryError(syncError));\n    }\n\n    // TODO: try to improve this logic as the reconnection manager saves the instance of deleted meeting object\n    // So that on rejoin it known what parametrs it was using\n    if (!this.meeting || !this.webex.meetings.getMeetingByType(_ID_, this.meeting.id)) {\n      LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Meeting got deleted due to inactivity or ended remotely ');\n\n      throw new Error('Unable to rejoin a meeting already ended or inactive .');\n    }\n\n    LoggerProxy.logger.info(`ReconnectionManager:index#executeReconnection --> Current state of meeting is ${this.meeting.state}`);\n\n    // If the meeting state was left, no longer reconnect media\n    if (this.meeting.state === _LEFT_) {\n      if (this.meeting.type === _CALL_) {\n        throw new Error('Unable to rejoin a call in LEFT state.');\n      }\n\n      throw (new NeedsRejoinError({wasSharing}));\n    }\n\n    try {\n      const media = await this.reconnectMedia();\n\n      LoggerProxy.logger.log('ReconnectionManager:index#executeReconnection --> Media reestablished');\n      this.status = RECONNECTION.STATE.COMPLETE;\n\n      return media;\n    }\n    catch (error) {\n      LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Media reestablishment failed');\n      this.status = RECONNECTION.STATE.FAILURE;\n\n      throw (error);\n    }\n  }\n\n  /**\n   * Rejoins a meeting after detecting the member was in a LEFT state\n   *\n   * @async\n   * @param {boolean} wasSharing\n   * @returns {Promise}\n   */\n  async rejoinMeeting(wasSharing = false) {\n    try {\n      LoggerProxy.logger.info('ReconnectionManager:index#rejoinMeeting --> attemping meeting rejoin');\n      const previousCorrelationId = this.meeting.correlationId;\n\n      await this.meeting.join({rejoin: true});\n      LoggerProxy.logger.info('ReconnectionManager:index#rejoinMeeting --> meeting rejoined');\n\n      RoapCollection.deleteSession(previousCorrelationId);\n\n      if (wasSharing) {\n        // Stop the share streams if user tried to rejoin\n        Media.stopTracks(this.meeting.mediaProperties.shareTrack);\n        this.meeting.isSharing = false;\n        if (this.shareStatus === SHARE_STATUS.LOCAL_SHARE_ACTIVE) {\n          this.meeting.shareStatus = SHARE_STATUS.NO_SHARE;\n        }\n        this.meeting.mediaProperties.mediaDirection.sendShare = false;\n        Trigger.trigger(\n          this.meeting,\n          {\n            file: 'reconnection-manager/index',\n            function: 'rejoinMeeting'\n          },\n          EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n          {\n            reason: SHARE_STOPPED_REASON.MEETING_REJOIN\n          }\n        );\n      }\n    }\n    catch (joinError) {\n      this.rejoinAttempts += 1;\n      if (this.rejoinAttempts <= this.maxRejoinAttempts) {\n        LoggerProxy.logger.info(`ReconnectionManager:index#rejoinMeeting --> Unable to rejoin meeting, attempt #${this.rejoinAttempts}, retrying.`, joinError);\n        this.rejoinMeeting();\n      }\n      else {\n        LoggerProxy.logger.error('ReconnectionManager:index#rejoinMeeting --> Unable to rejoin meeting after max attempts.', joinError);\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.MEETING_MAX_REJOIN_FAILURE,\n          {\n            locus_id: this.meeting.locusUrl.split('/').pop(),\n            reason: joinError.message,\n            stack: joinError.stack\n          }\n        );\n        this.status = RECONNECTION.STATE.FAILURE;\n        throw joinError;\n      }\n    }\n\n    try {\n      await this.reconnectMedia();\n    }\n    catch (mediaError) {\n      LoggerProxy.logger.error('ReconnectionManager:index#rejoinMeeting --> Unable to reestablish media after rejoining.', mediaError);\n      throw mediaError;\n    }\n  }\n\n  /**\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  reconnectMedia() {\n    LoggerProxy.logger.log('ReconnectionManager:index#reconnectMedia --> Begin reestablishment of media');\n\n    return ReconnectionManager.setupPeerConnection(this.meeting)\n      .then(() => Media.attachMedia(this.meeting.mediaProperties, {\n        meetingId: this.meeting.id,\n        remoteQualityLevel: this.meeting.mediaProperties.remoteQualityLevel,\n        enableRtx: this.meeting.config.enableRtx,\n        enableExtmap: this.meeting.config.enableExtmap\n      }))\n      .then((peerConnection) => this.meeting.setRemoteStream(peerConnection))\n      .then(() => {\n        LoggerProxy.logger.log('ReconnectionManager:index#reconnectMedia --> Sending ROAP media request');\n\n        return this.meeting.roap\n          .sendRoapMediaRequest({\n            sdp: this.meeting.mediaProperties.peerConnection.sdp,\n            roapSeq: this.meeting.roapSeq,\n            meeting: this.meeting,\n            reconnect: true\n          });\n      });\n  }\n\n  /**\n   * Attempt to Reconnect Mercury Websocket\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  async reconnectMercuryWebSocket() {\n    LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Reconnecting websocket.');\n    // First, attempt to disconnect if we think we are already connected.\n    if (this.webex.internal.mercury.connected) {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Disconnecting existing websocket.');\n      try {\n        await this.webex.internal.mercury.disconnect();\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Websocket disconnected successfully.');\n      }\n      catch (disconnectError) {\n        // If we can't disconnect, the sdk is in such a bad state that reconnecting is not going to happen.\n        LoggerProxy.logger.error('ReconnectionManager:index#reconnectMercuryWebSocket --> Unable to disconnect from websocket, giving up.', disconnectError);\n        throw disconnectError;\n      }\n    }\n\n    try {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Connecting websocket.');\n      await this.webex.internal.mercury.connect();\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Websocket connected successfully.');\n    }\n    catch (connectError) {\n      LoggerProxy.logger.error('ReconnectionManager:index#reconnectMercuryWebSocket --> Unable to connect to websocket, giving up.', connectError);\n\n      throw (connectError);\n    }\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  static async setupPeerConnection(meeting) {\n    LoggerProxy.logger.log('ReconnectionManager:index#setupPeerConnection --> Begin resetting peer connection');\n    // close pcs, unset to null and create a new one with out closing any streams\n    PeerConnectionManager.close(meeting.mediaProperties.peerConnection);\n    meeting.mediaProperties.unsetPeerConnection();\n\n    const turnInfo = await meeting.roap.doTurnDiscovery(meeting, true);\n\n    meeting.mediaProperties.reInitiatePeerconnection(turnInfo);\n    PeerConnectionManager.setPeerConnectionEvents(meeting);\n\n    // update the peerconnection in the stats manager when ever we reconnect\n    meeting.statsAnalyzer.updatePeerconnection(meeting.mediaProperties.peerConnection);\n  }\n}\n"],"mappings":"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"}