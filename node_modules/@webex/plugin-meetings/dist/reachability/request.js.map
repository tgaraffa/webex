{"version":3,"names":["ReachabilityRequest","webex","request","method","HTTP_VERBS","GET","shouldRefreshAccessToken","api","API","CALLIOPEDISCOVERY","resource","RESOURCE","CLUSTERS","then","res","clusters","body","forEach","key","isVideoMesh","clusterClasses","hybridMedia","includes","LoggerProxy","logger","log","localSDPList","POST","REACHABILITY","offers"],"sources":["request.ts"],"sourcesContent":["import LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  HTTP_VERBS,\n  RESOURCE,\n  API\n} from '../constants';\n\nexport interface ClusterNode {\n  isVideoMesh: boolean;\n  udp: Array<string>;\n  tcp: Array<string>;\n  xtls: Array<string>;\n}\n\nexport type ClusterList = {\n  [key:string]: ClusterNode;\n}\n\n/**\n * @class ReachabilityRequest\n */\nclass ReachabilityRequest {\n  /**\n   * Creates an instance of ReachabilityRequest.\n   * @param {object} webex\n   * @memberof ReachabilityRequest\n   */\n  constructor(webex) {\n    this.webex = webex;\n  }\n\n  /**\n   * gets the cluster information\n   *\n   * @param {boolean} includeVideoMesh whether to include the video mesh clusters in the result or not\n   * @returns {Promise}\n   */\n  getClusters = (): Promise<ClusterList> => this.webex.request({\n    method: HTTP_VERBS.GET,\n    shouldRefreshAccessToken: false,\n    api: API.CALLIOPEDISCOVERY,\n    resource: RESOURCE.CLUSTERS\n  })\n    .then((res) => {\n      const {clusters} = res.body;\n\n      Object.keys(clusters).forEach((key) => {\n        clusters[key].isVideoMesh = res.body.clusterClasses?.hybridMedia?.includes(key);\n      });\n\n      LoggerProxy.logger.log(`Reachability:request#getClusters --> get clusters successful:${JSON.stringify(clusters)}`);\n\n      return clusters;\n    });\n\n  /**\n   * gets remote SDP For Clusters\n   * @param {Object} localSDPList localSDPs for the cluster\n   * @returns {Object}\n   */\n  remoteSDPForClusters = (localSDPList) => this.webex.request({\n    method: HTTP_VERBS.POST,\n    shouldRefreshAccessToken: false,\n    api: API.CALLIOPEDISCOVERY,\n    resource: RESOURCE.REACHABILITY,\n    body: {offers: localSDPList}\n  })\n    .then((res) => {\n      LoggerProxy.logger.log('Reachability:request#remoteSDPForClusters --> Remote SDPs got succcessfully');\n\n      return res.body;\n    });\n}\n\nexport default ReachabilityRequest;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAiBA;AACA;AACA;IACMA,mB;AACJ;AACF;AACA;AACA;AACA;AACE,6BAAYC,KAAZ,EAAmB;EAAA;;EAAA;EAAA,mDAUL;IAAA,OAA4B,KAAI,CAACA,KAAL,CAAWC,OAAX,CAAmB;MAC3DC,MAAM,EAAEC,qBAAA,CAAWC,GADwC;MAE3DC,wBAAwB,EAAE,KAFiC;MAG3DC,GAAG,EAAEC,cAAA,CAAIC,iBAHkD;MAI3DC,QAAQ,EAAEC,mBAAA,CAASC;IAJwC,CAAnB,EAMvCC,IANuC,CAMlC,UAACC,GAAD,EAAS;MACb,IAAOC,QAAP,GAAmBD,GAAG,CAACE,IAAvB,CAAOD,QAAP;MAEA,mBAAYA,QAAZ,EAAsBE,OAAtB,CAA8B,UAACC,GAAD,EAAS;QAAA;;QACrCH,QAAQ,CAACG,GAAD,CAAR,CAAcC,WAAd,4BAA4BL,GAAG,CAACE,IAAJ,CAASI,cAArC,oFAA4B,sBAAyBC,WAArD,2DAA4B,uBAAsCC,QAAtC,CAA+CJ,GAA/C,CAA5B;MACD,CAFD;;MAIAK,oBAAA,CAAYC,MAAZ,CAAmBC,GAAnB,wEAAuF,wBAAeV,QAAf,CAAvF;;MAEA,OAAOA,QAAP;IACD,CAhBuC,CAA5B;EAAA,CAVK;EAAA,4DAiCI,UAACW,YAAD;IAAA,OAAkB,KAAI,CAACzB,KAAL,CAAWC,OAAX,CAAmB;MAC1DC,MAAM,EAAEC,qBAAA,CAAWuB,IADuC;MAE1DrB,wBAAwB,EAAE,KAFgC;MAG1DC,GAAG,EAAEC,cAAA,CAAIC,iBAHiD;MAI1DC,QAAQ,EAAEC,mBAAA,CAASiB,YAJuC;MAK1DZ,IAAI,EAAE;QAACa,MAAM,EAAEH;MAAT;IALoD,CAAnB,EAOtCb,IAPsC,CAOjC,UAACC,GAAD,EAAS;MACbS,oBAAA,CAAYC,MAAZ,CAAmBC,GAAnB,CAAuB,6EAAvB;;MAEA,OAAOX,GAAG,CAACE,IAAX;IACD,CAXsC,CAAlB;EAAA,CAjCJ;EACjB,KAAKf,KAAL,GAAaA,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;eAsCeD,mB"}