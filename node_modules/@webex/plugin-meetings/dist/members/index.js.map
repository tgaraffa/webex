{"version":3,"names":["Members","attrs","options","MEETINGS","membersRequest","MembersRequest","membersCollection","MembersCollection","locusUrl","hostId","type","selfId","mediaShareContentId","mediaShareWhiteboardId","recordingId","payload","newSelfId","oldSelfId","newSelf","id","oldSelf","theSelf","get","setIsSelf","notSelf","Trigger","trigger","file","function","EVENT_TRIGGERS","MEMBERS_SELF_UPDATE","activeSelfId","endedSelfId","newHostId","oldHostId","newHost","oldHost","theHost","setIsHost","notHost","MEMBERS_HOST_UPDATE","activeHostId","endedHostId","delta","handleLocusInfoUpdatedParticipants","full","handleMembersUpdate","MEMBERS_UPDATE","currentContent","current","content","previousContent","previous","currentWhiteboard","whiteboard","previousWhiteboard","whoSharing","whoStopped","beneficiaryId","disposition","FLOOR_ACTION","GRANTED","RELEASED","shareMember","setIsContentSharing","stopMember","MEMBERS_CONTENT_UPDATE","activeSharingId","endedSharingId","setLocusUrl","setType","membersUpdate","updated","constructMembers","added","getAll","list","forEach","member","set","participants","LoggerProxy","logger","warn","memberUpdate","update","locus","url","ParameterError","owner","info","fullState","self","person","contentId","contentMediaShare","mediaShares","length","find","mediaShare","name","CONTENT","floor","beneficiary","whiteboardId","whiteboardMediaShare","WHITEBOARD","participant","hideInRoster","existing","push","Member","contentSharingId","whiteboardSharingId","invitee","alertIfActive","reject","MembersUtil","isInvalidInvitee","generateAddMemberOptions","addMembers","cancelPhoneInviteOptions","cancelPhoneInvite","memberIds","generateAdmitMemberOptions","admitMember","memberId","generateRemoveMemberOptions","removeMember","mute","generateMuteMemberOptions","muteMember","raise","generateRaiseHandMemberOptions","raiseOrLowerHandMember","requestingMemberId","generateLowerAllHandsMemberOptions","lowerAllHandsMember","moderator","generateTransferHostMemberOptions","transferHostToMember","tones","deviceArray","devices","device","deviceType","genderateSendDTMFOptions","sendDialPadKey","Error","StatelessWebexPlugin"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport {isEmpty} from 'lodash';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS, EVENT_TRIGGERS, FLOOR_ACTION, CONTENT, WHITEBOARD} from '../constants';\nimport Trigger from '../common/events/trigger-proxy';\nimport Member from '../member';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport ParameterError from '../common/errors/parameter';\n\nimport MembersCollection from './collection';\nimport MembersRequest from './request';\nimport MembersUtil from './util';\n\n/**\n   * Members Update Event\n   * Emitted when something in the roster list needs to be updated\n   * @event members:update\n   * @instance\n   * @property {Object} delta the changes to the members list\n   * @property {Array} delta.updated array only the updates, includes removals, as they will have updated status and member properties\n   * @property {Array} delta.added array added members to the meeting\n   * @property {Array} full array the full members collection\n   * @memberof Members\n   */\n\n/**\n   * Members Content Update Event\n   * Emitted when who is sharing changes\n   * @event members:content:update\n   * @instance\n   * @property {String} activeContentSharingId\n   * @property {String} endedContentSharingId\n   * @memberof Members\n   */\n\n/**\n   * Members Host Update Event\n   * Emitted when who is the host changes\n   * @event members:host:update\n   * @instance\n   * @property {String} activeHostId\n   * @property {String} endedHostId\n   * @memberof Members\n   */\n\n/**\n   * Members Self Update Event\n   * Emitted when who is the self changes\n   * @event members:self:update\n   * @instance\n   * @property {String} activeSelfId\n   * @property {String} endedSelfId\n   * @memberof Members\n   */\n\n/**\n * @class Members\n */\nexport default class Members extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   * @memberof Members\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * The Members Request object to interact with server\n     * @instance\n     * @type {MembersRequest}\n     * @private\n     * @memberof Members\n    */\n    this.membersRequest = new MembersRequest({}, options);\n    /**\n     * The Members Collection cache\n     * @instance\n     * @type {MembersCollection}\n     * @private\n     * @memberof Members\n    */\n    this.membersCollection = new MembersCollection();\n    /**\n     * The current locus url for the active meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.locusUrl = attrs.locusUrl || null;\n    /**\n     * The current hostId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.hostId = null;\n    /**\n     * The current type for the meeting, could be MEETING or CALL\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.type = null;\n    /**\n     * Locus has a self object, sent individually to the client\n     * i.e., each person in the call gets their own self object from locus.\n     * We need to maintain that self object, because we also get information about all the participants\n     * and differentiate those participants from self.\n     * The self id shouldnt ever change, but it does have properties that will change\n     * and we use values in locus-info, such as to determine if i am admitted to the meeting or not as guest.\n     * The current selfId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.selfId = null;\n    /**\n     * The current mediaShareContentId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.mediaShareContentId = null;\n    /**\n     * The current mediaShareWhiteboardId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.mediaShareWhiteboardId = null;\n    /**\n     * The current recordingId for the meeting, if it exists\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.recordingId = null;\n  }\n\n  /**\n   * Internal update the self Id value\n   * @param {Object} payload\n   * @param {Object} payload.newSelf\n   * @param {Object} payload.oldSelf\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusSelfUpdate(payload) {\n    let newSelfId = null;\n    let oldSelfId = null;\n\n    if (payload) {\n      if (payload.newSelf) {\n        newSelfId = payload.newSelf.id;\n      }\n      if (payload.oldSelf) {\n        oldSelfId = payload.oldSelf.id;\n      }\n    }\n    if (newSelfId) {\n      const theSelf = this.membersCollection.get(newSelfId);\n\n      if (theSelf) {\n        theSelf.setIsSelf(true);\n      }\n    }\n    if (oldSelfId) {\n      const notSelf = this.membersCollection.get(oldSelfId);\n\n      if (notSelf) {\n        notSelf.setIsSelf(false);\n      }\n    }\n    this.selfId = newSelfId;\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusSelfUpdate'\n      },\n      EVENT_TRIGGERS.MEMBERS_SELF_UPDATE,\n      {\n        activeSelfId: newSelfId,\n        endedSelfId: oldSelfId\n      }\n    );\n  }\n\n  /**\n   * Internal update the hostId value\n   * @param {Object} payload\n   * @param {Object} payload.newHost\n   * @param {Object} payload.oldHost\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusHostUpdate(payload) {\n    let newHostId = null;\n    let oldHostId = null;\n\n    if (payload) {\n      if (payload.newHost) {\n        newHostId = payload.newHost.id;\n      }\n      if (payload.oldHost) {\n        oldHostId = payload.oldHost.id;\n      }\n    }\n    if (newHostId) {\n      const theHost = this.membersCollection.get(newHostId);\n\n      if (theHost) {\n        theHost.setIsHost(true);\n      }\n    }\n    if (oldHostId) {\n      const notHost = this.membersCollection.get(oldHostId);\n\n      if (notHost) {\n        notHost.setIsHost(false);\n      }\n    }\n    this.hostId = newHostId;\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusHostUpdate'\n      },\n      EVENT_TRIGGERS.MEMBERS_HOST_UPDATE,\n      {\n        activeHostId: newHostId,\n        endedHostId: oldHostId\n      }\n    );\n  }\n\n  /**\n   * when new participant updates come in, both delta and full participants, update them in members collection\n   * delta object in the event will have {updated, added} and full will be the full membersCollection\n   * @param {Object} payload\n   * @param {Object} payload.participants\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusParticipantsUpdate(payload) {\n    if (payload) {\n      const delta = this.handleLocusInfoUpdatedParticipants(payload);\n      const full = this.handleMembersUpdate(delta); // SDK should propagate the full list for both delta and non delta updates\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'members',\n          function: 'locusParticipantsUpdate'\n        },\n        EVENT_TRIGGERS.MEMBERS_UPDATE,\n        {\n          delta,\n          full\n        }\n      );\n    }\n  }\n\n  /**\n   * Internal update the content id\n   * @param {Object} payload\n   * @param {Object} payload.current\n   * @param {Object} payload.previous\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusMediaSharesUpdate(payload) {\n    const currentContent = payload.current?.content;\n    const previousContent = payload.previous?.content;\n    const currentWhiteboard = payload.current?.whiteboard;\n    const previousWhiteboard = payload.previous?.whiteboard;\n    let whoSharing = null;\n    let whoStopped = null;\n\n    if (currentContent?.beneficiaryId) {\n      if (currentContent.disposition === FLOOR_ACTION.GRANTED) {\n        whoSharing = currentContent.beneficiaryId;\n        this.mediaShareWhiteboardId = null;\n        this.mediaShareContentId = whoSharing;\n      }\n\n      if (previousContent?.disposition === FLOOR_ACTION.GRANTED) {\n        if (currentContent.disposition === FLOOR_ACTION.RELEASED) {\n          whoStopped = currentContent.beneficiaryId;\n          this.mediaShareContentId = null;\n        }\n        else if (currentContent.disposition === FLOOR_ACTION.GRANTED && currentContent.beneficiaryId !== previousContent.beneficiaryId) {\n          whoStopped = previousContent.beneficiaryId;\n        }\n      }\n    }\n\n    if (currentWhiteboard?.beneficiaryId) {\n      if (currentWhiteboard.disposition === FLOOR_ACTION.GRANTED) {\n        whoSharing = currentWhiteboard.beneficiaryId;\n        this.mediaShareContentId = null;\n        this.mediaShareWhiteboardId = whoSharing;\n      }\n\n      if (previousWhiteboard?.disposition === FLOOR_ACTION.GRANTED) {\n        if (currentWhiteboard.disposition === FLOOR_ACTION.RELEASED) {\n          whoStopped = currentWhiteboard.beneficiaryId;\n          this.mediaShareWhiteboardId = null;\n        }\n        else if (currentWhiteboard.disposition === FLOOR_ACTION.GRANTED && currentWhiteboard.beneficiaryId !== previousWhiteboard.beneficiaryId) {\n          whoStopped = previousWhiteboard.beneficiaryId;\n        }\n      }\n    }\n\n    if (whoSharing) {\n      const shareMember = this.membersCollection.get(whoSharing);\n\n      if (shareMember) {\n        shareMember.setIsContentSharing(true);\n      }\n    }\n    if (whoStopped) {\n      const stopMember = this.membersCollection.get(whoStopped);\n\n      if (stopMember) {\n        stopMember.setIsContentSharing(false);\n      }\n    }\n\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusMediaSharesUpdate'\n      },\n      EVENT_TRIGGERS.MEMBERS_CONTENT_UPDATE,\n      {\n        activeSharingId: whoSharing,\n        endedSharingId: whoStopped\n      }\n    );\n  }\n\n\n  /**\n   * Internal update the locus url value\n   * @param {Object} payload\n   * @param {String} payload.locusUrl\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusUrlUpdate(payload) {\n    if (payload) {\n      this.setLocusUrl(null, payload);\n    }\n  }\n\n  /**\n   * Internal update the type of meeting\n   * @param {Object} payload\n   * @param {String} payload.type\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusFullStateTypeUpdate(payload) {\n    // TODO: at some point there could be a timing issue here, for updating each member\n    // ie., if the type changes AND there is no locus update, then each member will not know the type of call\n    // which means they cannot determine isMutable && isRemovable\n    // for now this scenario is impossible to occur since we always get a locus update when the type changes\n    // except for in delta locus meetings, but in that case, the type will always have been set differently\n    // from the outset anyway\n    if (payload) {\n      this.setType(payload);\n    }\n  }\n\n  /**\n   * sets values in the members collection for updated and added properties from delta\n   * @param {Object} membersUpdate {updated: [], added: []}\n   * @returns {Object} membersCollection\n   * @private\n   * @memberof Members\n   */\n  handleMembersUpdate(membersUpdate) {\n    if (membersUpdate) {\n      if (membersUpdate.updated) {\n        this.constructMembers(membersUpdate.updated);\n      }\n      if (membersUpdate.added) {\n        this.constructMembers(membersUpdate.added);\n      }\n    }\n\n    return this.membersCollection.getAll();\n  }\n\n  /**\n   * set members to the member collection from each updated/added lists as passed in\n   * @param {Array} list\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  constructMembers(list) {\n    list.forEach((member) => {\n      this.membersCollection.set(member.id, member);\n    });\n  }\n\n  /**\n   * Internal update the participants value\n   * @param {Object} payload\n   * @returns {Object}\n   * @private\n   * @memberof Members\n   */\n  handleLocusInfoUpdatedParticipants(payload) {\n    this.hostId = payload.hostId || this.hostId;\n    this.selfId = payload.selfId || this.selfId;\n    this.recordingId = payload.recordingId;\n    if (!payload.participants) {\n      LoggerProxy.logger.warn('Members:index#handleLocusInfoUpdatedParticipants --> participants payload is missing.');\n    }\n    const memberUpdate = this.update(payload.participants);\n\n    return memberUpdate;\n  }\n\n  /**\n   * Update the locus Url\n   * @param {Object} locus\n   * @param {String} [locusUrl] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  setLocusUrl(locus, locusUrl = null) {\n    if (locusUrl) {\n      this.locusUrl = locusUrl;\n    }\n    else if (locus && (locus.locusUrl || locus.url)) {\n      this.locusUrl = locus.locusUrl || locus.url;\n    }\n    else {\n      throw new ParameterError('Setting locusUrl for the Members module should be done with a locus object or locusUrl');\n    }\n  }\n\n  /**\n   * Update the host id\n   * @param {Object} locus\n   * @param {String} [hostId] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  setHostId(locus, hostId = null) {\n    if (hostId) {\n      this.hostId = hostId;\n    }\n    else if (locus) {\n      this.hostId = locus && locus.owner && locus.owner.info ? locus.owner.info : null;\n    }\n    else {\n      throw new ParameterError('Setting hostid for the Members module should be done with a locus object or hostId');\n    }\n  }\n\n  /**\n   * Update the type\n   * @param {Object} fullState\n   * @param {String} [type] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  setType(fullState, type = null) {\n    if (type) {\n      this.type = type;\n    }\n    else if (fullState) {\n      this.type = (fullState && fullState.type) || null;\n    }\n    else {\n      throw new ParameterError('Setting type for the Members module should be done with a fullstate object or type string');\n    }\n  }\n\n  /**\n   * Update the self Id\n   * @param {Object} locus\n   * @param {String} [selfId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setSelfId(locus, selfId = null) {\n    if (selfId) {\n      this.selfId = selfId;\n    }\n    else if (locus) {\n      this.selfId = locus && locus.self && locus.self.person && locus.self.person.id ? locus.self.person.id : null;\n    }\n    else {\n      throw new ParameterError('Setting selfid for the Members module should be done with a locus object or selfId');\n    }\n  }\n\n  /**\n   * Update the media share content id\n   * @param {Object} locus\n   * @param {String} [contentId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setMediaShareContentId(locus, contentId) {\n    if (contentId) {\n      this.mediaShareContentId = contentId;\n    }\n    else if (locus) {\n      const contentMediaShare =\n        locus.mediaShares &&\n        locus.mediaShares.length &&\n        locus.mediaShares.find((mediaShare) => mediaShare.name === CONTENT);\n\n      this.mediaShareContentId =\n        (contentMediaShare &&\n          contentMediaShare.floor &&\n          contentMediaShare.floor.beneficiary &&\n          contentMediaShare.floor.beneficiary.id) ||\n        null;\n    }\n    else {\n      throw new ParameterError('Setting hostid for the Members module should be done with a locus object or hostId');\n    }\n  }\n\n  /**\n   * Update the media share whiteboard id\n   * @param {Object} locus\n   * @param {String} [whiteboardId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setMediaShareWhiteboardId(locus, whiteboardId) {\n    if (whiteboardId) {\n      this.mediaShareWhiteboardId = whiteboardId;\n    }\n    else if (locus) {\n      const whiteboardMediaShare =\n        locus.mediaShares &&\n        locus.mediaShares.length &&\n        locus.mediaShares.find((mediaShare) => mediaShare.name === WHITEBOARD);\n\n      this.mediaShareWhiteboardId =\n        (whiteboardMediaShare &&\n          whiteboardMediaShare.floor &&\n          whiteboardMediaShare.floor.beneficiary &&\n          whiteboardMediaShare.floor.beneficiary.id) ||\n        null;\n    }\n    else {\n      throw new ParameterError('Setting hostid for the Members module should be done with a locus object or hostId');\n    }\n  }\n\n  /**\n   * Find all the updates, and added members\n   * Removed/left members will end up in updates\n   * Each array contains only members\n   * @param {Array} participants the locus participants\n   * @returns {Object} {added: {Array}, updated: {Array}}\n   * @private\n   * @memberof Members\n   */\n  update(participants) {\n    const membersUpdate = {added: [], updated: []};\n\n    if (participants) {\n      participants.forEach((participant) => {\n        if (participant.hideInRoster) {\n          return;\n        }\n        const existing = this.membersCollection.get(participant.id);\n\n        if (existing) {\n          // TODO: compare existing member to new participant coming in properties and determine if updated (this helps for non delta events)\n          // on client re renders, but we will have to determine what values to compare to determine difference, premature optimization\n          membersUpdate.updated.push(\n            new Member(participant, {\n              recordingId: this.recordingId,\n              selfId: this.selfId,\n              hostId: this.hostId,\n              contentSharingId: this.mediaShareContentId,\n              whiteboardSharingId: this.mediaShareWhiteboardId,\n              type: this.type\n            })\n          );\n        }\n        else {\n          membersUpdate.added.push(\n            new Member(participant, {\n              recordingId: this.recordingId,\n              selfId: this.selfId,\n              hostId: this.hostId,\n              contentSharingId: this.mediaShareContentId,\n              whiteboardSharingId: this.mediaShareWhiteboardId,\n              type: this.type\n            })\n          );\n        }\n      });\n    }\n\n    return membersUpdate;\n  }\n\n  /**\n   * Adds a guest Member to the associated meeting\n   * @param {String} invitee\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise}\n   * @memberof Members\n   */\n  addMember(invitee, alertIfActive) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meeting object must be defined.'));\n    }\n    if (MembersUtil.isInvalidInvitee(invitee)) {\n      return Promise.reject(\n        new ParameterError('The invitee must be defined with either a valid email, emailAddress or phoneNumber property.')\n      );\n    }\n    const options = MembersUtil.generateAddMemberOptions(invitee, this.locusUrl, alertIfActive);\n\n    return this.membersRequest.addMembers(options);\n  }\n\n  /**\n   * Cancels an outgoing PSTN call to the associated meeting\n   * @param {String} invitee\n   * @returns {Promise}\n   * @memberof Members\n   */\n  cancelPhoneInvite(invitee) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meeting object must be defined.'));\n    }\n    if (MembersUtil.isInvalidInvitee(invitee)) {\n      return Promise.reject(\n        new ParameterError('The invitee must be defined with a valid phoneNumber property.')\n      );\n    }\n    const options = MembersUtil.cancelPhoneInviteOptions(invitee, this.locusUrl);\n\n\n    return this.membersRequest.cancelPhoneInvite(options);\n  }\n\n  /**\n   * Admits waiting members (invited guests to meeting)\n   * @param {Array} memberIds\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  admitMembers(memberIds) {\n    if (isEmpty(memberIds)) {\n      return Promise.reject(new ParameterError('No member ids provided to admit.'));\n    }\n    const options = MembersUtil.generateAdmitMemberOptions(memberIds, this.locusUrl);\n\n    return this.membersRequest.admitMember(options);\n  }\n\n  /**\n   * Removes a member from the meeting\n   * @param {String} memberId\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  removeMember(memberId) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meeting object must be defined.'));\n    }\n    if (!memberId) {\n      return Promise.reject(new ParameterError('The member id must be defined to remove the member.'));\n    }\n    const options = MembersUtil.generateRemoveMemberOptions(memberId, this.locusUrl);\n\n    return this.membersRequest.removeMember(options);\n  }\n\n  /**\n   * Audio mutes another member in a meeting\n   * @param {String} memberId\n   * @param {boolean} [mute] default true\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  muteMember(memberId, mute = true) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meetings members object must be defined.'));\n    }\n    if (!memberId) {\n      return Promise.reject(new ParameterError('The member id must be defined to mute the member.'));\n    }\n    const options = MembersUtil.generateMuteMemberOptions(memberId, mute, this.locusUrl);\n\n    return this.membersRequest.muteMember(options);\n  }\n\n  /**\n   * Raise or lower the hand of a member in a meeting\n   * @param {String} memberId\n   * @param {boolean} [raise] - to raise hand (=true) or lower (=false), default: true\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  raiseOrLowerHand(memberId, raise = true) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meetings members object must be defined.'));\n    }\n    if (!memberId) {\n      return Promise.reject(new ParameterError('The member id must be defined to raise/lower the hand of the member.'));\n    }\n    const options = MembersUtil.generateRaiseHandMemberOptions(memberId, raise, this.locusUrl);\n\n    return this.membersRequest.raiseOrLowerHandMember(options);\n  }\n\n  /**\n   * Lower all hands of members in a meeting\n   * @param {String} requestingMemberId - id of the participant which requested the lower all hands\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  lowerAllHands(requestingMemberId) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meetings members object must be defined.'));\n    }\n    if (!requestingMemberId) {\n      return Promise.reject(new ParameterError('The requestingMemberId must be defined to lower all hands in a meeting.'));\n    }\n    const options = MembersUtil.generateLowerAllHandsMemberOptions(requestingMemberId, this.locusUrl);\n\n    return this.membersRequest.lowerAllHandsMember(options);\n  }\n\n\n  /**\n   * Transfers the host to another member\n   * @param {String} memberId\n   * @param {boolean} [moderator] default true\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  transferHostToMember(memberId, moderator = true) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meetings members object must be defined.'));\n    }\n    if (!memberId) {\n      return Promise.reject(new ParameterError('The member id must be defined to transfer host to the member.'));\n    }\n    const options = MembersUtil.generateTransferHostMemberOptions(memberId, moderator, this.locusUrl);\n\n    return this.membersRequest.transferHostToMember(options);\n  }\n\n\n  /**\n   * Sends DTMF tones for the PSTN member of a meeting\n   * @param {String} tones a string of one or more DTMF tones to send\n   * @param {String} memberId member id\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  sendDialPadKey(tones = '', memberId = '') {\n    if (!tones && tones !== 0) {\n      return Promise.reject(new ParameterError('DMTF tones must be passed in'));\n    }\n\n    const member = this.membersCollection.get(memberId);\n\n    if (!member) {\n      return Promise.reject(new ParameterError('there is no member associated with that Id'));\n    }\n\n    const {locusUrl} = this;\n\n    const deviceArray = member.participant.devices;\n    const device = deviceArray.find(({deviceType}) => deviceType === 'SIP');\n    const url = device?.url;\n\n    if (locusUrl && url) {\n      const options = MembersUtil.genderateSendDTMFOptions(url, tones, memberId, locusUrl);\n\n      return this.membersRequest.sendDialPadKey(options);\n    }\n\n    return Promise.reject(new Error('Members:index#sendDialPadKey --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service.'));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;IACqBA,O;;;;;EAGnB;AACF;AACA;AACA;AACA;AACA;EACE,iBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;IAAA;;IAAA;IAC1B,0BAAM,EAAN,EAAUA,OAAV;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IAR8B,wFARhBC,mBAQgB;IAS1B,MAAKC,cAAL,GAAsB,IAAIC,gBAAJ,CAAmB,EAAnB,EAAuBH,OAAvB,CAAtB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKI,iBAAL,GAAyB,IAAIC,mBAAJ,EAAzB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,QAAL,GAAgBP,KAAK,CAACO,QAAN,IAAkB,IAAlC;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,MAAL,GAAc,IAAd;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,IAAL,GAAY,IAAZ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,MAAL,GAAc,IAAd;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,mBAAL,GAA2B,IAA3B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,sBAAL,GAA8B,IAA9B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKC,WAAL,GAAmB,IAAnB;IA/E0B;EAgF3B;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,yBAAgBC,OAAhB,EAA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"}