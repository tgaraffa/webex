{"version":3,"names":["debug","require","Memberships","WebexPlugin","extend","listen","createEventEnvelope","webex","SDK_EVENT","EXTERNAL","RESOURCE","MEMBERSHIPS","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","WEBEX_ACTIVITY","event","onWebexApiEvent","create","membership","request","method","service","resource","body","res","get","id","items","list","options","qs","Page","listWithReadStatus","deconstructedId","deconstructHydraId","roomId","conversation","cluster","ensureMyIdIsAvailable","services","waitForCatalog","participantAckFilter","activitiesLimit","resp","roomUUID","buildHydraRoomId","particpants","participants","lastReadInfo","roomType","getHydraRoomType","tags","myId","me","isRoomHidden","includes","ACTIVITY_TAG","HIDDEN","i","length","participant","participantInfo","buildHydraMembershipId","entryUUID","personId","buildHydraPersonId","personEmail","entryEmailAddress","entryEmail","personDisplayName","displayName","personOrgId","buildHydraOrgId","orgId","isMonitor","roomProperties","lastSeenId","buildHydraMessageId","lastSeenActivityUUID","lastSeenDate","lastSeenActivityDate","isModerator","push","resolve","e","reject","remove","statusCode","undefined","update","updateLastSeen","message","activity","acknowledge","ack","object","actor","target","emailAddress","created","published","data","verb","ACTIVITY_VERB","CREATE","membershipCreatedEventDataArray","map","output","getMembershipEvent","EVENT_TYPE","CREATED","forEach","trigger","ADD","membershipCreatedEventData","LEAVE","membershipDeletedEventData","DELETED","ADD_MODERATOR","REMOVE_MODERATOR","HIDE","membershipUpdatedEventData","UPDATED","ACKNOWLEDGE","membershipSeenEventData","SEEN","sdkEvent","getHydraClusterString","url","member","space","actorId","SPACE_TYPE","DIRECT","ACTIVITY_FIELD","ACTOR","TARGET","OBJECT","logger","error"],"sources":["memberships.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  ensureMyIdIsAvailable,\n  buildHydraMembershipId,\n  buildHydraMessageId,\n  buildHydraOrgId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  getHydraClusterString,\n  getHydraRoomType,\n  deconstructHydraId\n} from '@webex/common';\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('memberships');\n\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\nconst Memberships = WebexPlugin.extend({\n  /**\n   * Register to listen for incoming membership events\n   * This is an alternate approach to registering for membership webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://webex.github.io/webex-js-sdk/samples/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Memberships\n   * @returns {Promise}\n   * @example\n   * webex.memberships.listen()\n   *   .then(() => {\n   *     console.log('listening to membership events');\n   *     webex.memberships.on('created', (event) => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('updated', (event) => {\n   *        console.log(`Got a membership:updated event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('seen', (event) => {\n   *       // This represents a \"read receipt\" and will include a\n   *       // lastSeenId for the message this member has just \"read\",\n   *       // There is currently no equivelent webhook for this event.\n   *       console.log(`Got a membership:seen event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('deleted', (event) =>  => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *   })\n   *   .catch((e) => console.error(`Unable to register for membership events: ${e}`));\n   * // App logic goes here...\n   * // Later when it is time to clean up\n   * webex.memberships.stopListening();\n   * webex.memberships.off('created');\n   * webex.memberships.off('updated');\n   * webex.memberships.off('seen');\n   * webex.memberships.off('deleted');\n\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.WEBEX_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * webex.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus(options) {\n    const deconstructedId = deconstructHydraId(options.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return ensureMyIdIsAvailable(this.webex)\n      .then(() => this.webex.internal.services.waitForCatalog('postauth')\n        .then(() => this.webex.internal.conversation.get(conversation,\n          {\n            participantAckFilter: 'all', // show lastAck info for each participant\n            activitiesLimit: 0 // don't send the whole history of activity\n          })\n          .then((resp) => {\n            try {\n              // We keep track of the last read message by each user\n              const roomUUID = resp.id;\n              const roomId = buildHydraRoomId(roomUUID, conversation.cluster);\n              const particpants = resp.participants.items;\n              const lastReadInfo = {items: []};\n              const roomType = getHydraRoomType(resp.tags);\n              const myId = this.webex.internal.me.id;\n              const isRoomHidden = resp.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n              for (let i = 0; i < particpants.length; i += 1) {\n                const participant = particpants[i];\n                const participantInfo = {\n                  id: buildHydraMembershipId(participant.entryUUID, roomUUID,\n                    conversation.cluster),\n                  roomId,\n                  personId: buildHydraPersonId(participant.entryUUID),\n                  personEmail: participant.entryEmailAddress ||\n                    participant.entryEmail,\n                  personDisplayName: participant.displayName,\n                  personOrgId: buildHydraOrgId(participant.orgId,\n                    conversation.cluster),\n                  isMonitor: false, // deprecated, but included for completeness\n                  roomType\n                  // created is not available in the conversations payload\n                };\n\n                if ((isRoomHidden) && (participantInfo.personId === myId)) {\n                  participantInfo.isRoomHidden = isRoomHidden;\n                }\n\n                if ('roomProperties' in participant) {\n                  if ('lastSeenActivityDate' in participant.roomProperties) {\n                    participantInfo.lastSeenId =\n                      buildHydraMessageId(participant.roomProperties.lastSeenActivityUUID,\n                        conversation.cluster);\n                    participantInfo.lastSeenDate =\n                      participant.roomProperties.lastSeenActivityDate;\n                  }\n                  if ('isModerator' in participant.roomProperties) {\n                    participantInfo.isModerator = participant.roomProperties.isModerator;\n                  }\n                }\n\n                lastReadInfo.items.push(participantInfo);\n              }\n\n              return Promise.resolve(lastReadInfo);\n            }\n            catch (e) {\n              return Promise.reject(e);\n            }\n          })));\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return webex.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * // Change membership to make user a moderator\n   * var membership, room;\n   * webex.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   * @example\n   * // Hide a one on one space\n   * var assert = require('assert');\n   * var membership, myId;\n   * webex.people.get('me')\n   *   .then(function(person) {\n   *     myId = personId;\n   *     return webex.messages.create({\n   *       toPersonEmail: 'otherUser@acme.com',\n   *       text: 'This message will create a 1-1 space'\n   *     });\n   *   })\n   *   then(function(message) {\n   *     return webex.memberships.list({\n   *       roomId: message.roomId,\n   *       personId: myId\n   *     });\n   *   })\n   *   .then((memberships) => {\n   *     membership = memberships.items[0];\n   *     assert.equal(membership.isRoomHidden, false);\n   *     membership.isRoomHidden = true;\n   *     // This will generate a memberships:updated event\n   *     // that will only be seen by this user\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function(membership) {\n   *     assert.equal(membership.isRoomHidden, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership.\n   * Call this method to send a \"read receipt\" for a given message.\n   * This will update the lastSeenId for the user's membership in\n   * space where the message is.\n   * @instance\n   * @memberof Memberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen(message) {\n    const activity = {\n      id: deconstructHydraId(message.id).id\n    };\n    const deconstructedId = deconstructHydraId(message.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return this.webex.internal.services.waitForCatalog('postauth')\n      .then(() => this.webex.internal.conversation.acknowledge(conversation, activity)\n        .then((ack) => ({\n          lastSeenId: buildHydraMessageId(ack.object.id, conversation.cluster),\n          id: buildHydraMembershipId(ack.actor.entryUUID,\n            ack.target.id, conversation.cluster),\n          personId: buildHydraPersonId(ack.actor.entryUUID, conversation.cluster),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: buildHydraOrgId(ack.actor.orgId, conversation.cluster),\n          roomId: buildHydraRoomId(ack.target.id, conversation.cluster),\n          roomType: getHydraRoomType(ack.target.tags),\n          isRoomHidden: false, // any activity unhides a space.\n          isMonitor: false, // deprecated, returned for back compat\n          created: ack.published\n        })));\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the public listen() method.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        const membershipCreatedEventDataArray =\n          activity.object.participants.items.map((participant) => {\n            const output = cloneDeep(activity);\n\n            output.target = cloneDeep(activity.object);\n            output.object = cloneDeep(participant);\n\n            return this.getMembershipEvent(output,\n              SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n          });\n\n        membershipCreatedEventDataArray.forEach((data) => {\n          if (data) {\n            debug(`membership \"created\" payload: ${JSON.stringify(data)}`);\n            this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, data);\n          }\n        });\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        const membershipCreatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug(`membership \"created\" payload: \\\n            ${JSON.stringify(membershipCreatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        const membershipDeletedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug(`membership \"deleted\" payload: \\\n            ${JSON.stringify(membershipDeletedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        const membershipUpdatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipUpdatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        const membershipSeenEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipSeenEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      const cluster = (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) ?\n        getHydraClusterString(this.webex, activity.target.url) :\n        getHydraClusterString(this.webex, activity.url);\n      let member;\n      let space;\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = buildHydraPersonId(activity.actor.entryUUID, cluster);\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.target.id, cluster);\n        sdkEvent.data.roomType = getHydraRoomType(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      }\n      else {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.object.id, cluster);\n        sdkEvent.data.roomType = SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n        // currently hidden attribute is only set on 1-1\n        sdkEvent.data.isRoomHidden = true;\n      }\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if ((activity.object.roomProperties) && (activity.object.roomProperties.isModerator)) {\n          sdkEvent.data.isModerator = true;\n        }\n        else {\n          sdkEvent.data.isModerator = false;\n        }\n      }\n      // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n      if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // The space with the read message is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n        // And the \"object\" is the message that was last seen\n        sdkEvent.data.lastSeenId = buildHydraMessageId(activity.object.id, cluster);\n      }\n      else if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // But the space is now the \"object\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      }\n      else {\n        // For most memberships events the person is the 'object\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n        // and the space is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = buildHydraMembershipId(activity[member].entryUUID,\n        activity[space].id, cluster);\n      sdkEvent.data.personId = buildHydraPersonId(activity[member].entryUUID, cluster);\n      sdkEvent.data.personEmail =\n        activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = buildHydraOrgId(activity[member].orgId, cluster);\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for memberships:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default Memberships;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAIA;;AAaA;;AAjBA;AACA;AACA;AAkBA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,aAAjB,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,WAAW,GAAGC,sBAAA,CAAYC,MAAZ,CAAmB;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEEC,MA7CqC,oBA6C5B;IAAA;;IACP;IACA,OAAO,IAAAC,2BAAA,EAAoB,KAAKC,KAAzB,EACLC,iBAAA,CAAUC,QAAV,CAAmBC,QAAnB,CAA4BC,WADvB,EAEJC,IAFI,CAEC,UAACC,QAAD,EAAc;MAClB,KAAI,CAACC,aAAL,GAAqBD,QAArB,CADkB,CAGlB;;MACA,OAAO,KAAI,CAACN,KAAL,CAAWQ,QAAX,CAAoBC,OAApB,CAA4BC,OAA5B,GAAsCL,IAAtC,CAA2C,YAAM;QACtD,KAAI,CAACM,QAAL,CAAc,KAAI,CAACX,KAAL,CAAWQ,QAAX,CAAoBC,OAAlC,EACER,iBAAA,CAAUW,QAAV,CAAmBC,cADrB,EAEE,UAACC,KAAD;UAAA,OAAW,KAAI,CAACC,eAAL,CAAqBD,KAArB,CAAX;QAAA,CAFF;MAGD,CAJM,CAAP;IAKD,CAXI,CAAP;EAYD,CA3DoC;;EA6DrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,MA1FqC,kBA0F9BC,UA1F8B,EA0FlB;IACjB,OAAO,KAAKC,OAAL,CAAa;MAClBC,MAAM,EAAE,MADU;MAEl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"}