{"version":3,"names":["decryptTextProp","name","ctx","key","object","transform","transforms","toArray","decryptObject","undefined","resolve","objectType","encryptionKeyUrl","all","files","items","map","item","decryptSubmit","inputs","decryptionFailureMessage","webex","internal","conversation","config","then","JSON","parse","catch","reason","logger","warn","decryptReaction2summary","reactions","reaction","decryptReaction2selfsummary","decryptReaction2","decryptThread","threadObject","promises","childActivities","child","decryptMeetingcontainer","meetingContainerActivity","displayName","usableKey","push","extensions","itemsToDecrypt","filter","data","forEach","itemToDecrypt","decryptConversation","activities","error","url","avatarEncryptionKeyUrl","avatar","previous","previousValue","decryptActivity","activity","keyUrl","children","decryptMicroappinstance","microappInstance","decryptComment","comment","cards","index","decryptContent","content","contentCategory","decryptContentFiles","links","decryptContentLinks","decryptEvent","event","location","split","length","decryptFile","file","transcodedCollection","image","decryptLink","link","decryptTranscodedContent","transcodedContent","decryptImageURI","imageURI","encryption","decryptText","plaintext","keepEncryptedProperties","encryptedPropName","decryptPropCardItem","array","String","decryptPropScr","decryptScr","scr","decryptPropSslr","sslr","decryptPropDisplayName","decryptPropContent","decryptPropModel","decryptPropLocation","decryptPropTopic"],"sources":["decryption-transforms.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {camelCase, capitalize, curry} from 'lodash';\n\nimport toArray from './to-array';\n\nconst decryptTextProp = curry((name, ctx, key, object) => ctx.transform('decryptTextProp', name, key, object));\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('inbound', {\n\n  /**\n   * This function is used recursively to decrypt various properties on convesations, activities, etc\n   * @param   {Object} ctx    An object containg a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    }\n\n    // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n    if (object.objectType === 'transcodedContent') {\n      return Promise.all(object.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n    }\n\n    return ctx.transform(`decrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  /**\n   * Decrypt an individual submit object from a cardAction activity\n   *   (object.objectType === 'sumbit')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex submit object\n   * these objects are returned when a user clicks on a Action.Submit button in a card\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptSubmit(ctx, key, object) {\n    if (!object.inputs) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.transform('decryptPropCardItem', 0, key, [object.inputs])\n      .then((inputs) => {\n        object.inputs = JSON.parse(inputs[0]); // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt attachmentAction.inputs: ${reason}`);\n        object.inputs = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n   * Decrypt an individual reaction2Summary activity (object.objectType === 'reaction2Summary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2Summary object\n   * these objects are returned by various conversation APIs and over mercury\n   * represents an aggregated summary of all reactions to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2summary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2SelfSummary activity (object.objectType === 'reaction2SelfSummary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2SelfSummary object\n   * these objects are returned by various conversation APIs and NOT over mercury\n   * they are ONLY received by the self user\n   * they represent ONLY the self user's reactions and are used for enforcing\n   * limit of times they can react to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2selfsummary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2 activity (object.objectType === 'reaction2')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2 object\n   * these objects are returned by various conversation APIs and over mercury\n   * ONLY self users receive these objects\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2(ctx, key, object) {\n    return ctx.transform('decryptPropDisplayName', key, object);\n  },\n\n  /**\n * Decrypt an individual threadObject\n * @param   {Object} ctx      An object containg a webex instance and a transform\n * @param   {Object} threadObject An instance of a Webex threadObject (the objects returned by the /conversation/api/v1/threads api)\n * @returns {Promise}         Returns a ctx.transform promise\n */\n  decryptThread(ctx, threadObject) {\n    let promises = [];\n\n    if (threadObject.childActivities && Array.isArray(threadObject.childActivities)) {\n      promises = threadObject.childActivities.map((child) => ctx.transform('decryptObject', null, child));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n * Decrypt an individual meeting container activity\n * @param   {Object} ctx      An object containg a webex instance and a transform\n * @param   {object} key      KMS encryption key url\n * @param   {Object} meetingContainerActivity An instance of a Webex meeting container activity\n * @returns {Promise}         Returns a ctx.transform promise\n */\n  decryptMeetingcontainer(ctx, key, meetingContainerActivity) {\n    const promises = [];\n\n    if (meetingContainerActivity.displayName) {\n      const usableKey = meetingContainerActivity.encryptionKeyUrl || key;\n\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, meetingContainerActivity));\n    }\n\n    if (meetingContainerActivity.extensions) {\n      const itemsToDecrypt = meetingContainerActivity.extensions.items.filter((item) => item.data.objectType === 'recording');\n\n      itemsToDecrypt.forEach((itemToDecrypt) => {\n        promises.push(ctx.transform('decryptPropTopic', itemToDecrypt.encryptionKeyUrl, itemToDecrypt.data));\n      });\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a given conversation and it's activites by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containg a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation(ctx, key, conversation) {\n    const promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(Promise.all(conversation.activities.items.map((item) => ctx.transform('decryptObject', null, item))));\n    }\n\n    const usableKey = conversation.encryptionKeyUrl || key;\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    if (usableKey) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation)\n        .catch((error) => {\n          ctx.webex.logger.warn('plugin-conversation: failed to decrypt display name of ', conversation.url, error);\n          Promise.resolve(decryptionFailureMessage);\n        }));\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar));\n    }\n    // TODO (holsted 04/06/19): This was deprecated in favor of .previousValue below. I wanted to remove this entirely\n    // but I wasn't sure if some open source use cases may be reading from cached conversations or not so leaving it for now.\n    if (conversation.previous) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previous));\n    }\n    if (conversation.previousValue) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previousValue));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return Promise.resolve(activity);\n    }\n\n    const keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n\n    let promises = [];\n\n    // iterate and recursively decrypt over children objects\n\n    if (activity.children && Array.isArray(activity.children)) {\n      promises = activity.children.map((child) => ctx.transform('decryptObject', keyUrl, child.activity));\n    }\n\n    promises.push(ctx.transform('decryptObject', keyUrl, activity.object));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a contex transform\n   */\n  decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n* Decrypts a comment...\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {String} key KMS key\n* @param {Object} comment A comment object with a displayName and content (encrypted)\n* @returns {Promise} Returns the results of Promise.all on two transforms\n*/\n  decryptComment(ctx, key, comment) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, comment),\n      ctx.transform('decryptPropContent', key, comment)\n    ];\n\n    if (comment.cards && Array.isArray(comment.cards)) {\n      comment.cards.map((item, index) => promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !Array.isArray(content.files.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.files.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && Array.isArray(content.links.items)) {\n      content.links.items.forEach((item) => promises.push(ctx.transform('decryptObject', key, item)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !Array.isArray(content.links.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.links.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent(ctx, key, event) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, event)\n    ];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile(ctx, key, file) {\n    // using object encryption keyUrl for images instead of activity encryptionKeyUrl\n    if (file.encryptionKeyUrl && file.encryptionKeyUrl !== key) {\n      key = file.encryptionKeyUrl;\n    }\n\n    return Promise.all([\n      file.transcodedCollection && Promise.all(file.transcodedCollection.items.map((item) => ctx.transform('decryptObject', key, item))),\n      ctx.transform('decryptPropScr', key, file),\n      ctx.transform('decryptPropDisplayName', key, file),\n      ctx.transform('decryptPropContent', key, file),\n      file.image && ctx.transform('decryptPropScr', key, file.image)\n    ]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink(ctx, key, link) {\n    return Promise.all([\n      ctx.transform('decryptPropSslr', key, link),\n      ctx.transform('decryptPropDisplayName', key, link)\n    ]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent(ctx, key, transcodedContent) {\n    return Promise.all(transcodedContent.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, object[name])\n      .then((plaintext) => {\n        if (ctx.webex.config.conversation.keepEncryptedProperties) {\n          const encryptedPropName = camelCase(`encrypted_${name}`);\n\n          object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n        }\n\n        object[name] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt ${name} `, reason);\n        object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n* Decrypting an element in an Array.\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {Integer} index Property of an object to be decrypted\n* @param {String} key KMS key\n* @param {Array} array An array of Strings to be decrypted\n* @returns {Promise} Returns a lonely Promise\n*/\n  decryptPropCardItem(ctx, index, key, array) {\n    if (!Number.isInteger(index) || !array || !Array.isArray(array) || index < 0 || index >= array.length || !(array[index] instanceof String || typeof array[index] === 'string')) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, array[index])\n      .then((plaintext) => {\n        array[index] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt card at ${index} `, reason);\n        array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr)\n      .then((scr) => {\n        object.scr = scr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr)\n      .then((sslr) => {\n        object.sslr = sslr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  decryptPropDisplayName: decryptTextProp('displayName'),\n\n  decryptPropContent: decryptTextProp('content'),\n\n  decryptPropModel: decryptTextProp('model'),\n\n  decryptPropLocation: decryptTextProp('location'),\n\n  decryptPropTopic: decryptTextProp('topic')\n});\n"],"mappings":"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"}