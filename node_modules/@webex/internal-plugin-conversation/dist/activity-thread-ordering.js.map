{"version":3,"names":["defaultMinDisplayableActivities","minBatchSize","fetchLoopCountMax","batchSizeIncrementCount","setValue","destination","key","value","set","getValue","source","get","getActivityObjectsFromMap","hashMap","map","activity","activityManager","replyActivityHash","editActivityHash","reactionActivityHash","reactionSelfActivityHash","handleNewReply","replyAct","replyParentId","getParentId","existingReplyHash","id","replyHash","handleNewEdit","editAct","isTombstone","verb","ACTIVITY_TYPES","TOMBSTONE","editParentId","existingEdit","isNewer","reactionHelper","reactionAct","hash","reactionParentId","existingReaction","handleNewReaction","handleNewReactionSelf","reactionSelfAct","getActivityHandlerByKey","REACTION","REACTION_SELF","EDIT","REPLY","getActivityByTypeAndParentId","type","bookendManager","oldestAct","newestAct","getOldestAct","getNewestAct","setOldestAct","act","setNewestAct","setBookends","activities","oldestActsFirst","sortActivitiesByPublishedDate","newestInBatch","oldestInBatch","noMoreActivitiesManager","noMoreActs","noOlderActs","noNewerActs","getNoMoreActs","checkAndSetNoOlderActs","getActivityType","CREATE","checkAndSetNoNewerActs","length","checkAndSetNoMoreActs","queryType","visibleActs","currentBatchSize","NEWER","OLDER","INITIAL","MID","rootActivityManager","rootActivityHash","addNewRoot","rootAct","getRootActivityHash","getLoopCounterFailsafe","fetchLoopCount","Error","getQuery","queryOptions","newestPublishedDate","oldestPublishedDate","batchSize","activityToSearch","sinceDate","lastActivityFirst","searchType","midDate","parent","published","limit","maxDate"],"sources":["activity-thread-ordering.js"],"sourcesContent":["import {last} from 'lodash';\n\nimport {\n  ACTIVITY_TYPES,\n  getParentId,\n  isNewer,\n  getActivityType,\n  sortActivitiesByPublishedDate,\n  NEWER,\n  OLDER,\n  INITIAL,\n  MID\n} from './activities';\n\nexport const defaultMinDisplayableActivities = 20;\nexport const minBatchSize = 10;\nexport const fetchLoopCountMax = 100;\nexport const batchSizeIncrementCount = 10;\n\n// use accessors for ease of refactoring underlying implementation\n/**\n * @param {Map} destination destination map object for data. Currently a Map, but could be refactored to use any type.\n * @param {string} key\n * @param {any} value\n * @returns {Map}\n */\nexport const setValue = (destination, key, value) => destination.set(key, value);\n/**\n * @param {Map} source source map object to access. Currently expects a Map, but could be refactored to use any type\n * @param {string} key\n * @returns {Map}\n */\nexport const getValue = (source, key) => source.get(key);\n\nexport const getActivityObjectsFromMap = (hashMap) => Array.from(hashMap).map(([, activity]) => activity);\n/**\n * creates maps for various activity types and defines handlers for working with stored activities\n * utilizes revealing module pattern to close over state and only expose certain necessary functions for altering state\n * @function\n * @returns {object}\n * getActivityHandlerByKey(activityType) - accepts a key to map to a defined activity handler\n * getActivityByTypeAndParentId(activityType, parentId) accepts a key and a parent ID to return an activity of that type whose parent is the parentId\n */\nexport const activityManager = () => {\n  const replyActivityHash = new Map();\n  const editActivityHash = new Map();\n  const reactionActivityHash = new Map();\n  const reactionSelfActivityHash = new Map();\n\n  const handleNewReply = (replyAct) => {\n    const replyParentId = getParentId(replyAct);\n    const existingReplyHash = getValue(replyActivityHash, replyParentId);\n\n    if (existingReplyHash) {\n      setValue(existingReplyHash, replyAct.id, replyAct);\n    }\n    else {\n      const replyHash = new Map();\n\n      setValue(replyHash, replyAct.id, replyAct);\n      setValue(replyActivityHash, replyParentId, replyHash);\n    }\n  };\n\n  const handleNewEdit = (editAct) => {\n    const isTombstone = editAct.verb === ACTIVITY_TYPES.TOMBSTONE;\n\n    // we can ignore tombstone edits in favor of the newer one\n    if (isTombstone) {\n      return;\n    }\n\n    const editParentId = getParentId(editAct);\n    const existingEdit = getValue(editActivityHash, editParentId);\n\n    // edited activity must be newer than what we already have\n    if (!existingEdit || isNewer(editAct, existingEdit)) {\n      setValue(editActivityHash, editParentId, editAct);\n    }\n  };\n\n  // logic is identical between reactions and reaction selfs, so handler simply passes the activity and the correct hash\n  const reactionHelper = (reactionAct, hash) => {\n    const reactionParentId = getParentId(reactionAct);\n    const existingReaction = getValue(hash, reactionParentId);\n\n    // reaction activity must be newer than what we already have\n    if (!existingReaction || isNewer(reactionAct, existingReaction)) {\n      setValue(hash, reactionParentId, reactionAct);\n    }\n  };\n\n  const handleNewReaction = (reactionAct) => {\n    reactionHelper(reactionAct, reactionActivityHash);\n  };\n\n  const handleNewReactionSelf = (reactionSelfAct) => {\n    reactionHelper(reactionSelfAct, reactionSelfActivityHash);\n  };\n\n  const getActivityHandlerByKey = (key) => ({\n    [ACTIVITY_TYPES.REACTION]: handleNewReaction,\n    [ACTIVITY_TYPES.REACTION_SELF]: handleNewReactionSelf,\n    [ACTIVITY_TYPES.EDIT]: handleNewEdit,\n    [ACTIVITY_TYPES.REPLY]: handleNewReply\n  }[key]);\n\n  const getActivityByTypeAndParentId = (type, id) => ({\n    [ACTIVITY_TYPES.EDIT]: getValue(editActivityHash, id),\n    [ACTIVITY_TYPES.REPLY]: getValue(replyActivityHash, id),\n    [ACTIVITY_TYPES.REACTION]: getValue(reactionActivityHash, id),\n    [ACTIVITY_TYPES.REACTION_SELF]: getValue(reactionSelfActivityHash, id)\n  }[type]);\n\n  return {\n    getActivityHandlerByKey,\n    getActivityByTypeAndParentId\n  };\n};\n\n/**\n * encapsulates state and logic for managing oldest and newest activities\n * @returns {object} setters and getters for activity state management\n */\nexport const bookendManager = () => {\n  // keep track of generator state, like what our current oldest & newest activities are\n  let oldestAct;\n  let newestAct;\n\n  const getOldestAct = () => oldestAct;\n  const getNewestAct = () => newestAct;\n\n  const setOldestAct = (act) => {\n    if (!oldestAct) {\n      oldestAct = act;\n    }\n    else if (isNewer(oldestAct, act)) {\n      oldestAct = act;\n    }\n  };\n\n  const setNewestAct = (act) => {\n    if (!newestAct) {\n      newestAct = act;\n    }\n    else if (isNewer(act, newestAct)) {\n      newestAct = act;\n    }\n  };\n\n  const setBookends = (activities) => {\n    const oldestActsFirst = sortActivitiesByPublishedDate(activities);\n\n    const newestInBatch = last(oldestActsFirst);\n    const oldestInBatch = oldestActsFirst[0];\n\n    setOldestAct(oldestInBatch);\n    setNewestAct(newestInBatch);\n  };\n\n  return {\n    setBookends,\n    getNewestAct,\n    getOldestAct\n  };\n};\n\n/**\n * encapsulates state and logic for when there are no more fetchable activities from convo\n * @returns {object} setters and getters for no more activities logic\n */\nexport const noMoreActivitiesManager = () => {\n  // used to determine if we should continue to fetch older activities\n  // must be set per iteration, as querying newer activities is still valid when all end of convo has been reached\n  let noMoreActs = false;\n  let noOlderActs = false;\n  let noNewerActs = false;\n\n  const getNoMoreActs = () => noMoreActs;\n\n  const checkAndSetNoOlderActs = (act) => {\n    if (!noOlderActs && getActivityType(act) === ACTIVITY_TYPES.CREATE) {\n      noOlderActs = true;\n    }\n  };\n\n  const checkAndSetNoNewerActs = (activities) => {\n    if (!activities || !activities.length) {\n      noNewerActs = true;\n    }\n  };\n\n  const checkAndSetNoMoreActs = (queryType, visibleActs, currentBatchSize) => {\n    if (\n      (queryType === NEWER && noNewerActs) ||\n      ((queryType === OLDER || queryType === INITIAL) && noOlderActs) ||\n      (queryType === MID && visibleActs < currentBatchSize && noOlderActs)\n    ) {\n      noMoreActs = true;\n    }\n  };\n\n  return {\n    getNoMoreActs,\n    checkAndSetNoMoreActs,\n    checkAndSetNoNewerActs,\n    checkAndSetNoOlderActs\n  };\n};\n\n/**\n * encapsulates state and logic for managing root activities\n * @returns {object} setters and getters for activity state management\n */\nexport const rootActivityManager = () => {\n  const rootActivityHash = new Map();\n\n  const addNewRoot = (rootAct) => {\n    setValue(rootActivityHash, rootAct.id, rootAct);\n  };\n\n  const getRootActivityHash = () => rootActivityHash;\n\n  return {\n    addNewRoot,\n    getRootActivityHash\n  };\n};\n\nexport const getLoopCounterFailsafe = () => {\n  let fetchLoopCount = 0;\n\n  return () => {\n    fetchLoopCount += 1;\n    if (fetchLoopCount > fetchLoopCountMax) {\n      throw new Error('max fetches reached');\n    }\n  };\n};\n\n/**\n * creates activity query object\n * @param {string} type type of query to create\n * @param {object} queryOptions options to define query\n * @param {string} [queryOptions.newestPublishedDate] the date of the newest fetched activity\n * @param {string} [queryOptions.oldestPublishedDate] the date of the oldest fetched activity\n * @param {number} [queryOptions.batchSize] the number of activities to query\n * @param {object} [queryOptions.activityToSearch] a server activity to use to build middate query\n * @returns {object}\n */\nexport const getQuery = (type, queryOptions) => {\n  const {\n    newestPublishedDate, oldestPublishedDate, batchSize, activityToSearch = {}\n  } = queryOptions;\n\n  switch (type) {\n    case NEWER: {\n      const sinceDate = newestPublishedDate + 1;\n      const lastActivityFirst = false;\n\n      return {sinceDate, lastActivityFirst};\n    }\n    case MID: {\n      const searchType = getActivityType(activityToSearch);\n      let midDate;\n\n      if (searchType === ACTIVITY_TYPES.REPLY || searchType === ACTIVITY_TYPES.EDIT) {\n        midDate = activityToSearch.parent.published;\n      }\n      else {\n        midDate = activityToSearch.published;\n      }\n\n      return {midDate, limit: batchSize};\n    }\n    case OLDER: {\n      const maxDate = oldestPublishedDate - 1;\n\n      return {maxDate};\n    }\n    case INITIAL:\n    default: {\n      return {};\n    }\n  }\n};\n"],"mappings":"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"}