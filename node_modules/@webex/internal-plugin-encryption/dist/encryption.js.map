{"version":3,"names":["Encryption","WebexPlugin","extend","children","kms","KMS","namespace","processKmsMessageEvent","event","decryptBinary","scr","buffer","ensureBuffer","then","b","length","byteLength","reject","Error","decrypt","decryptScr","key","cipherScr","options","getKey","k","SCR","fromJWE","jwk","decryptText","ciphertext","jose","JWE","createDecrypt","result","plaintext","toString","download","loc","shunt","EventEmitter","promise","_fetchDownloadUrl","uri","method","responseType","ret","request","transferEvents","res","body","proxyEvents","logger","info","process","env","NODE_ENV","includes","resolve","inputBody","endpoints","endpointUrl","url","parse","protocol","pathname","format","allow","params","warn","encryptBinary","file","create","encrypt","cdata","encryptScr","toJWE","encryptText","createEncrypt","config","joseOptions","header","alg","reference","final","onBehalfOf","asKey","storageKey","unboundedStorage","get","keyString","JSON","keyObject","catch","fetchKey","tap","put","replacer","v","json","toJSON"],"sources":["encryption.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {EventEmitter} from 'events';\nimport url from 'url';\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport {proxyEvents, tap, transferEvents} from '@webex/common';\nimport jose from 'node-jose';\nimport SCR from 'node-scr';\n\nimport ensureBuffer from './ensure-buffer';\nimport KMS from './kms';\n\nconst Encryption = WebexPlugin.extend({\n  children: {\n    kms: KMS\n  },\n\n  namespace: 'Encryption',\n\n  processKmsMessageEvent(event) {\n    return this.kms.processKmsMessageEvent(event);\n  },\n\n  decryptBinary(scr, buffer) {\n    return ensureBuffer(buffer)\n      .then((b) => {\n        /* istanbul ignore if */\n        if (buffer.length === 0 || buffer.byteLength === 0) {\n          return Promise.reject(new Error('Attempted to decrypt zero-length buffer'));\n        }\n\n        return scr.decrypt(b);\n      });\n  },\n\n  /**\n   * Decrypt a SCR (Secure Content Resource) using the supplied key uri.\n   *\n   * @param {string} key - The uri of a key stored in KMS\n   * @param {Object} cipherScr - An encrypted SCR\n   * @param {Object} options\n   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role\n   * @returns {Object} Decrypted SCR\n   */\n  decryptScr(key, cipherScr, options) {\n    return this.getKey(key, options)\n      .then((k) => SCR.fromJWE(k.jwk, cipherScr));\n  },\n\n  /**\n   * Decrypt text using the supplied key uri.\n   *\n   * @param {string} key - The uri of a key stored in KMS\n   * @param {string} ciphertext - Encrypted text\n   * @param {Object} options\n   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role\n   * @returns {string} Decrypted plaintext\n   */\n  decryptText(key, ciphertext, options) {\n    return this.getKey(key, options)\n      .then((k) => jose.JWE\n        .createDecrypt(k.jwk)\n        .decrypt(ciphertext)\n        .then((result) => result.plaintext.toString()));\n  },\n\n  /**\n   * Validate and initiate a Download request for requested file\n   *\n   * @param {Object} scr - Plaintext\n   * @param {Object} options - optional paramaters to download a file\n   * @returns {promise}\n   */\n  download(scr, options) {\n    /* istanbul ignore if */\n    if (!scr.loc) {\n      return Promise.reject(new Error('`scr.loc` is required'));\n    }\n\n    const shunt = new EventEmitter();\n    const promise = this._fetchDownloadUrl(scr, options)\n      .then((uri) => {\n        const options = {\n          method: 'GET',\n          uri,\n          responseType: 'buffer'\n        };\n\n        const ret = this.request(options);\n\n        transferEvents('progress', options.download, shunt);\n\n        return ret;\n      })\n      .then((res) => this.decryptBinary(scr, res.body));\n\n    proxyEvents(shunt, promise);\n\n    return promise;\n  },\n\n  /**\n   * Fetch Download URL for the requested file\n   *\n   * @param {Object} scr - Plaintext\n   * @param {Object} options - optional paramaters to download a file\n   * @returns {promise} url of the downloadable file\n   */\n  _fetchDownloadUrl(scr, options) {\n    this.logger.info('encryption: retrieving download url for encrypted file');\n\n    if (process.env.NODE_ENV !== 'production' && scr.loc.includes('localhost')) {\n      this.logger.info('encryption: bypassing webex files because this looks to be a test file on localhost');\n\n      return Promise.resolve(scr.loc);\n    }\n\n    const inputBody = {\n      endpoints: [scr.loc]\n    };\n    const endpointUrl = url.parse(scr.loc);\n\n    // hardcode the url to use 'https' and the file service '/v1/download/endpoints' api\n    endpointUrl.protocol = 'https';\n    endpointUrl.pathname = '/v1/download/endpoints';\n\n    return this.request({\n      method: 'POST',\n      uri: url.format(endpointUrl),\n      body: options ? {\n        ...inputBody,\n        allow: options.params.allow\n      } : inputBody\n    })\n      .then((res) => {\n        const url = res.body.endpoints[scr.loc];\n\n        if (!url) {\n          this.logger.warn('encryption: could not determine download url for `scr.loc`; attempting to download `scr.loc` directly');\n\n          return scr.loc;\n        }\n        this.logger.info('encryption: retrieved download url for encrypted file');\n\n        return url;\n      });\n  },\n\n  encryptBinary(file) {\n    return ensureBuffer(file)\n      .then((buffer) => SCR.create()\n        .then((scr) => scr.encrypt(buffer)\n          .then(ensureBuffer)\n          // eslint-disable-next-line max-nested-callbacks\n          .then((cdata) => ({scr, cdata}))));\n  },\n\n  /**\n   * Encrypt a SCR (Secure Content Resource) using the supplied key uri.\n   *\n   * @param {string} key - The uri of a key stored in KMS\n   * @param {Object} scr - Plaintext\n   * @param {Object} options\n   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role\n   * @returns {string} Encrypted SCR\n   */\n  encryptScr(key, scr, options) {\n    /* istanbul ignore if */\n    if (!scr.loc) {\n      return Promise.reject(new Error('Cannot encrypt `scr` without first setting `loc`'));\n    }\n\n    return this.getKey(key, options)\n      .then((k) => scr.toJWE(k.jwk));\n  },\n\n  /**\n   * Encrypt plaintext using the supplied key uri.\n   *\n   * @param {string} key - The uri of a key stored in KMS\n   * @param {string} plaintext\n   * @param {Object} options\n   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role\n   * @returns {string} Encrypted text\n   */\n  encryptText(key, plaintext, options) {\n    return this.getKey(key, options)\n      .then((k) => jose.JWE\n        .createEncrypt(this.config.joseOptions, {\n          key: k.jwk,\n          header: {\n            alg: 'dir'\n          },\n          reference: null\n        })\n        .final(plaintext, 'utf8'));\n  },\n\n  /**\n   * Fetch the key associated with the supplied KMS uri.\n   *\n   * @param {string} uri - The uri of a key stored in KMS\n   * @param {Object} options\n   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role\n   * @returns {string} Key\n   */\n  getKey(uri, {onBehalfOf} = {}) {\n    if (uri.jwk) {\n      return this.kms.asKey(uri);\n    }\n\n    let storageKey = uri;\n\n    if (onBehalfOf) {\n      storageKey += `/onBehalfOf/${onBehalfOf}`;\n    }\n\n    return this.unboundedStorage.get(storageKey)\n      .then((keyString) => JSON.parse(keyString))\n      .then((keyObject) => this.kms.asKey(keyObject))\n      .catch(() => this.kms.fetchKey({uri, onBehalfOf})\n        .then(tap((key) => this.unboundedStorage.put(storageKey, JSON.stringify(key, replacer)))));\n  }\n});\n\n/**\n * JSON.stringify replacer that ensures private key data is serialized.\n * @param {string} k\n * @param {mixed} v\n * @returns {mixed}\n */\nfunction replacer(k, v) {\n  if (k === 'jwk') {\n    // note: this[k] and v may be different representations of the same value\n    // eslint-disable-next-line no-invalid-this\n    const json = this[k].toJSON(true);\n\n    return json;\n  }\n\n  return v;\n}\n\nexport default Encryption;\n"],"mappings":"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"}