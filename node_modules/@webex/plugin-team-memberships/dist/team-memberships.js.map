{"version":3,"names":["TeamMemberships","WebexPlugin","extend","create","membership","request","method","service","resource","body","then","res","get","id","items","list","options","qs","Page","webex","remove","statusCode","undefined","update"],"sources":["team-memberships.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\n\n/**\n * @typedef {Object} TeamMembershipObject\n * @property {string} id - (server generated) Unique identifier for the team membership\n * @property {string} teamId - The team ID\n * @property {string} personId - The person ID\n * @property {string} personEmail - The email address of the person\n * @property {boolean} isModerator - Set to `true` to make the person a team\n * moderator\n * @property {string} created - (server generated) The date and time that the team membership was created\n */\n\n/**\n * Team Memberships represent a person's relationship to a team. Use this API to\n * list members of any team that you're in or create memberships to invite\n * someone to a team. Team memberships can also be updated to make someome a\n * moderator or deleted to remove them from the team.\n *\n * Just like in the Webex app, you must be a member of the team in order to list\n * its memberships or invite people.\n * @class\n */\nconst TeamMemberships = WebexPlugin.extend({\n  /**\n   * Add someone to a team by Person ID or email address; optionally making them\n   * a moderator.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject} membership\n   * @returns {Promise<TeamMembershipObject>}\n   * @example\n   * webex.teams.create({name: 'Create Team Membership Example'})\n   *   .then(function(team) {\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.teamId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'team/memberships',\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Get details for a membership by ID.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject|string} membership\n   * @returns {Promise<TeamMembershipObject>}\n   * @example\n   * var membership;\n   * webex.teams.create({name: 'Get Team Memberships Example'})\n   *   .then(function(team) {\n   *     return webex.teamMemberships.create({\n   *       personEmail: 'alice@example.com',\n   *       teamId: team.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.teamMemberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      service: 'hydra',\n      resource: `team/memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Lists all team memberships. By default, lists memberships for teams to\n   * which the authenticated user belongs.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {Object} options\n   * @param {string} options.max\n   * @returns {[type]}\n   * @example\n   * var team;\n   * webex.teams.create({name: 'List Team Memberships Example'})\n   *   .then(function(t) {\n   *     team = t;\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 2);\n   *     for (var i = 0; i < teamMemberships.length; i+= 1) {\n   *       assert.equal(teamMemberships.items[i].teamId, team.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'team/memberships',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Deletes a membership by ID.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject|string} membership\n   * @returns {Promise}\n   * @example\n   * var membership, team;\n   * webex.teams.create({name: 'Remove Team Memberships Example'})\n   *   .then(function(t) {\n   *     team = t;\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 2);\n   *     return webex.teamMemberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `team/memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Updates properties for a membership.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject} membership\n   * @returns {Promise<TeamMembershipObject>}\n   */\n  update(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `team/memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default TeamMemberships;\n"],"mappings":";;;;;;;;;;AAIA;;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,eAAe,GAAGC,sBAAA,CAAYC,MAAZ,CAAmB;EACzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MA5ByC,kBA4BlCC,UA5BkC,EA4BtB;IACjB,OAAO,KAAKC,OAAL,CAAa;MAClBC,MAAM,EAAE,MADU;MAElBC,OAAO,EAAE,OAFS;MAGlBC,QAAQ,EAAE,kBAHQ;MAIlBC,IAAI,EAAEL;IAJY,CAAb,EAMJM,IANI,CAMC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACF,IAAb;IAAA,CAND,CAAP;EAOD,CApCwC;;EAsCzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,GAhEyC,eAgErCR,UAhEqC,EAgEzB;IACd,IAAMS,EAAE,GAAGT,UAAU,CAACS,EAAX,IAAiBT,UAA5B;IAEA,OAAO,KAAKC,OAAL,CAAa;MAClBE,OAAO,EAAE,OADS;MAElBC,QAAQ,6BAAsBK,EAAtB;IAFU,CAAb,EAIJH,IAJI,CAIC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACF,IAAJ,CAASK,KAAT,IAAkBH,GAAG,CAACF,IAA/B;IAAA,CAJD,CAAP;EAKD,CAxEwC;;EA0EzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,IAzGyC,gBAyGpCC,OAzGoC,EAyG3B;IAAA;;IACZ,OAAO,KAAKX,OAAL,CAAa;MAClBE,OAAO,EAAE,OADS;MAElBC,QAAQ,EAAE,kBAFQ;MAGlBS,EAAE,EAAED;IAHc,CAAb,EAKJN,IALI,CAKC,UAACC,GAAD;MAAA,OAAS,IAAIO,eAAJ,CAASP,GAAT,EAAc,KAAI,CAACQ,KAAnB,CAAT;IAAA,CALD,CAAP;EAMD,CAhHwC;;EAkHzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MArJyC,kBAqJlChB,UArJkC,EAqJtB;IACjB,IAAMS,EAAE,GAAGT,UAAU,CAACS,EAAX,IAAiBT,UAA5B;IAEA,OAAO,KAAKC,OAAL,CAAa;MAClBC,MAAM,EAAE,QADU;MAElBC,OAAO,EAAE,OAFS;MAGlBC,QAAQ,6BAAsBK,EAAtB;IAHU,CAAb,EAKJH,IALI,CAKC,UAACC,GAAD,EAAS;MACb;MACA;MACA,IAAIA,GAAG,CAACU,UAAJ,KAAmB,GAAvB,EAA4B;QAC1B,OAAOC,SAAP;MACD;;MAED,OAAOX,GAAG,CAACF,IAAX;IACD,CAbI,CAAP;EAcD,CAtKwC;;EAwKzC;AACF;AACA;AACA;AACA;AACA;AACA;EACEc,MA/KyC,kBA+KlCnB,UA/KkC,EA+KtB;IACjB,IAAMS,EAAE,GAAGT,UAAU,CAACS,EAAX,IAAiBT,UAA5B;IAEA,OAAO,KAAKC,OAAL,CAAa;MAClBC,MAAM,EAAE,KADU;MAElBC,OAAO,EAAE,OAFS;MAGlBC,QAAQ,6BAAsBK,EAAtB,CAHU;MAIlBJ,IAAI,EAAEL;IAJY,CAAb,EAMJM,IANI,CAMC,UAACC,GAAD;MAAA,OAASA,GAAG,CAACF,IAAb;IAAA,CAND,CAAP;EAOD,CAzLwC;EAAA;AAAA,CAAnB,CAAxB;;eA4LeT,e"}