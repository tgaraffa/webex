{"version":3,"names":["hydraBaseUrl","isRequired","Error","constructHydraId","type","id","cluster","toUpperCase","hydraTypes","PEOPLE","ORGANIZATION","encode","deconstructHydraId","payload","decode","split","pop","buildHydraMessageId","uuid","MESSAGE","buildHydraPersonId","buildHydraRoomId","ROOM","buildHydraOrgId","buildHydraMembershipId","personUUID","spaceUUID","MEMBERSHIP","getHydraClusterString","webex","conversationUrl","internalClusterString","internal","services","getClusterId","startsWith","INTERNAL_US_CLUSTER_NAME","INTERNAL_US_INTEGRATION_CLUSTER_NAME","clusterParts","length","getHydraRoomType","tags","includes","SDK_EVENT","INTERNAL","ACTIVITY_TAG","ONE_ON_ONE","EXTERNAL","SPACE_TYPE","DIRECT","GROUP","getHydraFiles","activity","hydraFiles","files","object","items","i","contentId","CONTENT","push"],"sources":["uuid-utils.js"],"sourcesContent":["import {encode, decode} from './base64';\nimport {SDK_EVENT, hydraTypes, INTERNAL_US_CLUSTER_NAME, INTERNAL_US_INTEGRATION_CLUSTER_NAME} from './constants';\n\nconst hydraBaseUrl = 'https://api.ciscospark.com/v1';\n\nconst isRequired = () => {\n  throw Error('parameter is required');\n};\n\n/**\n * Constructs a Hydra ID for a given UUID and type.\n *\n * @export\n * @param {string} type one of PEOPLE, TEAM, ROOM\n * @param {any} id identifying the \"TYPE\" object\n * @param {string} cluster containing the \"TYPE\" object\n * @returns {string}\n */\nexport function constructHydraId(\n  type = isRequired(),\n  id = isRequired(),\n  cluster = 'us'\n) {\n  if (!type.toUpperCase) {\n    throw Error('\"type\" must be a string');\n  }\n\n  if ((type === hydraTypes.PEOPLE) || (type === hydraTypes.ORGANIZATION)) {\n    // Cluster is always \"us\" for people and orgs\n    return encode(`ciscospark://us/${type.toUpperCase()}/${id}`);\n  }\n\n  return encode(`ciscospark://${cluster}/${type.toUpperCase()}/${id}`);\n}\n\n/**\n * @typedef {Object} DeconstructedHydraId\n * @property {UUID} id identifying the object\n * @property {String} type of the object\n * @property {String} cluster containing the object\n */\n\n/**\n * Deconstructs a Hydra ID.\n *\n * @export\n * @param {String} id Hydra style id\n * @returns {DeconstructedHydraId} deconstructed id\n */\nexport function deconstructHydraId(id) {\n  const payload = decode(id).split('/');\n\n  return {\n    id: payload.pop(),\n    type: payload.pop(),\n    cluster: payload.pop()\n  };\n}\n\n/**\n * Constructs a Hydra ID for a message based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the message\n * @returns {string}\n */\nexport function buildHydraMessageId(uuid, cluster) {\n  return constructHydraId(hydraTypes.MESSAGE, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for a person based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the person\n * @returns {string}\n */\nexport function buildHydraPersonId(uuid, cluster) {\n  return constructHydraId(hydraTypes.PEOPLE, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for a room based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the room\n * @returns {string}\n */\nexport function buildHydraRoomId(uuid, cluster) {\n  return constructHydraId(hydraTypes.ROOM, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for an organization based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the organization\n * @returns {string}\n */\nexport function buildHydraOrgId(uuid, cluster) {\n  return constructHydraId(hydraTypes.ORGANIZATION, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for an membership based on an\n * internal UUID for the person, and the space\n *\n * @export\n * @param {any} personUUID\n * @param {any} spaceUUID\n * @param {string} cluster containing the membership\n * @returns {string}\n */\nexport function buildHydraMembershipId(personUUID, spaceUUID, cluster) {\n  return constructHydraId(hydraTypes.MEMBERSHIP,\n    `${personUUID}:${spaceUUID}`, cluster);\n}\n\n/**\n * Returns a hydra cluster string based on a conversation url\n * @private\n * @memberof Messages\n * @param {Object} webex sdk instance\n * @param {String} conversationUrl url of space where activity took place\n * @returns {String} string suitable for UUID -> public ID encoding\n */\nexport function getHydraClusterString(webex, conversationUrl) {\n  const internalClusterString =\n    webex.internal.services.getClusterId(conversationUrl);\n\n  if ((internalClusterString.startsWith(INTERNAL_US_CLUSTER_NAME)) ||\n    (internalClusterString.startsWith(INTERNAL_US_INTEGRATION_CLUSTER_NAME))) {\n    // Original US cluster is simply 'us' for backwards compatibility\n    return 'us';\n  }\n  const clusterParts = internalClusterString.split(':');\n\n  if (clusterParts.length < 3) {\n    throw Error(`Unable to determine cluster for convo: ${conversationUrl}`);\n  }\n\n  return `${clusterParts[0]}:${clusterParts[1]}:${clusterParts[2]}`;\n}\n\n/**\n * Returns a Hydra roomType based on conversation tags\n *\n * @export\n * @param {arra} tags\n * @param {any} spaceUUID\n * @returns {string}\n */\nexport function getHydraRoomType(tags) {\n  if (tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE)) {\n    return SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n  }\n\n  return SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n}\n\n/**\n * Returns file URLs for the activity, adhering to Hydra details,\n * e.g., https://api.ciscospark.com/v1/contents/Y2lzY29zcGF...\n * @see https://developer.webex.com/docs/api/v1/messages/get-message-details\n * @param {Object} activity from mercury\n * @param {string} cluster containing the files\n * @returns {Array} file URLs\n */\nexport function getHydraFiles(activity, cluster) {\n  const hydraFiles = [];\n  const {files} = activity.object;\n\n  if (files) {\n    const {items} = files;\n\n    // Note: Generated ID is dependent on file order.\n    for (let i = 0; i < items.length; i += 1) {\n      const contentId =\n        constructHydraId(hydraTypes.CONTENT, `${activity.id}/${i}`, cluster);\n\n      hydraFiles.push(`${hydraBaseUrl}/contents/${contentId}`);\n    }\n  }\n\n  return hydraFiles;\n}\n"],"mappings":"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"}